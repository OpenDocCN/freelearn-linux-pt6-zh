- en: Chapter 6. Monitoring Nginx
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章：监控Nginx
- en: After reading this chapter you will be able to set up proper monitoring for
    your Nginx installation using the features freely available as part of base Nginx
    distribution and several of the more popular monitoring and alerting systems available
    on the market.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读本章后，你将能够利用Nginx基础发行版中自由提供的功能以及市场上几种流行的监控和报警系统，为你的Nginx安装设置合适的监控。
- en: You will also get acquainted with an advanced monitoring solution that is included
    in the Nginx Plus subscription package, which the makers of Nginx sell as a commercial
    service.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将了解一种高级的监控解决方案，它包含在Nginx Plus订阅包中，这是Nginx开发者作为商业服务出售的。
- en: Knowing what is happening to your web server is the first step towards fixing
    and preventing any problems. Setting up monitoring and alerting is one of the
    essential steps in any production deployment, and Nginx web servers are not the
    exception here. Experienced web administrators will never feel calm enough until
    they have real-time insight into the performance and load indicators.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 了解你的Web服务器发生了什么，是解决和预防问题的第一步。设置监控和报警是任何生产部署中的重要步骤，Nginx Web服务器也不例外。经验丰富的Web管理员在没有实时性能和负载指标的洞察时，永远无法放松警惕。
- en: There are several sources of data for your monitoring system provided by Nginx.
    First, there are logs, which you may configure up to your preferences. There is
    also a number of statistics interfaces available for Nginx that you may enable
    and connect to various industrial monitoring systems, both free and commercial.
    The logging subsystem was described in the [Chapter 2](ch02.html "Chapter 2. Searching
    for Problems in Log Files"), *Searching for Problems in Log Files*, which can
    be referred to for additional information. One particular tool that uses logs
    to enable online monitoring and debugging should be mentioned.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx为你的监控系统提供了多个数据源。首先是日志，你可以根据个人需求进行配置。此外，Nginx还提供了多个统计接口，您可以启用并连接到各种工业监控系统，包括免费的和商业的。日志子系统在[第2章](ch02.html
    "第2章：日志文件中的问题查找")中有描述，*查找日志文件中的问题*，可以参考该章节获取更多信息。有一个特别的工具，它利用日志来进行在线监控和调试，应当提到。
- en: Using ngxtop
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ngxtop
- en: When the first version of the famous Unix utility top(1) was conceived in 1984,
    imitating an old VMS command that did a similar thing, the author was unlikely
    to imagine that he actually created a whole class of online system administration
    tools suited for both routine and emergency situations. Since then, top has become
    an essential program, and many other utilities have been born with the same principle
    in mind—produce a dynamic interactive *top N* list of items sorted by a particular
    criteria. There are `htop`, `iotop`, `mytop`, `pg_top`, `ntop`, `iftop`, and many
    others. The Nginx ecosystem has its own top, which is named `ngxtop` and is hosted
    on [https://github.com/lebinh/ngxtop](https://github.com/lebinh/ngxtop).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当1984年设计出著名的Unix工具top(1)时，模仿了一个旧的VMS命令，它做的事情很相似，作者不太可能想到他实际上创造了一个适用于常规和紧急情况的在线系统管理工具的完整类别。从那时起，top成为了一个必不可少的程序，许多其他工具也以相同的原则诞生——生成一个按特定标准排序的动态交互式*前N名*项目列表。还有`htop`、`iotop`、`mytop`、`pg_top`、`ntop`、`iftop`等许多工具。Nginx生态系统也有自己的top，名为`ngxtop`，并托管在[https://github.com/lebinh/ngxtop](https://github.com/lebinh/ngxtop)上。
- en: 'The recommended way to install ngxtop is using the `pip` package manager for
    Python packages. Your distribution may or may not have `pip` installed by default,
    so you might also need to install `pip` first. On Debian-based Linux distributions,
    you will usually be all set up with:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐的安装ngxtop方式是使用Python包管理器`pip`。你的发行版可能默认没有安装`pip`，因此你可能需要先安装`pip`。在基于Debian的Linux发行版中，你通常可以通过以下命令设置：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On a FreeBSD box, you need to install the port `devel/py-pip` with these:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在FreeBSD系统中，你需要使用以下命令安装端口`devel/py-pip`：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When `pip` is available, you can install the actual `ngxtop` with it:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当`pip`可用时，你可以使用它安装实际的`ngxtop`：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can run `ngxtop` right away, and due to some heuristics, it will correctly
    locate your main Nginx log all by itself.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以直接运行`ngxtop`，凭借一些启发式的判断，它将自动正确定位你的主Nginx日志。
- en: 'This is how the `ngxtop` default output looks like on a simple and rather idle
    website access log:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`ngxtop`在一个简单且几乎闲置的网站访问日志中的默认输出：
- en: '![Using ngxtop](img/B04329_06_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![使用ngxtop](img/B04329_06_01.jpg)'
- en: There are two tables in the output. The first one shows the summary line. The
    columns are pretty obvious. The ones that must catch your attention immediately
    are the rightmost two (titled 4xx and 5xx), which contain the counters for the
    HTTP requests that led to errors.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 输出中有两个表格。第一个表格显示的是摘要行。各列非常直观，最需要立即注意的是最右边的两列（标题为4xx和5xx），它们包含了导致错误的 HTTP 请求的计数器。
- en: The second table is more interesting because it has all the incoming requests
    classified by the request path. You may immediately see which paths generate errors,
    for example. In the earlier example, you will note that the website lacks the
    `robots.txt` file and also the special high resolution icons, which were first
    used by the iOS. The counts in the lower table do not add up exactly to the respective
    counts in the top table because the least happening request paths are not included
    here.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个表格更有意思，因为它将所有传入请求按请求路径进行了分类。你可以立刻看到哪些路径产生了错误。例如，在前面的示例中，你会注意到网站缺少`robots.txt`文件以及特殊的高分辨率图标，这些图标最早由
    iOS 使用。下表中的计数与上表中的相应计数不完全相等，因为发生频率最低的请求路径没有包含在内。
- en: ngxtop has several powerful command-line options, which make it one of the best
    tools to analyze a log from a misbehaving website. For example, in [Chapter 2](ch02.html
    "Chapter 2. Searching for Problems in Log Files"), *Searching for Problems in
    Log Files*, we described how to create custom log formats extending the information
    beyond what a common access logs offer. ngxtop is able to accept a log format
    definition and even parse it from the `nginx.conf` file itself.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: ngxtop 有几个强大的命令行选项，使它成为分析故障网站日志的最佳工具之一。例如，在[第二章](ch02.html "第二章. 在日志文件中搜索问题")，*在日志文件中搜索问题*，我们描述了如何创建自定义日志格式，扩展了常见访问日志所提供的信息。ngxtop
    能够接受日志格式定义，甚至可以直接从`nginx.conf`文件中解析。
- en: 'The command-line switch for the custom log format is `-f`. The whole command
    will look just like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义日志格式的命令行开关是`-f`。整个命令看起来会像这样：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Getting statistics from http_stub_status
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从http_stub_status获取统计数据
- en: Nginx base distribution contains a simple module that provides access to several
    rather basic but useful counters inside Nginx that are very important to monitor
    on a regular basis. The module is named `ngx_http_stub_status`, and we will describe
    how to use it in monitoring.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 基本发行版包含了一个简单的模块，提供对 Nginx 内部几个相当基础但非常有用的计数器的访问，这些计数器对于定期监控非常重要。这个模块名为`ngx_http_stub_status`，我们将描述如何在监控中使用它。
- en: 'This module is not compiled by default. To check if your Nginx distribution
    is compiled with the `stub_status` module, you can use this command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这个模块没有被编译。要检查你的 Nginx 发行版是否已编译了`stub_status`模块，你可以使用以下命令：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you see `1`, then this module is compiled and linked to your Nginx binary.
    Otherwise, you need to compile it using `--with-http_stub_status_module` parameter
    to `configure` script that is invoked during Nginx compilation.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到`1`，那么这个模块已经编译并链接到你的 Nginx 二进制文件中。否则，你需要在 Nginx 编译期间使用`--with-http_stub_status_module`参数编译它。
- en: 'Once you have this module available, you can use its directives (actually,
    there is only one) in `nginx.conf`. This is an example of `stub-status` sharing:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了这个模块，你可以在`nginx.conf`中使用它的指令（实际上，只有一个指令）。这是`stub-status`共享的示例：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This module belongs to the family of the so-called content-generating modules,
    which are able to directly process incoming HTTP requests and generate responses.
    The other main family of modules that can provide HTTP responses to clients are
    the upstream modules, which are more complex content generators consulting external
    resources for the actual data. While we spent a significant amount of time explaining
    upstreams in previous chapters, content generators were not given so much attention
    due to their relative simplicity. Some other interesting content-generating modules
    that are included in Nginx distribution are `ngx_http_empty_gif` and `ngx_http_autoindex`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块属于所谓的内容生成模块家族，这些模块能够直接处理传入的 HTTP 请求并生成响应。另一类主要的模块家族是上游模块，它们是更复杂的内容生成器，通过外部资源获取实际数据以提供
    HTTP 响应。虽然我们在之前的章节中花了大量时间解释上游模块，但由于内容生成模块相对简单，我们并没有过多关注它们。Nginx 发行版中包含的其他有趣的内容生成模块有`ngx_http_empty_gif`和`ngx_http_autoindex`。
- en: 'The earlier configuration will create a primitive web page as a response to
    the GET request with the URI of `/stub-status`. You can use any other URI as well.
    The page will contain several counters. Let''s see an example and learn what those
    numbers mean. A fresh web server after a restart will generate this page:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置将在收到 URI 为 `/stub-status` 的 GET 请求时生成一个原始的网页响应。你也可以使用其他 URI。该页面将包含几个计数器。我们来看一个示例，了解这些数字代表什么。重启后的全新
    Web 服务器会生成以下页面：
- en: '![Getting statistics from http_stub_status](img/B04329_06_02.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![从 http_stub_status 获取统计信息](img/B04329_06_02.jpg)'
- en: 'This is not even a web page per se, but just a plain text HTTP response clearly
    intended to be processed by scripts and not by people:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这甚至不是一个真正的网页，而仅仅是一个纯文本 HTTP 响应，显然是为了被脚本处理而非供人查看：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s dive deeper into the values that you see in this output:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地了解你在输出中看到的数值：
- en: '| Parameter name | Description |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 参数名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Active connections | This is the number of all client connections that are
    being processed right now. This counter is bumped on each successful `accept()`
    and decreased after each `close()`. The number will also be a sum of reading +
    writing + waiting. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 活跃连接数 | 这是当前正在处理的所有客户端连接的数量。每当成功执行 `accept()` 时，这个计数器就会增加，而每当执行 `close()`
    时，它会减少。这个数字也将是“读取” + “写入” + “等待”的总和。 |'
- en: '| Server accepts | The global ever-increasing counter of all connections that
    were `accept()-ed`. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 服务器接受的连接数 | 所有被 `accept()` 接受过的连接的全局不断增加计数器。 |'
- en: '| Handled | The counter of all handled connections. Most of the time, this
    number is the same as the previous one, but some of the connections are closed
    right after being accepted and they are not counted as handled. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 处理的连接数 | 所有已处理连接的计数器。大多数时候，这个数字与前一个相同，但有些连接在接受后立即关闭，这些连接不会被算作已处理连接。 |'
- en: '| Requests | This is the global counter of all HTTP requests received by this
    Nginx instance. It may be smaller than the handled counter due to "keep-alive"
    connections that may receive many requests before closing. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 请求数 | 这是该 Nginx 实例接收到的所有 HTTP 请求的全局计数器。由于“保持连接”（keep-alive），这个数值可能小于处理连接的计数器，因为保持连接可能在关闭前接收多个请求。
    |'
- en: '| Reading: | This is a snapshot number of all connections that are currently
    in the process of reading HTTP request headers. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 读取： | 这是当前正在读取 HTTP 请求头的所有连接的快照数。 |'
- en: '| Writing: | This is the number of connections that are in one of the states
    after the reading of the headers of the request. It may be a little confusing,
    but connections that are reading the body of the request or communicating with
    one of the upstreams are counted against this number. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 写入： | 这是处于读取请求头后状态的连接数。这可能有点混淆，但正在读取请求体或与上游通信的连接也会计入这个数字。 |'
- en: '| Waiting: | This is the counter of all "keep-alive" connections that are waiting
    for the next request from the same connected client. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 等待： | 这是所有“保持连接”中等待来自同一连接客户端的下一个请求的计数器。 |'
- en: 'Most of these counters are also available as Nginx variables and can be used
    in the `log_format` configuration. The module exports these variables:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这些计数器中的大多数也作为 Nginx 变量可用，可以在 `log_format` 配置中使用。该模块导出了这些变量：
- en: '`$connections_active`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$connections_active`'
- en: '`$connections_reading`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$connections_reading`'
- en: '`$connections_writing`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$connections_writing`'
- en: '`$connections_waiting`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$connections_waiting`'
- en: The global counts of connections and requests can be restored from the logs
    without any additional variables.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 连接数和请求数的全局计数可以通过日志恢复，而无需任何额外的变量。
- en: The only directive from this module is `stub_status`, and its usage pattern
    is obvious from the earlier example. You can specify it in one of the scopes;
    most probably, you will choose a location. Older versions of Nginx may require
    you to specify a parameter like `ok` or `1` for this directive.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块的唯一指令是 `stub_status`，它的使用模式从之前的示例中可以看出。你可以在其中一个作用域内指定它；最有可能的是，你会选择一个位置（location）。旧版本的
    Nginx 可能要求你为此指令指定类似 `ok` 或 `1` 的参数。
- en: While the simplest status content generator may only contain one line with this
    directive, it is highly recommended to make some additions.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然最简单的状态内容生成器可能只包含一行该指令，但强烈建议做一些额外的配置。
- en: 'This is the working practical example of `stub_status` configuration:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `stub_status` 配置的实际工作示例：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `access_log off` directive will switch off logging for this location. You
    may want to comment out it while you debug but in the end only your monitoring
    system will make requests to this path from predefined IP addresses and at predefined
    intervals. The logging of this regular GET request-response pair will not be very
    useful while littering the logs with very redundant information.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`access_log off`指令将关闭此位置的日志记录。调试时，您可能希望注释掉此指令，但最终，只有您的监控系统会从预定义的IP地址和预定义的时间间隔向此路径发出请求。记录这种常规的GET请求-响应对在日志中充斥冗余信息并不会非常有用。'
- en: The third and the fourth lines are about access control. While `stub_status`
    does not share any particularly confidential information, it may still be valuable
    to either competitors or malicious actors who plan to attack your infrastructure.
    A golden rule of not sharing anything by default works here.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第三行和第四行涉及访问控制。虽然`stub_status`不会共享特别机密的信息，但它仍然可能对竞争对手或有恶意意图的攻击者有所价值，尤其是那些计划攻击您的基础设施的人。遵循默认不共享任何信息的黄金法则在这里同样适用。
- en: 'To fully understand how we could use the data, let''s write a simple manual
    alerting script using cron. As an example, we will specify the task as follows:
    once a minute check the requests rate and alert the administrator if the rate
    per minute exceeds a certain predefined threshold.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分理解如何使用数据，首先让我们编写一个简单的手动告警脚本，使用cron来定时执行。举个例子，我们将任务指定为：每分钟检查一次请求速率，如果每分钟的请求速率超过某个预设的阈值，则告警管理员。
- en: 'The code for the check is given later. It is a simple Perl script that should
    be called from a crontab with a time specification of `*/1 * * * *`, which means
    running once every minute. It uses the `PushBullet` service to send alerts. `PushBullet`
    allows mobile apps and browser extensions to receive those notifications and has
    a simple HTTP API:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 检查的代码稍后给出。这是一个简单的Perl脚本，应通过crontab调用，时间设置为`*/1 * * * *`，意味着每分钟运行一次。它使用`PushBullet`服务来发送告警。`PushBullet`允许移动应用和浏览器扩展接收这些通知，并提供一个简单的HTTP
    API：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The script parses the output of the `ngx_http_stub_status` module with a simple
    regular expression and compares the global requests counter with the previous
    value, which it saves in a file. If the increase in the counter divided by the
    time passed exceeds a constant, it sends an alert. This is the model employed
    by all monitoring and alerting systems out there.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本通过简单的正则表达式解析`ngx_http_stub_status`模块的输出，并将全局请求计数器与之前保存的值进行比较。如果计数器的增加量除以经过的时间超过一个常数，则发送告警。这是所有监控和告警系统使用的模型。
- en: The next step for us is using the data from this module as a sensor in several
    monitoring systems that are available on the market. Most of the systems allow
    comprehensive graphs of all available counters and also custom alerts on events
    like a value exceeding a threshold of some kind.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步是使用此模块中的数据作为多个市场上可用监控系统的传感器。大多数系统允许显示所有可用计数器的综合图表，还可以根据事件（例如某个值超过预定阈值）设置自定义告警。
- en: '| Monitoring system | Nginx support plugin |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 监控系统 | Nginx支持插件 |'
- en: '| --- | --- |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Nagios | [https://exchange.nagios.org/directory/Plugins/Web-Servers/nginx](https://exchange.nagios.org/directory/Plugins/Web-Servers/nginx)
    |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| Nagios | [https://exchange.nagios.org/directory/Plugins/Web-Servers/nginx](https://exchange.nagios.org/directory/Plugins/Web-Servers/nginx)
    |'
- en: '| Zabbix | [https://github.com/zbal/zabbix/blob/master/scripts/zabbix_nginx_check.sh](https://github.com/zbal/zabbix/blob/master/scripts/zabbix_nginx_check.sh)
    |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| Zabbix | [https://github.com/zbal/zabbix/blob/master/scripts/zabbix_nginx_check.sh](https://github.com/zbal/zabbix/blob/master/scripts/zabbix_nginx_check.sh)
    |'
- en: '| ZTC | [https://bitbucket.org/rvs/ztc/wiki/Home](https://bitbucket.org/rvs/ztc/wiki/Home)
    |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| ZTC | [https://bitbucket.org/rvs/ztc/wiki/Home](https://bitbucket.org/rvs/ztc/wiki/Home)
    |'
- en: '| Munin | [https://github.com/munin-monitoring/contrib/tree/master/plugins/nginx](https://github.com/munin-monitoring/contrib/tree/master/plugins/nginx)
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| Munin | [https://github.com/munin-monitoring/contrib/tree/master/plugins/nginx](https://github.com/munin-monitoring/contrib/tree/master/plugins/nginx)
    |'
- en: '| Cacti | [http://forums.cacti.net/download/file.php?id=12676](http://forums.cacti.net/download/file.php?id=12676)
    |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| Cacti | [http://forums.cacti.net/download/file.php?id=12676](http://forums.cacti.net/download/file.php?id=12676)
    |'
- en: '| Collectd | [https://collectd.org/wiki/index.php/Plugin:nginx](https://collectd.org/wiki/index.php/Plugin:nginx)
    |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| Collectd | [https://collectd.org/wiki/index.php/Plugin:nginx](https://collectd.org/wiki/index.php/Plugin:nginx)
    |'
- en: '| OpenNMS | [http://www.opennms.org/wiki/Monitoring_Nginx_with_the_HTTP_collector](http://www.opennms.org/wiki/Monitoring_Nginx_with_the_HTTP_collector)
    |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| OpenNMS | [http://www.opennms.org/wiki/Monitoring_Nginx_with_the_HTTP_collector](http://www.opennms.org/wiki/Monitoring_Nginx_with_the_HTTP_collector)
    |'
- en: Many hosted monitoring solutions, such as DataDog, Scout, New Relic or ServerDensity,
    support collecting data from the Nginx `http_stub_status` module as well.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 许多托管的监控解决方案，如 DataDog、Scout、New Relic 或 ServerDensity，也支持从 Nginx `http_stub_status`
    模块收集数据。
- en: 'Here is how ServerDensity displays data received from Nginx:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 ServerDensity 如何展示从 Nginx 获取的数据：
- en: '![Getting statistics from http_stub_status](img/B04329_06_03.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![从 http_stub_status 获取统计数据](img/B04329_06_03.jpg)'
- en: 'The earlier-mentioned graph will only contain two entities: current client
    connections and requests per second. You notice that those two come very close
    to each other, which means that there were no or little keep-alive connections
    that managed to pass over more than one request.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 前面提到的图表将只包含两个实体：当前的客户端连接和每秒请求数。你会注意到，这两个数据非常接近，意味着没有或只有很少的 keep-alive 连接能够处理超过一个请求。
- en: Monitoring Nginx with Munin
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Munin 监控 Nginx
- en: '**Munin** is a free software networking and infrastructure monitoring system.
    We chose it because the configuration is simple and allows us to demonstrate the
    principles. You will certainly prefer to use the same monitoring solution that
    you use for your other needs. If you do not currently use anything that is not
    very probable, Munin is as good an option as any other to start with.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**Munin** 是一个免费的网络和基础设施监控系统。我们选择它是因为配置简单，且可以帮助我们演示原理。你肯定会更喜欢使用你在其他需求中使用的相同监控解决方案。如果你目前没有使用任何监控工具，虽然这不太可能，但
    Munin 是一个和其他监控工具一样好的起步选择。'
- en: Munin was developed with easy extensibility via plugins in mind. It uses the
    famous RRDTool time series database that was first developed as part of MRTG but
    then found its way to many other free and open source software as the time series
    database and time-based graphs engine.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Munin 的开发考虑到了通过插件轻松扩展的需求。它使用著名的 RRDTool 时间序列数据库，该数据库最初作为 MRTG 的一部分开发，但后来成为许多其他免费和开源软件的时间序列数据库和基于时间的图表引擎。
- en: Installing Munin is not as easy as we wish it were but the process is thoroughly
    described in the online Munin guide [http://guide.munin-monitoring.org/en/latest/installation/index.html](http://guide.munin-monitoring.org/en/latest/installation/index.html).
    There is also a book about Munin published by *Packt Publishing*, *Instant Munin
    Plugin Starter*. It may be a little old but still contains enough relevant information.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Munin 并不像我们希望的那样简单，但这个过程在 Munin 在线指南中有详细描述：[http://guide.munin-monitoring.org/en/latest/installation/index.html](http://guide.munin-monitoring.org/en/latest/installation/index.html)。另外，*Packt
    Publishing* 出版了一本关于 Munin 的书，名为 *Instant Munin Plugin Starter*。这本书可能有些过时，但仍包含足够的相关信息。
- en: Munin is also one of the monitoring systems that has plugins to parse the output
    from the Nginx `http_stub_status` module in its distribution. The plugins are
    available right after Munin installation and are supported as part of the release
    cycle of Munin.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Munin 也是其中一个监控系统，拥有用于解析 Nginx `http_stub_status` 模块输出的插件。这些插件在 Munin 安装后即可使用，并且在
    Munin 的发布周期中会得到支持。
- en: The architecture of many network monitoring systems is very similar to a classic
    star topology system with a master that is responsible for drawing graphs, watching
    for events, and issuing alerts based on data provided by agents, each of which
    represent a host or a service. Munin agents are named nodes and installing Munin
    usually installs an instance of the Munin node on the same host as well. That
    sounds absolutely okay as the master host of a monitoring system should definitely
    be monitored itself. It is the node component that has integration with different
    software to get metrics that should be monitored. Munin plugins for Nginx are
    executable scripts that are run as part of the Munin node operation. The node
    process reports the data from those (and all the other) plugins to the Munin master,
    which has the interface for the administrators.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 许多网络监控系统的架构与经典的星型拓扑系统非常相似，系统中有一个主机负责绘制图表、监控事件，并根据代理提供的数据发出警报，每个代理代表一个主机或服务。Munin
    代理被称为节点，安装 Munin 通常会在同一主机上安装 Munin 节点实例。这完全没问题，因为监控系统的主机本身也应该被监控。节点组件与不同的软件集成，以获取应当监控的指标。Munin
    的 Nginx 插件是可执行脚本，作为 Munin 节点操作的一部分运行。节点进程将这些（以及所有其他）插件的数据报告给 Munin 主机，后者提供管理员使用的接口。
- en: 'After successful installation of Munin, you will find all standard plugins
    in `/usr/share/munin/plugins` or some other directory depending on your distribution.
    There are two standard Nginx plugins in Munin 2.0.25—`nginx_requests` and `nginx_status`.
    Both of those plugins parse the output of the `http_stub_status` Nginx module
    and thus require the `url` environment variable to point to the `stub_status`
    output URL with a sane default of `http://localhost/nginx_status`. To switch the
    plugins on, you need to link them into `/etc/munin` with a command such as:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功安装Munin后，你会在`/usr/share/munin/plugins`或根据你的发行版可能存在的其他目录中找到所有标准插件。在Munin 2.0.25中，有两个标准的Nginx插件——`nginx_requests`和`nginx_status`。这两个插件解析`http_stub_status`
    Nginx模块的输出，因此需要将`url`环境变量指向`stub_status`输出URL，默认值为`http://localhost/nginx_status`。要启用这些插件，你需要使用以下命令将它们链接到`/etc/munin`：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You may also examine the `contrib` Nginx plugins available at [https://github.com/munin-monitoring/contrib/tree/master/plugins/nginx](https://github.com/munin-monitoring/contrib/tree/master/plugins/nginx).
    These are not installed by default, but are still part of the Munin source tree.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以查看`contrib` Nginx插件，访问链接：[https://github.com/munin-monitoring/contrib/tree/master/plugins/nginx](https://github.com/munin-monitoring/contrib/tree/master/plugins/nginx)。这些插件默认未安装，但它们仍然是Munin源代码树的一部分。
- en: 'After restarting the Munin node running on the host, the metrics reported by
    Nginx are immediately available for this particular host. To check whether the
    plugins can successfully access Nginx and parse its `stub_status`, you can use
    these convenient commands:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在重新启动运行Munin节点的主机后，Nginx报告的指标会立即可用。要检查插件是否能够成功访问Nginx并解析其`stub_status`，你可以使用以下方便的命令：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Given that your Munin master and nodes are running, you will start to get updated
    graphs for Nginx metrics at once. A clean Munin without any past data will show
    something like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的Munin主节点和节点正在运行，你将立刻看到Nginx指标的更新图表。一个没有任何历史数据的清洁Munin将显示如下内容：
- en: '![Monitoring Nginx with Munin](img/B04329_06_04.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![使用Munin监控Nginx](img/B04329_06_04.jpg)'
- en: Adding more hosts to the Munin master is completely transparent, provided that
    those hosts run the node with Nginx plugins. All of the reported metrics will
    show up instantly and will get drawn and checked against limits, which also brings
    us to the next topic.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 向Munin主节点添加更多主机是完全透明的，只要这些主机运行带有Nginx插件的节点。所有报告的指标将立即显示，并与限制值进行比较，这也引出了下一个主题。
- en: Configuring alerts
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置警报
- en: Although monitoring itself is a very broad term and as a job may include a lot
    of activities, there are basically two sides to what a web service monitoring
    constitutes. Graphing values from sensors is important as a tool to make strategic
    decisions based on visually apparent trends and also a post factum investigation
    and sometimes even as a forensics tool. The other side is alerting, which allows
    administrators to react to incidents as quickly as possible, preventing business
    consequences. All major monitoring solutions include alerting subsystems and even
    the toy monitoring script that we built earlier in this chapter is basically a
    simple alerter.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管监控本身是一个非常广泛的术语，并且作为一项工作可能涉及许多活动，但从本质上讲，Web服务监控包括两个方面。从传感器获取图形数据是非常重要的，它可以作为一个工具，帮助根据明显的趋势做出战略决策，同时也能用于事后调查，有时甚至作为取证工具。另一个方面是报警，它可以帮助管理员尽快对事件作出反应，从而防止对业务产生影响。所有主要的监控解决方案都包括报警子系统，甚至我们在本章早些时候构建的简单监控脚本，也基本上是一个简单的报警工具。
- en: 'The `http_stub_status` module provides scarce information, but it can still
    be used to quickly react to incidents. These are some good values that can be
    used to detect unusual conditions requiring immediate attention:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`http_stub_status`模块提供的信息有限，但它仍然可以用来快速应对事件。这些是一些可以用来检测需要立即关注的异常情况的良好值：'
- en: The incoming request rate is a global indicator of the load to your website.
    Sudden spikes indicate a surge in popularity, which might be dangerous or a **Denial
    of Service** (**DoS**) attack, which is always dangerous. A sudden dip may mean
    a failure, even a total meltdown.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传入请求率是衡量网站负载的全球性指标。突如其来的激增表示流行度飙升，这可能是危险的，或者是**拒绝服务**（**DoS**）攻击，这种攻击始终是危险的。突然的下降可能意味着故障，甚至是完全崩溃。
- en: A high number of dropped connections may indicate that the configuration is
    not up to the load. Nginx does not drop connections unless it has to due to either
    resource shortage or, which happens more often, meeting resource limits.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高数量的丢失连接可能表示配置无法承受负载。除非由于资源不足或者更常见的情况——达到了资源限制，Nginx 不会丢弃连接。
- en: The number of active (including waiting) connections may sometimes mean an attempt
    to drain your connection limits by a malicious actor. This is exactly what Nginx
    usually manages to defend itself against without any external help, but it is
    still important to monitor and investigate these events.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活跃的（包括等待中的）连接数量有时可能意味着恶意攻击者尝试耗尽你的连接限制。这正是 Nginx 通常能够自我防御的内容，无需外部帮助，但监控并调查这些事件仍然很重要。
- en: 'You can use any number of complex alert conditions using these three and also
    invent more metrics relevant to your particular business. The method to create
    such alerts is specific to the monitoring system you decided to choose. These
    are the example alerts we use inside ServerDensity:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这三种复杂的警报条件，并根据你的特定业务需求发明更多相关的度量指标。创建此类警报的方法取决于你选择的监控系统。这些是我们在 ServerDensity
    中使用的示例警报：
- en: '![Configuring alerts](img/B04329_06_05.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![配置警报](img/B04329_06_05.jpg)'
- en: Munin uses a simple system of two-level thresholds attached to plugins as a
    way to generate alerts. There are "warning" and "critical" thresholds, and once
    the actual value reaches one of the thresholds, Munin will generate an alert and
    send a notification. The system allows default thresholds for all hosts, which
    may be practical.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Munin 使用一个简单的两级阈值系统，附加到插件上作为生成警报的方式。系统包含“警告”和“严重”阈值，一旦实际值达到其中一个阈值，Munin 就会生成警报并发送通知。该系统允许为所有主机设置默认阈值，这可能非常实用。
- en: 'The more popular way is to set up thresholds for all hosts individually. It
    is done right in the Munin master configuration file, which is called `munin.conf`.
    This file contains a list of all hosts that are under monitoring by this very
    master. Adding a threshold for a metric available on a host is as simple as this:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更常见的做法是为所有主机单独设置阈值。这是通过 Munin 主配置文件 `munin.conf` 来完成的。该文件包含所有由此主机监控的主机列表。为主机上的度量指标添加阈值就像这样简单：
- en: '[PRE11]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The values are specified as ranges; that is, in the earlier case, the warning
    would be generated only when the `nginx.status.total` metrics (which is the total
    number of current connections) will leave the range from 0 to 10.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些值是以范围的形式指定的；也就是说，在前面的例子中，只有当`nginx.status.total`度量值（即当前连接的总数）离开0到10的范围时，才会生成警报。
- en: Munin is able to send notifications about the alerts via e-mail, via syslog,
    via piping to external programs, or via Nagios, which is another popular monitoring
    system with a more sophisticated alerting subsystem. Configuration of the notification
    settings is easy enough. See the online Munin guide at [http://guide.munin-monitoring.org/en/latest/tutorial/alert.html](http://guide.munin-monitoring.org/en/latest/tutorial/alert.html).
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Munin 能通过电子邮件、syslog、管道传输到外部程序，或者通过 Nagios（另一种流行的监控系统，拥有更复杂的警报子系统）发送关于警报的通知。通知设置的配置足够简单。请参见在线
    Munin 指南：[http://guide.munin-monitoring.org/en/latest/tutorial/alert.html](http://guide.munin-monitoring.org/en/latest/tutorial/alert.html)。
- en: All of the interesting metrics may be measured right on the front between Nginx
    and its clients and also on each external link that Nginx has due to upstream
    configuration. Unfortunately, the open source Nginx does not contain any means
    to expose those metrics from the upstream links to monitor and set up alerts on.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有有趣的度量指标可以在 Nginx 与客户端之间的前端以及 Nginx 由于上游配置而与每个外部链接之间进行测量。不幸的是，开源的 Nginx 没有提供任何暴露来自上游链接的度量指标来进行监控和设置警报的功能。
- en: Getting more status data from Nginx
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取更多 Nginx 状态数据
- en: In this section, we will explore the ways to get more information about an Nginx
    instance so that the monitoring can be more extensive and cover more details.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何获取更多有关 Nginx 实例的信息，以便监控可以更广泛，并涵盖更多的细节。
- en: In 2014, Nginx creators launched a commercial umbrella company for the open
    source Nginx software, which started to explore the business models around the
    server. One of the most anticipated features was comprehensive monitoring and
    the developers delivered on that front.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在2014年，Nginx 的创始人推出了一个商业母公司，旨在支持开源的 Nginx 软件，并开始探索与服务器相关的商业模式。最受期待的功能之一是全面的监控，开发人员在这一方面做出了贡献。
- en: The commercial product of Nginx company is named Nginx Plus. It is a subscription
    service marketed to medium and large businesses already dependent on Nginx for
    their infrastructure. Nginx Plus pricing is based on yearly licenses per single
    instance and is rather aggressive, which also means that once you need these features,
    you already have several instances and need several licenses. For complete and
    up-to-date information, refer to the Nginx Plus web page at [https://www.nginx.com/products/](https://www.nginx.com/products/).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx公司的商业产品被命名为Nginx Plus。它是一种订阅服务，面向已经依赖Nginx作为基础设施的中大型企业。Nginx Plus的定价基于每个实例的年度许可证，并且价格相当激进，这也意味着一旦你需要这些功能，你已经有了多个实例并需要多个许可证。有关完整且最新的信息，请参考Nginx
    Plus的网页 [https://www.nginx.com/products/](https://www.nginx.com/products/)。
- en: One of the most important part of the subscription is the availability of the
    new status module, which is named `ngx_http_status`, and is a kind of elder brother
    for the open source `ngx_http_stub_status` that most of the monitoring solutions
    we described depend on.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 订阅服务最重要的部分之一是新状态模块的可用性，它被命名为`ngx_http_status`，是开源的`ngx_http_stub_status`模块的“哥哥”，许多我们描述的监控解决方案都依赖于它。
- en: Along with programmatic access to the status data in machine-readable form,
    Nginx Plus provides a beautiful and expressive dashboard that you can use without
    any integration into your enterprise monitoring. The [https://www.nginx.com](https://www.nginx.com)
    team kindly provides a demonstration of what the dashboard can do at [http://demo.nginx.com/status.html](http://demo.nginx.com/status.html).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 除了程序化访问机器可读形式的状态数据外，Nginx Plus还提供了一个美观且富有表现力的仪表盘，你可以在不进行任何集成的情况下使用它来监控。Nginx团队在[https://www.nginx.com](https://www.nginx.com)上亲切地提供了仪表盘的演示，展示了它可以做什么，访问链接为[http://demo.nginx.com/status.html](http://demo.nginx.com/status.html)。
- en: '![Getting more status data from Nginx](img/B04329_06_06.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![从Nginx获取更多状态数据](img/B04329_06_06.jpg)'
- en: 'The configuration for the `ngx_http_status` module looks like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`ngx_http_status`模块的配置如下所示：'
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, it is an almost exact copy of what we did earlier for `stub_status`,
    but the main directive is now more aptly named `status`. This location will accept
    a number of different requests. It provides a hierarchy of information about different
    objects, such as upstreams and cache zones.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，这几乎是我们之前为`stub_status`所做操作的完整复制，但现在的主要指令被更恰当地命名为`status`。这个位置将接受多种不同的请求。它提供了关于不同对象的信息层次结构，如上游服务器和缓存区域。
- en: 'The built-in dashboard is actually a one-page HTML application that retrieves
    all the information it needs from `/status`. The static HTML will be installed
    with the Nginx Plus distribution. On Debian-based systems, you can find it at
    `/usr/share/nginx/html/status.html`. To add the dashboard to your Nginx Plus instance,
    see this configuration example:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的仪表盘实际上是一个单页HTML应用程序，它从`/status`获取所需的所有信息。静态HTML文件会随着Nginx Plus的发行版一起安装。在基于Debian的系统上，你可以在`/usr/share/nginx/html/status.html`找到它。要将仪表盘添加到你的Nginx
    Plus实例中，请参考以下配置示例：
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Having your own Nginx dashboard is never enough because if you invested into
    Nginx Plus subscription you probably have some business-critical operations and
    you need automatic monitoring. At the same time, the dashboard is the perfect
    way to explore the information that is exported by Nginx Plus. The `ngx_http_status`
    module provides wealth of information in machine-readable format (JSON or JSONP)
    to integrate with all the systems we mentioned earlier. And using the new metrics
    available, you will be able to monitor more. Let''s dig deeper into what `ngx_http_status`
    returns by default:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有自己的Nginx仪表盘永远不够，因为如果你投资了Nginx Plus订阅，你可能已经有了一些对业务至关重要的操作，并且需要自动化监控。同时，仪表盘是探索Nginx
    Plus导出信息的完美方式。`ngx_http_status`模块以机器可读的格式（JSON或JSONP）提供大量信息，方便与我们之前提到的所有系统集成。利用新的可用指标，你将能够进行更多的监控。让我们深入探讨`ngx_http_status`默认返回的内容：
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As you can see, the default output format for this module is JSON, which allows
    much more complex data structures. The same data re-indented for readability looks
    like this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，这个模块的默认输出格式是JSON，它允许更加复杂的数据结构。为便于阅读，相同的数据重新缩进后如下所示：
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'On the upper level of the return JSON object, we see these items:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在返回的JSON对象的上层，我们看到了这些项目：
- en: '| `version` | This is the version of the format of these data. It is important
    for parsers because some of the items only appeared starting from a specific version,
    and you may require Nginx upgrade to get enough information for your parser. As
    of December 2015, the last version of this is 6. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `version` | 这是这些数据格式的版本。对于解析器非常重要，因为某些项目只有在特定版本之后才会出现，可能需要升级 Nginx 才能为解析器提供足够的信息。到
    2015 年 12 月为止，最后一个版本是 6。 |'
- en: '| `nginx_version` | This is the version of Nginx software. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `nginx_version` | 这是 Nginx 软件的版本。 |'
- en: '| `address` | This is the IP address of the server generating the status report.
    |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `address` | 这是生成状态报告的服务器的 IP 地址。 |'
- en: '| `generation` | This gets incremented by one each time you reload Nginx configuration.
    So in a sense, this is the number of the current configuration generation. One
    may wonder why the generation number is important. One of the reasons is that
    it may not be practical to compare some indicators, for example, performance if
    the generation and therefore the configuration has changed. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `generation` | 每次重新加载 Nginx 配置时，此值会增加 1。所以在某种意义上，这是当前配置版本的编号。有人可能会问为什么配置代号很重要。原因之一是，如果代号或配置已更改，可能不适合比较某些指标，例如性能。
    |'
- en: '| `load_timestamp` | The Unix epoch timestamp of the last configuration reload.
    |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `load_timestamp` | 上次配置重载的 Unix 时间戳。 |'
- en: '| `timestamp` | Current UNIX timestamp. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `timestamp` | 当前的 UNIX 时间戳。 |'
- en: '| `pid` | The process identifier of the worker that processed this specific
    status request. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `pid` | 处理此特定状态请求的工作进程的进程标识符。 |'
- en: '| `processes` | This is an object with a single field (it may be extended in
    future versions of the response structure), which is named `respawned`, and contains
    the number of all child processes that we restarted after a failure. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `processes` | 这是一个包含单一字段的对象（未来版本的响应结构可能会扩展），该字段名为 `respawned`，表示我们在故障后重启的所有子进程的数量。
    |'
- en: '| `connections` | This is an important object containing the information that
    we otherwise can obtain via the open source `ngx_http_stub_status` module. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `connections` | 这是一个重要的对象，包含我们通过开源的 `ngx_http_stub_status` 模块可以获取的信息。 |'
- en: '| `connections.accepted` | This value inside the `connections` object is the
    total number of all accepted client connections. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `connections.accepted` | `connections` 对象中的这个值表示所有已接受的客户端连接的总数。 |'
- en: '| `connections.dropped` | This is the total number of dropped connections.
    Note that with `http_stub_status` module, we have to calculate this value ourselves.
    |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `connections.dropped` | 这是掉线连接的总数。请注意，在 `http_stub_status` 模块中，我们需要自行计算此值。
    |'
- en: '| `connections.active` | The number of currently active connections. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `connections.active` | 当前活动连接的数量。 |'
- en: '| `connections.idle` | The number of connections that are idling. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `connections.idle` | 空闲连接的数量。 |'
- en: '| `ssl` | This is also an object with several values inside. Those are SSL
    (actually, TLS) counters. SSL is an older version of the protocol for encrypted
    connections. The proper name for the current protocol is TLS, but the old name
    is still used by some conservative specialists. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `ssl` | 这也是一个包含多个值的对象，这些值是 SSL（实际上是 TLS）计数器。SSL 是加密连接协议的旧版本。当前协议的正确名称是 TLS，但一些保守派专家仍然使用旧名称。
    |'
- en: '| `ssl.handshakes` | The total number of TLS handshakes. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `ssl.handshakes` | TLS 握手的总次数。 |'
- en: '| `ssl.handshakes_failed` | The total number of unsuccessful TLS handshakes.
    This is a very interesting and important value that is not available via `http_stub_status`
    while being rather critical to monitor. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `ssl.handshakes_failed` | TLS 握手失败的总次数。这是一个非常有趣且重要的值，通过 `http_stub_status`
    无法获取，但对监控来说相当关键。 |'
- en: '| `ssl.session_reuses` | Each TLS handshake is an expensive operation, and
    there is an optimization that reuses one of the previously established TLS sessions
    to avoid the handshake altogether. A low number here means an opportunity to increase
    performance with little investment. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `ssl.session_reuses` | 每次 TLS 握手都是一个开销较大的操作，优化方式是重用先前建立的 TLS 会话，从而完全避免重新握手。这里的低数字意味着可以通过少量投入来提高性能。
    |'
- en: '| `requests` | An object with two values. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `requests` | 一个包含两个值的对象。 |'
- en: '| `requests.total` | This is the same number that is printed last on the third
    line of the `http_stub_status` output. The global counter for all client requests
    received via all connections. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `requests.total` | 这是在 `http_stub_status` 输出的第三行最后显示的数字。所有客户端请求的全局计数器，表示通过所有连接接收的客户端请求总数。
    |'
- en: '| `requests.current` | The number of currently processed requests. |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `requests.current` | 当前正在处理的请求数量。 |'
- en: '| `upstreams` | If there is one important feature of Nginx Plus that you want
    to name to justify the purchase, it should probably be the upstreams object in
    the `http_status` output. It allows the metrics of the individual upstreams and
    hosts inside upstreams to be monitored.The example host mentioned earlier does
    not have any upstreams configured, and this is why the object is empty. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `upstreams` | 如果有一个 Nginx Plus 的重要功能，你可能想提及以证明购买的理由，那应该是 `http_status` 输出中的
    upstreams 对象。它允许监控单个上游和上游内主机的度量数据。前面提到的示例主机没有配置任何上游，因此该对象为空。 |'
- en: '| `caches` | This object contains the status of all configured caches. Most
    of the cache configuration is done with the upstream directives. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `caches` | 该对象包含所有配置缓存的状态。大多数缓存配置通过上游指令完成。 |'
- en: '| `server_zones` | This object is a custom storage that you can fill with data
    using the `status_zone` directive inside one of your server blocks. Status zones
    are a new concept in Nginx Plus. They provide an additional level of flexibility
    in collecting status data. You can find comprehensive documentation on this directive
    at [http://nginx.org/en/docs/http/ngx_http_status_module.html#status_zone](http://nginx.org/en/docs/http/ngx_http_status_module.html#status_zone).
    |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `server_zones` | 该对象是一个自定义存储，你可以使用 `status_zone` 指令在某个服务器区块内填充数据。状态区域是 Nginx
    Plus 中的新概念。它们提供了收集状态数据的额外灵活性。你可以在 [http://nginx.org/en/docs/http/ngx_http_status_module.html#status_zone](http://nginx.org/en/docs/http/ngx_http_status_module.html#status_zone)
    查找该指令的详细文档。 |'
- en: 'Each of the server zones contains a separate multilevel object with the status
    information collected from all servers connected to the same status zone. That
    object looks like this:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 每个服务器区域包含一个独立的多层对象，该对象收集了所有连接到相同状态区域的服务器的状态信息。该对象如下所示：
- en: '| `processing` | The snapshot number of currently processed requests. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `processing` | 当前正在处理的请求的快照数量。 |'
- en: '| `requests` | The total counter of all requests. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `requests` | 所有请求的总计数。 |'
- en: '| `responses.total` | The number of responses sent to clients. Should be close
    to the number of requests. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `responses.total` | 发送给客户端的响应数量。应接近请求的数量。 |'
- en: '| `1xx` | The number of responses with HTTP 1xx status codes. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `1xx` | HTTP 1xx响应的数量。 |'
- en: '| `2xx` | The number of responses with HTTP 2xx status codes. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `2xx` | HTTP 2xx响应的数量。 |'
- en: '| `3xx` | The number of responses with HTTP 3xx (usually redirects) status
    codes. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `3xx` | HTTP 3xx响应的数量（通常是重定向）。 |'
- en: '| `4xx` | The number of responses with HTTP 4xx (usually indicating bad requests
    that should be fixed on the client side) status codes. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `4xx` | HTTP 4xx响应的数量（通常表示请求错误，应该在客户端修复）。 |'
- en: '| `5xx` | The number of responses with HTTP 5xx (meaning internal server errors)
    status codes. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `5xx` | HTTP 5xx响应的数量（表示内部服务器错误）。 |'
- en: '| `discarded` | The number of requests that did not generate responses. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `discarded` | 没有生成响应的请求数量。 |'
- en: '| `received` | Total bytes received from clients. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `received` | 从客户端接收的总字节数。 |'
- en: '| `sent` | Total bytes sent to clients. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `sent` | 发送给客户端的总字节数。 |'
- en: Using Nginx Plus alternatives
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Nginx Plus 替代方案
- en: The Nginx Plus commercial subscription gives you more than just the `ngx_http_status`
    module. If you do not need the other perks of the Plus version but crave more
    metrics, you could explore some of the freely available alternatives.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx Plus 商业订阅不仅仅提供`ngx_http_status`模块。如果你不需要 Plus 版本的其他附加功能，但渴望更多的度量数据，你可以探索一些免费提供的替代方案。
- en: nginx-module-vts
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: nginx-module-vts
- en: One way to get more information from inside Nginx is this open source module
    published on GitHub at [https://github.com/vozlt/nginx-module-vts](https://github.com/vozlt/nginx-module-vts).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 获取更多来自 Nginx 内部信息的一种方式是这个开源模块，该模块在 GitHub 上发布，网址是 [https://github.com/vozlt/nginx-module-vts](https://github.com/vozlt/nginx-module-vts)。
- en: The author was clearly inspired by the official `ngx_http_status` features and
    even used the same structures and dashboard client-side code (although the older
    version). This may be actually a good thing because you can start integrating
    `nginx-module-vts` and then transfer all the scripts with minimal modifications
    to Nginx Plus once you are ready for the subscription. The documentation is wonderful,
    and there are many examples. Some of the keys in the JSON objects that are returned
    by this module differ from the official `ngx_http_status` keys, and because of
    this, we would recommend abstracting the actual key names in your monitoring configuration
    files.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 作者显然受到了官方`ngx_http_status`功能的启发，甚至使用了相同的结构和客户端仪表板代码（尽管是较旧的版本）。这实际上可能是件好事，因为你可以先开始集成`nginx-module-vts`，然后在准备好订阅时将所有脚本通过最小修改迁移到Nginx
    Plus。文档非常出色，并且有很多示例。该模块返回的JSON对象中的某些键与官方`ngx_http_status`的键不同，因此我们建议在监控配置文件中抽象出实际的键名。
- en: Luameter
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Luameter
- en: Another alternative to the great official `ngx_http_status` is the Luameter
    package, which is a collection of scripts in the Lua programming language that
    integrates with Nginx using the `ngx_http_lua` module. The format of the data
    collected and exported by Lua is also clearly inspired by the official and pricey
    alternative, so you will be able to switch with little effort.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个替代官方`ngx_http_status`的优秀选择是Luameter包，它是一个用Lua编写的脚本集合，集成了Nginx，并使用`ngx_http_lua`模块。Lua收集和导出的数据格式显然也受到了官方昂贵替代品的启发，因此你将能够轻松切换。
- en: The idea of the very useful `ngx_http_lua` module is to let Nginx administrators
    hook snippets of custom Lua code into different phases of request processing.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 非常有用的`ngx_http_lua`模块的理念是让Nginx管理员在请求处理的不同阶段插入自定义的Lua代码片段。
- en: Luameter is distributed on a pay-as-you-go model, so it is not free. The lowest
    price is just 10 US dollars, so it is very cheap in comparison with what the commercial
    arm of Nginx sells. Refer to [https://luameter.com/](https://luameter.com/) for
    all the information about Luameter.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Luameter采用按需付费模式分发，因此并不是免费的。最低价格仅为10美元，相比Nginx商业版的售价，它非常便宜。有关Luameter的所有信息，请参考[https://luameter.com/](https://luameter.com/)。
- en: nginx-lua-stats
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: nginx-lua-stats
- en: This is another collection of scripts in Lua. It may be used by itself to collect
    and export online statistics about the number of generated HTTP responses with
    various HTTP status codes, but it is even more valuable as an example of using
    Lua hooks to collect additional data and report it.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一组用Lua编写的脚本。它可以单独使用，收集并导出有关生成的HTTP响应及其各种HTTP状态码的在线统计数据，但作为一个使用Lua钩子收集额外数据并报告数据的示例，它的价值更大。
- en: The code is published on GitHub at [https://github.com/yandex-sysmon/nginx-lua-stats](https://github.com/yandex-sysmon/nginx-lua-stats).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 代码已发布在GitHub上，地址是[https://github.com/yandex-sysmon/nginx-lua-stats](https://github.com/yandex-sysmon/nginx-lua-stats)。
- en: '`nginx-lua-stats` works its magic by setting up a hook on the logging phase,
    which collects the data, and then setting up another hook on the content generation
    phase for a particular location which is able to actually generate a full HTTP
    response with the collected statistics.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`nginx-lua-stats`通过在日志记录阶段设置钩子来发挥作用，该钩子收集数据，然后在特定位置的内容生成阶段设置另一个钩子，能够实际生成包含收集的统计数据的完整HTTP响应。'
- en: 'Here is the relevant part of the `nginx.conf` file:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`nginx.conf`文件的相关部分：
- en: '[PRE16]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The requests to the /stat location will return the collected data. The second
    location block installs an additional log handler which is actually a counting
    hook. The effect is that all requests for the documents under /html hierarchy
    will invoke the collect_stats.lua script as part of the logging phase.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 对`/stat`位置的请求将返回收集的数据。第二个位置块安装了一个额外的日志处理程序，实际上是一个计数钩子。其效果是，所有对`/html`目录下文档的请求将在日志记录阶段触发`collect_stats.lua`脚本。
- en: The upsteam_check module in tengine
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: tengine中的upsteam_check模块
- en: One of the many advantages of open source development models is the possibility
    of forks, which are separate versions of the main software with changes that are
    not accepted by the original author. Sometimes, forks become very successful in
    their own right and even supersede the original versions. One of the biggest Chinese
    websites Taobao has its own Nginx fork, which is named tengine. There are a number
    of big websites beside Taobao that prefer tengine to the original Nginx. Tengine
    has some rather advanced features for upstream management and monitoring.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 开源开发模型的众多优点之一是能够进行分叉（fork），即主软件的独立版本，这些版本包含原作者未接受的更改。有时，分叉会非常成功，甚至超越原版本。中国最大的网站之一——淘宝网有自己的Nginx分叉，名为tengine。除了淘宝，许多大型网站也更倾向于使用tengine而非原始的Nginx。Tengine具有一些非常先进的上游管理和监控功能。
- en: The `upstream_check` module allows us to specify some custom health checks for
    all the hosts in an upstream group. That is an interesting functionality by itself,
    but it is the secondary feature that got the module in this chapter. The directive
    `check_status` inside a location is a content generator such as the `status` and
    `stub_status` of the official modules that we discussed at length in this chapter.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`upstream_check`模块允许我们为上游组中的所有主机指定一些自定义健康检查。这本身就是一个有趣的功能，但正是其次要特性使得该模块被提到在本章中。在一个位置内的指令`check_status`是一个内容生成器，例如我们在本章详细讨论过的官方模块中的`status`和`stub_status`。'
- en: This directive provides a report on the health of different hosts in an upstream
    group in either human-readable HTML or machine-readable JSON or even CSV format.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 该指令提供了以人类可读的HTML、机器可读的JSON或甚至CSV格式报告上游组中不同主机的健康状况。
- en: See the examples of configuration and output at [http://tengine.taobao.org/document_cn/http_upstream_check_cn.html](http://tengine.taobao.org/document_cn/http_upstream_check_cn.html).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见配置和输出的示例：[http://tengine.taobao.org/document_cn/http_upstream_check_cn.html](http://tengine.taobao.org/document_cn/http_upstream_check_cn.html)。
- en: The requests/sec patch by Catap
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Catap的requests/sec补丁
- en: There is a patch for a very old Nginx version that adds one very interesting
    metric to the `ngx_http_stub_status` output. The metric is the requests rate that
    otherwise may be only approximately calculated using saved past state from the
    main total requests counter.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个针对非常老旧Nginx版本的补丁，它向`ngx_http_stub_status`输出添加了一个非常有趣的指标。这个指标是请求速率，否则只能通过从主总请求计数器中保存的过去状态来大致计算。
- en: The patch is available at [http://catap.ru/patches/nginx/request_per_seconds.dpatch](http://catap.ru/patches/nginx/request_per_seconds.dpatch).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 补丁可在[http://catap.ru/patches/nginx/request_per_seconds.dpatch](http://catap.ru/patches/nginx/request_per_seconds.dpatch)下载。
- en: Unfortunately, it does not apply cleanly to modern Nginx source, so you will
    have to do some manual conflict resolution.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，它不能干净地应用于现代的Nginx源码，因此你需要进行一些手动的冲突解决。
- en: The Ustats module
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ustats模块
- en: There is also another piece of rather old code that may or may not be brought
    up to date with modern Nginx. It is called Ustats, and it is officially put into
    the "abandonware" category. Such projects may provide a starting point for some
    in-house development efforts. See [https://github.com/0xc0dec/ustats](https://github.com/0xc0dec/ustats)
    for the code and [https://code.google.com/p/ustats/](https://code.google.com/p/ustats/)
    for some documentation.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一段相当古老的代码，可能已经过时，也可能未被更新以适应现代的Nginx。它叫做Ustats，官方将其归类为“废弃软件”。这样的项目可能为某些内部开发提供起点。查看[https://github.com/0xc0dec/ustats](https://github.com/0xc0dec/ustats)获取代码，查看[https://code.google.com/p/ustats/](https://code.google.com/p/ustats/)获取一些文档。
- en: Summary
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we delved deep into the details of different ways to monitor
    a working Nginx instance. There is a very useful command-line log parsing utility
    ngxtop as well as two real-time statistics interfaces, which are available in
    open source and commercial versions of Nginx, respectively. We went over all the
    data items that these interfaces expose and discussed the integration options
    with many monitoring systems available on the market.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了监控一个运行中的Nginx实例的不同方式。介绍了一个非常有用的命令行日志解析工具ngxtop，以及两个实时统计接口，这些接口在开源版和商业版Nginx中都有提供。我们详细讨论了这些接口暴露的所有数据项，并讨论了与市场上许多监控系统的集成选项。
- en: The next chapter will conclude the whole book by giving future directions for
    the reader. It may even seem to contain some career advice. There is also an appendix
    providing a reference into all the different errors and warnings that you may
    encounter in your work with Nginx.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将通过为读者提供未来的方向来结束整本书。它甚至可能看起来包含一些职业建议。还有一个附录，提供了所有你在使用 Nginx 时可能遇到的不同错误和警告的参考。
