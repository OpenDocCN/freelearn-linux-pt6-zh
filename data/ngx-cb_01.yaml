- en: Let&#x27;s Get Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始吧
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: A quick installation guide
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速安装指南
- en: Configuring NGINX
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置NGINX
- en: Stopping/starting NGINX
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 停止/启动NGINX
- en: Enabling modules
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用模块
- en: Deploying a basic website
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署基础网站
- en: Basic monitoring
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本监控
- en: Real-time statistics
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时统计
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: NGINX is a powerful software suite which has progressed well beyond a basic
    web server package. Some of the additional features, such as the reverse proxy
    and load balancing options, are well known.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: NGINX是一个强大的软件套件，已经远远超出了基础Web服务器包的范畴。它的一些附加功能，如反向代理和负载均衡选项，广为人知。
- en: Originally designed to tackle the C10k problem of handling 10,000 concurrent
    connections, NGINX differentiated itself from Apache with an event-driven architecture.
    While Apache 2.4 added event-driven processing also, there are a number of distinct
    differences where NGINX still remains more flexible.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: NGINX最初是为了解决C10k问题（处理10,000个并发连接）而设计的，通过事件驱动架构与Apache区分开来。虽然Apache 2.4也增加了事件驱动处理，但NGINX仍在许多方面更具灵活性。
- en: This book describes how to use NGINX in a number of different scenarios and
    is aimed at providing you with a working solution rather than being an in-depth
    review of all NGINX features. If you're unfamiliar with NGINX, I highly recommend
    that you read *Nginx HTTP Server - Third Edition*, by Clément Nedelcu, also published
    by *Packt Publishing*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本书描述了如何在多种不同场景中使用NGINX，旨在为你提供一个可操作的解决方案，而不是对所有NGINX功能的深入评审。如果你对NGINX不熟悉，我强烈推荐你阅读Clément
    Nedelcu的*《Nginx HTTP服务器 第三版》*，该书由*Packt Publishing*出版。
- en: 'You can also read the official documentation here:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在这里阅读官方文档：
- en: '[http://nginx.org/en/docs/](http://nginx.org/en/docs/)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://nginx.org/en/docs/](http://nginx.org/en/docs/)'
- en: A quick installation guide
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速安装指南
- en: Since the mainline release (currently 1.11.19) has all of the latest features,
    you'll need to install it directly from the NGINX repositories. Thankfully, NGINX
    is kind enough to provide **Red Hat Enterprise Linux** (**RHEL**), CentOS, **SUSE
    Linux Enterprise Server** (**SLES**), Debian, and Ubuntu repositories, as well
    as OS X and Windows binaries.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于主线版本（当前版本为1.11.19）包含了所有最新功能，因此你需要直接从NGINX仓库安装它。幸运的是，NGINX为**Red Hat Enterprise
    Linux**（**RHEL**）、CentOS、**SUSE Linux Enterprise Server**（**SLES**）、Debian和Ubuntu提供了仓库，并且还提供了OS
    X和Windows的二进制文件。
- en: '![](img/f99866ea-a822-446f-9480-46feb342466a.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f99866ea-a822-446f-9480-46feb342466a.png)'
- en: Mainline versus stable
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 主线与稳定版
- en: '(source: [https://nginx-com-uploads.s3.amazonaws.com/wp-content/uploads/2016/04/NGINX-1.11-mainline-1.10-stable.png](https://nginx-com-uploads.s3.amazonaws.com/wp-content/uploads/2016/04/NGINX-1.11-mainline-1.10-stable.png))'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: （来源：[https://nginx-com-uploads.s3.amazonaws.com/wp-content/uploads/2016/04/NGINX-1.11-mainline-1.10-stable.png](https://nginx-com-uploads.s3.amazonaws.com/wp-content/uploads/2016/04/NGINX-1.11-mainline-1.10-stable.png)）
- en: The stable and mainline branches don't necessarily reflect system stability,
    but configuration and module integration stability. Unless you have third-party
    integration which requires the stable release, we highly recommend the mainline
    release.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 稳定版和主线版并不一定反映系统稳定性，而是配置和模块集成的稳定性。除非你有需要稳定版的第三方集成，否则我们强烈推荐使用主线版。
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Different Linux distributions have varying package managers, so we'll briefly
    cover the installation procedures for the more commonly used ones. If the distribution
    you use isn't covered here, refer to the official NGINX documentation for further
    guidance.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的Linux发行版使用不同的包管理器，因此我们将简要介绍常用发行版的安装过程。如果你使用的发行版没有在这里提到，请参考官方NGINX文档获取更多指导。
- en: Packages – RHEL/CentOS
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包 – RHEL/CentOS
- en: 'To install the latest NGINX release, add the NGINX mainline repository by adding
    the following to `/etc/yum.repos.d/nginx.repo`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装最新的NGINX版本，请通过将以下内容添加到`/etc/yum.repos.d/nginx.repo`中来添加NGINX主线仓库：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You'll also need to replace `OS` with either `rhel` or `centos`, and replace
    `OSRELEASE` with `5`, `6`, or `7`, for your correct release.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要将`OS`替换为`rhel`或`centos`，并将`OSRELEASE`替换为`5`、`6`或`7`，以匹配你的正确版本。
- en: You can check your version by running `cat /etc/redhat-release`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行`cat /etc/redhat-release`来检查你的版本。
- en: Once you have the repository installed, refresh the packages and then install
    NGINX.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完仓库后，刷新包并安装NGINX。
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you have any issues, double check your repository for the correct syntax.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到任何问题，请仔细检查仓库中的语法是否正确。
- en: For further information, refer to the official documentation at [http://nginx.org/en/linux_packages.html#mainline](http://nginx.org/en/linux_packages.html#mainline).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅官方文档 [http://nginx.org/en/linux_packages.html#mainline](http://nginx.org/en/linux_packages.html#mainline)。
- en: Packages – Debian/Ubuntu
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件包 – Debian/Ubuntu
- en: 'First, download the NGINX signing key for the packages and install it:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，下载 NGINX 的签名密钥并安装：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, using your preferred Linux editor, we can add the sources to `/etc/apt/sources.list.d/nginx.list`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用你喜欢的 Linux 编辑器，将源添加到 `/etc/apt/sources.list.d/nginx.list`：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Replace `codename` with the release name; for example, if you're using Debian
    8, this will be set to `jessie`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `codename` 替换为发行版名称；例如，如果你使用的是 Debian 8，则应设置为 `jessie`。
- en: 'For Ubuntu-based systems, you''ll need to use the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于 Ubuntu 的系统，你需要使用以下命令：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Replace `codename` with the release name; for example, if you're using Ubuntu
    14.04, this will be set to `trusty`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `codename` 替换为发行版名称；例如，如果你使用的是 Ubuntu 14.04，则应设置为 `trusty`。
- en: 'After adding the new source, we can then update the `apt` database and install
    NGINX:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 添加新的源之后，我们可以更新 `apt` 数据库并安装 NGINX：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Installation should now be complete.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 安装应该已经完成。
- en: Compiling from scratch
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从头开始编译
- en: Although having the precompiled packages is nice, not all of the modules are
    available out of the box. NGINX requires you to compile these into the NGINX installation
    and it's not a simple module like Apache.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有预编译的软件包非常方便，但并非所有模块都可以直接使用。NGINX 需要将这些模块编译进安装包，而这不像 Apache 那样简单。
- en: You can simply build from source without any of the packaging tools for CentOS
    or Debian, however, it makes upgrades and compatibility more difficult. By default,
    user compiled programs will default to `/usr/local`, which means that any documentation
    which refers to the package defaults (`/usr/etc`) will be incorrect.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以直接从源代码构建，而不需要 CentOS 或 Debian 的任何打包工具，然而，这会使得升级和兼容性变得更加困难。默认情况下，用户编译的程序会安装到
    `/usr/local`，这意味着任何引用软件包默认路径（`/usr/etc`）的文档将是错误的。
- en: My preference is to base the build on the official package sources, rather than
    the plain source code. There aren't many extra steps involved, but it makes the
    ongoing management much easier. If you're looking for vanilla build instructions
    (without packages), these are easily available on the web.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我的偏好是基于官方的软件包源进行构建，而不是直接使用源代码。虽然没有太多额外的步骤，但这样做可以使后续的管理工作变得更简单。如果你需要的是原始构建说明（不带软件包），这些信息在网上很容易找到。
- en: These examples require you to have the mainline repositories already installed.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例要求你已安装主线软件库。
- en: Debian/Ubuntu
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Debian/Ubuntu
- en: 'On Ubuntu/Debian, install the required build tools:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu/Debian 上，安装所需的构建工具：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will install quite a few packages on your system, so if you're trying to
    keep your production environment lean, then I'd recommend that you use a separate
    build box to complete this.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这将会在系统上安装相当多的软件包，因此，如果你试图保持生产环境的简洁，建议使用一个独立的构建机器来完成此操作。
- en: 'We can now install the build prerequisites for NGINX:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以安装 NGINX 的构建前置条件：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once you have the required build dependencies, we can now get a copy of the
    source code. Again, rather than the plain TAR file, we''re going to get the packaged
    variant so that we can easily build them. Here''s how we do it:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了所需的构建依赖项，我们现在可以获取源代码的副本。同样，我们不是直接使用原始 TAR 文件，而是获取打包版本，以便我们可以轻松地进行构建。以下是我们如何操作：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You should now have a directory with the original TAR file, the Debian description,
    and any Debian specific patches. The `apt-get source` command will automatically
    extract and apply patches, as required, into a source directory.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该有一个包含原始 TAR 文件、Debian 描述文件和任何 Debian 特定补丁的目录。`apt-get source` 命令会自动提取并根据需要将补丁应用到源代码目录中。
- en: 'To build without any changes, enter the directory and create the packages:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 若要在不做任何更改的情况下构建，进入目录并创建软件包：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Compiling the code may take a while, depending on how many processors your
    workstation or server has. Once it has compiled, you should see two binaries in
    the parent (`nginxbuild`) directory. The resulting files should be:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 编译代码可能需要一些时间，具体取决于你的工作站或服务器的处理器数量。一旦编译完成，你应该在父目录（`nginxbuild`）中看到两个二进制文件。生成的文件应为：
- en: '`nginx-dbg_1.9.10-1~jessie_amd64.deb`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nginx-dbg_1.9.10-1~jessie_amd64.deb`'
- en: '`nginx_1.9.10-1~jessie_amd64.deb`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nginx_1.9.10-1~jessie_amd64.deb`'
- en: 'You can now install NGINX via the newly compiled package:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以通过新编译的软件包安装 NGINX：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: CentOS/RHEL
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CentOS/RHEL
- en: 'Like the Debian build process, first we''ll need to install the package build
    tools and the additional **Extra Packages For Enterprise Linux** (**EPEL**) repository:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 与Debian构建过程类似，首先我们需要安装软件包构建工具和额外的**企业Linux额外软件包** (**EPEL**)存储库：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, update `/etc/yum.repos.d/nginx.repo` and add the additional source repository:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，更新`/etc/yum.repos.d/nginx.repo`并添加额外的源库：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this example, we'll be using a CentOS 7-based release. Refer to the *Packages
    – RHEL/CentOS* section for how to modify it for other CentOS versions.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用基于CentOS 7的发行版。请参考*软件包 - RHEL/CentOS* 部分了解如何修改其他CentOS版本。
- en: 'With the updated repository, we then create a directory for the build, and
    download the **Source RPM** (**SRPM**):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用更新后的代码库，我们创建一个用于构建的目录，并下载**源码RPM** (**SRPM**)：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, download the required packages to complete the build:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，下载所需的软件包以完成构建：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once all of the development packages have been downloaded, we can now extract
    the files from the SRPM:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦下载了所有开发软件包，现在可以从SRPM中提取文件：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note that the name of your directory may vary based on the version of NGINX
    you have installed. For instance, here it is nginx-1.9.10 as I have installed
    NGINX 1.9.10.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您的目录名称可能会根据已安装的NGINX版本而有所不同。例如，这里是nginx-1.9.10，因为我安装了NGINX 1.9.10。
- en: 'You should see an output of the source files similar to this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到类似于此的源文件输出：
- en: '![](img/b8b6ae84-2a99-4531-9be3-44dc26249c14.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8b6ae84-2a99-4531-9be3-44dc26249c14.png)'
- en: If we want to update the configuration and apply a patch or change one of the
    defaults, then this can simply be done by editing the files.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要更新配置并应用补丁或更改其中一个默认设置，那么只需编辑文件即可完成。
- en: We can now rebuild these files from source using `mock`, which is a tool for
    building packages. The advantage of `mock` is that all of the development dependencies
    are contained within a *chrooted* environment, so it doesn't clutter your main
    installation. This *chrooted* environment can be cleaned and removed without any
    impact on the host system, which is great if you want repeatable builds.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以使用`mock`从源代码重新构建这些文件，`mock`是一个用于构建软件包的工具。`mock`的优点在于所有开发依赖项都包含在*chrooted*环境中，因此不会干扰主要安装。这个*chrooted*环境可以被清理和移除，不会对主机系统产生任何影响，这对于希望重复构建的用户来说非常好。
- en: 'To build, we run the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建，请运行以下命令：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This generates the SRPMs, and they will be located in the `/var/lib/mock/epel-7-x86_64/result`
    directory, along with the associated log files. Now that we have a rebuilt SRPM,
    we can now compile it. Again, we''re going to use `mock` so that everything is
    neatly contained:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成SRPM，并将其放置在`/var/lib/mock/epel-7-x86_64/result`目录中，连同相关的日志文件。现在我们有了一个重建的SRPM，现在可以编译它。同样地，我们将使用`mock`以确保一切都整洁地包含在其中：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Depending on your processing power, this may take five minutes or more to complete.
    Once the build is complete, you should see the resultant binary RPM as well as
    a debug RPM in the `/var/lib/mock/epel-7-x86_64` directory. Here''s an example:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的处理能力，这可能需要五分钟或更长时间才能完成。构建完成后，您应该会看到结果二进制RPM以及`/var/lib/mock/epel-7-x86_64`目录中的调试RPM。以下是一个示例：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now that we have the new binary file, we can install it via `yum`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了新的二进制文件，可以通过`yum`安装它：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: It's preferable to use `yum` over `rpm` to install the packages, as it can also
    install any dependencies.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最好使用`yum`而不是`rpm`安装软件包，因为它还可以安装任何依赖项。
- en: You should now have a fully installed NGINX installation, which you compiled
    from source.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该已经完全安装了您从源代码编译的NGINX安装程序。
- en: Testing
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: 'Regardless of your installation method, once you have NGINX up and running,
    you should be able to browse to it via the IP address and/or **Fully Qualified
    Domain Name** (**FQDN**) and see something very similar to what is shown here:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您的安装方法如何，一旦NGINX运行起来，您应该能够通过IP地址和/或**完全合格域名** (**FQDN**)访问它，并看到与此处非常相似的内容：
- en: '![](img/d78d0ea9-e41f-4c4f-a0cb-16b5dfb8f590.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d78d0ea9-e41f-4c4f-a0cb-16b5dfb8f590.png)'
- en: Default NGINX page
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的NGINX页面
- en: To start, stop, and restart NGINX (if installed using official binaries), you
    can use the standard Linux init systems. There's a very slight variance between
    the different OS versions, so it's important to ensure you're using the correct
    command for the correct variant.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动、停止和重新启动NGINX（如果使用官方二进制文件安装），可以使用标准的Linux init系统。不同操作系统版本之间可能存在非常细微的差异，因此确保使用正确的命令是非常重要的。
- en: As Ubuntu switched to `systemd` as the default init system from 15.04, make
    sure you double check the version you're using.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Ubuntu 从 15.04 开始将 `systemd` 作为默认的初始化系统，请确保你检查所使用的版本。
- en: How to do it...
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here''s a quick reference table of the available commands:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可用命令的快速参考表：
- en: '| **Activity/OS** | **CentOS / RedHat 6** | **CentOS / RedHat 7** | **Ubuntu
    14.04 / Debian 8** |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| **活动/操作系统** | **CentOS / RedHat 6** | **CentOS / RedHat 7** | **Ubuntu 14.04
    / Debian 8** |'
- en: '| **Start NGINX** | `service nginx start` | `systemctl start nginx` | `service
    nginx start` |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| **启动 NGINX** | `service nginx start` | `systemctl start nginx` | `service
    nginx start` |'
- en: '| **Stop NGINX**  | `service nginx stop` | `systemctl stop nginx` | `service
    nginx stop` |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| **停止 NGINX**  | `service nginx stop` | `systemctl stop nginx` | `service
    nginx stop` |'
- en: '| **Restart NGINX** | `service nginx restart` | `systemctl restart nginx` |
    `service nginx restart` |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| **重启 NGINX** | `service nginx restart` | `systemctl restart nginx` | `service
    nginx restart` |'
- en: '| **Reload NGINX** | `service nginx reload` | N/A | N/A |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| **重新加载 NGINX** | `service nginx reload` | N/A | N/A |'
- en: Some modifications to NGINX will require a full restart, whereas others only
    need the configuration reloaded. In most instances where a configuration file
    has been modified, a reload is all which is required. NGINX will fork a new set
    of worker processes, allowing existing workers to complete and cleanly exit so
    that there is no downtime.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 某些 NGINX 的修改需要完全重启，而其他修改只需重新加载配置。在大多数修改了配置文件的情况下，重载就足够了。NGINX 会派发一组新的工作进程，允许现有工作进程完成并正常退出，从而不会造成停机。
- en: There's more...
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: 'We can check the NGINX configuration files after changes are made to ensure
    the syntax is correct. To do this, we run the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在做出更改后，我们可以检查 NGINX 配置文件以确保语法正确。为此，我们运行以下命令：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You should see the following if everything is correct:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，你应该看到以下内容：
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If you have any errors, double check your configuration for syntax errors on
    the lines indicated.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到任何错误，请仔细检查配置文件中标出的行是否有语法错误。
- en: Configuring NGINX
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 NGINX
- en: Editing the configuration for NGINX is paramount to the way it operates. To
    integrate NGINX with your particular website or need, you'll need to edit a number
    of areas within the configuration files. To get started, we'll go through the
    basics here.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 NGINX 的配置文件对于其运作至关重要。为了将 NGINX 集成到你的网站或需求中，你需要编辑配置文件中的多个部分。为了开始，我们在这里简要介绍基本操作。
- en: How to do it...
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: By default, NGINX will have two main configuration files. The first is `/etc/nginx/nginx.conf`,
    which contains the main server configuration. The second is `/etc/nginx/default.conf`,
    which defines a basic site out of the box for you.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，NGINX 会有两个主要配置文件。第一个是 `/etc/nginx/nginx.conf`，包含主要的服务器配置。第二个是 `/etc/nginx/default.conf`，为你定义了一个基本的站点配置。
- en: 'Warning: Don''t just increase values expecting a higher performance.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 警告：不要仅仅增加数值以期获得更高的性能。
- en: Before you make any changes, be 100 percent sure that you understand the implications.
    Out of the box, NGINX is a highly performant web server which already gives great
    performance. The age-old programmer's saying that *premature optimization is the
    root of all evil* continually rings true here. Simply increasing some figures
    may lead to increased memory usage, decreased stability, and decreased performance.
    In [Chapter 11](482173df-c31a-4082-abc0-6d6aafd4a5e6.xhtml), *Performance Tuning*,
    we'll go through some of the more advanced areas to tweak, but make sure to hit
    limits before attempting this.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行任何更改之前，必须百分之百确认你了解其影响。开箱即用的 NGINX 是一个高性能的 web 服务器，已经能够提供出色的性能。编程界流传已久的说法——*过早的优化是万恶之源*——在这里依然适用。仅仅增加一些数值可能会导致内存使用增加、稳定性下降以及性能下降。在[第
    11 章](482173df-c31a-4082-abc0-6d6aafd4a5e6.xhtml)，*性能调优*部分，我们将讨论一些更高级的调优领域，但请确保在尝试这些之前，先达到使用的限制。
- en: 'Here''s the default configuration:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是默认配置：
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The configuration files have two main components in them—**simple directives**
    and **block directives**. Simple directives are one-line items which are simple
    name and value, followed by a semicolon (`;`). A block directive has a set of
    brackets and allows configuration items to be set within a specific context. This
    makes the configuration files easier to follow, especially as they get more complex.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件中有两个主要组成部分——**简单指令** 和 **块指令**。简单指令是单行项，包含简单的名称和值，后跟分号（`;`）。块指令包含一对大括号，并允许在特定上下文中设置配置项。这使得配置文件更容易理解，尤其是在它们变得更加复杂时。
- en: How it works...
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何工作...
- en: Here are a few of the key configuration items. Firstly, `user nginx` defines
    the user in which NGINX will run as. This is important to note if you have a server-side
    script which requires the ability to write files and a user will also require
    permission to read the files.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个关键的配置项。首先，`user nginx` 定义了 NGINX 将作为哪个用户运行。这一点很重要，特别是如果你有一个服务器端脚本需要写文件，并且用户还需要权限来读取这些文件。
- en: Secondly, `worker_processes` sets the number of worker processes that NGINX
    will start. While a default of `1` doesn't sound very high, the event-driven nature
    means that this certainly won't be a limitation initially. The optimal number
    of processes depends on many factors, but an easy starting reference is to go
    by the number of CPU cores your server has.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，`worker_processes` 设置了 NGINX 将启动的工作进程数。虽然默认为 `1` 听起来不算很高，但事件驱动的性质意味着这一开始绝对不会是限制。最佳进程数量取决于许多因素，但一个简单的起始参考是按照服务器的
    CPU 核心数来确定。
- en: Next, `worker_connections` is the maximum amount of simultaneous connections
    that a worker process can open. In the default configuration, this is set to `1024`
    concurrent connections.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`worker_connections` 是工作进程可以打开的最大并发连接数。在默认配置中，这个值被设置为 `1024` 个并发连接。
- en: Lastly, the `include /etc/nginx/conf.d/*.conf;` line tells NGINX to load all
    of the `.conf` files as if they were all part of the main `nginx.conf` file. This
    allows you to separate the configuration for different sites.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`include /etc/nginx/conf.d/*.conf;` 这一行告诉 NGINX 加载所有 `.conf` 文件，就像它们是主 `nginx.conf`
    文件的一部分。这允许你将不同站点的配置分开。
- en: Enabling modules
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用模块
- en: By default, not every module for NGINX has been compiled and is available. As
    of version 1.9.11 (released in February 2016), NGINX added dynamic modules, similar
    to the **Dynamic Shared Objects** (**DSO**) like the Apache HTTP server.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，并非所有 NGINX 模块都已编译和可用。从版本 1.9.11 开始（发布于2016年2月），NGINX 添加了动态模块，类似于 Apache
    HTTP 服务器的 **动态共享对象**（**DSO**）。
- en: '![](img/a438fdbd-c516-4694-8434-3c1b979cff19.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a438fdbd-c516-4694-8434-3c1b979cff19.png)'
- en: Previous NGINX build process
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的 NGINX 构建过程
- en: Previous to this, you needed to recompile NGINX every time you updated a module,
    so this is a big step forward. Being statically compiled into the main binary
    also meant that each instance of NGINX loaded all the modules internally, regardless
    of whether you needed them or not. This is why the mail modules were never compiled
    in with the standard binaries.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之前，每次更新一个模块，你都需要重新编译 NGINX，因此这是一个重大进步。静态编译进主二进制文件也意味着，每个 NGINX 实例都加载了所有模块，无论你是否需要它们。这就是为什么标准二进制文件中从未编译邮件模块的原因。
- en: '![](img/c789d472-84e0-46ef-b9a5-23ce5c320822.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c789d472-84e0-46ef-b9a5-23ce5c320822.png)'
- en: NGINX new dynamic modules
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: NGINX 新的动态模块
- en: How to do it...
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: However, even though 1.9.11 added the dynamic modules, none of the standard
    modules are dynamic by default. To make them into dynamic modules, you'll need
    to update the configure options. For example, to make the mail module dynamic,
    update `--with-mail` to `--with-mail=dynamic`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尽管 1.9.11 添加了动态模块，但标准模块默认都不是动态的。要将它们变成动态模块，你需要更新配置选项。例如，要将邮件模块变成动态模块，更新 `--with-mail`
    为 `--with-mail=dynamic`。
- en: 'The main `nginx.conf` configuration file will then need the following:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的 `nginx.conf` 配置文件接着需要以下内容：
- en: '[PRE23]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Official Link: [https://www.nginx.com/resources/wiki/extending/](https://www.nginx.com/resources/wiki/extending/)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 官方链接：[https://www.nginx.com/resources/wiki/extending/](https://www.nginx.com/resources/wiki/extending/)
- en: See also
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: There are a number of third-party modules for NGINX, some of which we'll be
    using later in this book and can be found at [https://www.nginx.com/resources/wiki/modules/](https://www.nginx.com/resources/wiki/modules/).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: NGINX 有许多第三方模块，我们稍后将在本书中使用一些，并且可以在 [https://www.nginx.com/resources/wiki/modules/](https://www.nginx.com/resources/wiki/modules/)
    找到。
- en: Deploying a basic site
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署基本网站
- en: If you have a static website, this is very easy to deploy with NGINX. With systems
    such as Jekyll (which powers the GitHub Pages), static site deployments can be
    easy to generate and are far less hassle when it comes to security and exploits.
    Quite simply, a static website can't be hacked and doesn't suffer from any performance
    issues.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个静态网站，使用 NGINX 非常容易部署。像 Jekyll 这样的系统（用于 GitHub Pages），静态站点部署容易生成，并且在安全性和漏洞方面要少得多。简单来说，静态网站无法被黑客入侵，并且不会出现任何性能问题。
- en: How to do it...
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: To serve static files, we're going to edit the default site configuration file
    `/etc/nginx/conf.d/default.conf` and make a few small changes.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了提供静态文件，我们将编辑默认站点配置文件`/etc/nginx/conf.d/default.conf`并进行一些小的修改。
- en: 'Edit the file and add the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑文件并添加以下内容：
- en: '[PRE24]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If the folder doesn''t exist, create the `/var/www/vhosts` directory with the
    following command:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果文件夹不存在，使用以下命令创建`/var/www/vhosts`目录：
- en: '[PRE25]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Copy your existing website files into the `/var/www/vhosts` directory.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将现有的网站文件复制到`/var/www/vhosts`目录中。
- en: 'Ensure the files and folders have permission to be read by the `nginx` user:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保文件和文件夹可以被`nginx`用户读取：
- en: '[PRE26]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: From your web browser, browse the site and check that it's working.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的网页浏览器访问该网站，并检查它是否正常工作。
- en: How it works...
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s go through this setup file to understand each directive:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过这个设置文件来理解每个指令：
- en: '`listen 80;`: This defines the port which NGINX will listen to. Port `80` is
    the default standard for HTTP, which is why it doesn''t need to be specified in
    the browser URL.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`listen 80;`：此指令定义了NGINX监听的端口。端口`80`是HTTP的默认标准，因此在浏览器URL中不需要指定。'
- en: '`server_name server.yourname.com;`: This directive tells the server what hostname
    to match from the request. This allows you to run name-based virtual servers from
    one IP address, but with different domain names. You can also use different aliases
    here; for example, you can have both `www.yourname.com` and `yourname.com`.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server_name server.yourname.com;`：此指令告诉服务器要匹配请求中的主机名。这允许你在一个IP地址上运行基于名称的虚拟服务器，但使用不同的域名。你还可以在这里使用不同的别名；例如，你可以同时使用`www.yourname.com`和`yourname.com`。'
- en: '`access_log /var/log/nginx/log/host.access.log combined;`: The access log records
    all client access to the site, stores it in the specified file (the second parameter),
    and uses the third parameter to define the format of the log (`combined` is the
    default).'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`access_log /var/log/nginx/log/host.access.log combined;`：访问日志记录了所有客户端对该网站的访问，将其存储在指定的文件中（第二个参数），并使用第三个参数定义日志格式（`combined`是默认格式）。'
- en: '`location`: Lastly, we have a `location` block directive. This one is for a
    root directive (represented by `/`), meaning everything in the URL path. There
    are then two directives contained within this block—the first is the `root` directive.
    This defines where NGINX should look for the files.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`location`：最后，我们有一个`location`块指令。这个指令是针对根指令（由`/`表示），意味着所有的URL路径中的内容。然后这个块内包含了两个指令——第一个是`root`指令，它定义了NGINX应该在哪里查找文件。'
- en: '`index`: The second is the `index` directive. This lets NGINX know what name
    of a file to try if it hasn''t been specified in the path. For example, if you
    put `http://server.yourname.com/` into your browser, NGINX will try to load `http://server.yourname.com/index.html`
    instead of displaying a 404 error.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index`：第二个是`index`指令。这个指令告诉NGINX在路径未指定时，尝试加载哪个文件。例如，如果你在浏览器中输入`http://server.yourname.com/`，NGINX会尝试加载`http://server.yourname.com/index.html`，而不是显示404错误。'
- en: Basic monitoring
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本监控
- en: Monitoring both the performance and uptime of a web server is paramount when
    you want to ensure consistent performance. There are a number of ways both these
    aspects can be monitored, all with varying levels of complexity and information.
    We'll focus on some of the simpler examples to give you a starting point to go
    forward with.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 监控Web服务器的性能和正常运行时间是至关重要的，尤其是当你想确保服务器始终保持一致的性能时。可以通过多种方式来监控这两个方面，每种方法的复杂度和信息量有所不同。我们将关注一些较为简单的例子，帮助你从中获得前进的起点。
- en: How to do it...
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can enable the basic NGINX `stub_status` page to give some rudimentary statistics
    and service status. To enable, edit your site config and add the following:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以启用基本的NGINX `stub_status`页面，以提供一些基本的统计信息和服务状态。要启用它，请编辑你的站点配置并添加以下内容：
- en: '[PRE27]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: To prevent information leakage about your system, we have added the `allow`
    command. This should be your IP address. This is followed by the `deny all` command
    to prevent anyone else from loading the URL. We've also turned off access logs
    for this URL to save space.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止泄露有关系统的信息，我们添加了`allow`指令，这里应该是你的IP地址。接下来是`deny all`指令，防止其他人加载该URL。我们还关闭了该URL的访问日志，以节省空间。
- en: 'After reloading your configuration (hint: `systemctl reload nginx` for systemd-based
    OS), you can now load the new URL `/nginx_status` in your browser.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在重新加载配置后（提示：对于基于systemd的操作系统，可以使用`systemctl reload nginx`），你现在可以在浏览器中加载新URL`/nginx_status`。
- en: 'You should see something like the following:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到如下内容：
- en: '![](img/389eb8bf-2017-414f-a153-af7950f9dbb8.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/389eb8bf-2017-414f-a153-af7950f9dbb8.png)'
- en: How it works...
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s take apart the details line-by-line:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐行解析细节：
- en: The `Active connections` line lists the amount of connections to the server.
    For a quiet server, this could be less than a dozen. For a busy server, expect
    this to be in the hundreds.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Active connections`这一行列出了与服务器的连接数。对于一个空闲的服务器，这个数字可能不到十个。对于一个繁忙的服务器，预计会有数百个。'
- en: The `server accepts handled requests` line is little confusing, since it's represented
    by three numbers (`81`, `81`, and `177` in this example). The first number represents
    the amount of accepted connections. The second number represents the total number
    of handled connections. Unless there's a resource limitation, the number of accepted
    and handled connections should be the same. Next, we have the total number of
    client requests.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server accepts handled requests`这一行有些令人困惑，因为它由三个数字（在这个例子中是`81`、`81`和`177`）表示。第一个数字表示已接受的连接数，第二个数字表示处理的连接总数。除非存在资源限制，否则已接受和已处理的连接数应该是相同的。接下来，我们可以看到客户端请求的总数。'
- en: The last line represents the state of the active connections. `Reading` means
    NGINX is reading the request headers, `Writing` means NGINX is writing data back
    to the client, and `Waiting` means that the client is now idle but still has the
    connection open (due to keep-alives).
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一行表示活跃连接的状态。`Reading`表示NGINX正在读取请求头，`Writing`表示NGINX正在向客户端写回数据，`Waiting`表示客户端现在处于空闲状态，但仍保持连接（由于保持连接）。
- en: Real-time statistics
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实时统计信息
- en: When your web server is important to you, you'll want to see what's going on
    in real-time. One great utility to do this is `ngxtop`. This program monitors
    your real-time access log in to display useful metrics such as the number of requests
    per second, HTTP statuses served, and pages/URLs served. This information can
    be a great aid to determine what your top pages are and if there is an increased
    rate of errors.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的Web服务器对你来说非常重要时，你可能会希望实时查看发生了什么。一个很好的工具是`ngxtop`。这个程序会监控你的实时访问日志，显示有用的指标，例如每秒请求数、服务的HTTP状态和提供的页面/URL。这些信息对确定最受欢迎的页面以及是否有错误率增加非常有帮助。
- en: How to do it...
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To install `ngxtop`, you''ll first need to install the Python package manager,
    `pip`. On a Debian/Ubuntu-based system, you''ll need to run the following:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装`ngxtop`，首先需要安装Python包管理工具`pip`。在基于Debian/Ubuntu的系统中，你需要运行以下命令：
- en: '[PRE28]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'For a Red Hat- / CentOS-based system, the EPEL repository is required first.
    To install, run the following:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于Red Hat / CentOS的系统，首先需要EPEL仓库。要安装，运行以下命令：
- en: '[PRE29]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Once you have `pip` installed, you can now install `ngxtop`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你安装了`pip`，就可以安装`ngxtop`了：
- en: '[PRE30]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This will download the required files and install `ngxtop` for you. It's now
    ready to use.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这将下载所需的文件并为你安装`ngxtop`。现在它已经准备好使用了。
- en: How it works...
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `ngxtop` utility can be simply called from the command line, and it will
    attempt to read the log file location from the configuration. However, if you're
    running virtual hosts, it may not read the access log location correctly. The
    easiest way in this scenario is to manually specify the log location.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`ngxtop`工具可以简单地从命令行调用，它会尝试从配置中读取日志文件位置。然而，如果你正在使用虚拟主机，它可能无法正确读取访问日志位置。在这种情况下，最简单的方法是手动指定日志位置。'
- en: 'Consider the following example:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑以下示例：
- en: '[PRE31]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This will display a console-based view of what URLs are being accessed. Here''s
    a basic example:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示一个基于控制台的视图，展示哪些URL被访问。以下是一个基本示例：
- en: '![](img/983ef72f-255e-4247-a9c4-e32e61874a82.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/983ef72f-255e-4247-a9c4-e32e61874a82.png)'
- en: This will refresh every second, giving you near instantaneous information about
    what URLs NGINX is serving, but that's not all. The `ngxtop` utility is quite
    configurable and there are a number of different ways it can display information.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这将每秒刷新一次，实时提供NGINX正在提供哪些URL的信息，但这还不是全部。`ngxtop`工具非常可配置，并且有多种不同方式可以显示信息。
- en: 'We can filter only the `404` pages with the following:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令只过滤出`404`页面：
- en: '[PRE32]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Only those URLs which had a `404` are now going to be displayed within `ngxtop`.
    Here''s an example output:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只有那些返回`404`的URL才会在`ngxtop`中显示。以下是一个输出示例：
- en: '![](img/0f7394a5-ab2a-4342-bc76-d88c3c4fc43e.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f7394a5-ab2a-4342-bc76-d88c3c4fc43e.png)'
- en: There are quite a number of other options easy to tailor to your scenario, especially
    if you know what you're hunting for.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他选项可以轻松根据你的需求进行定制，特别是如果你知道自己要寻找什么。
- en: See also
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参见
- en: To know more about `ngxtop`, refer to [https://github.com/lebinh/ngxtop](https://github.com/lebinh/ngxtop).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`ngxtop`的信息，请参考[https://github.com/lebinh/ngxtop](https://github.com/lebinh/ngxtop)。
