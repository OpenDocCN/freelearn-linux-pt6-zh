["```\nyum install -y yum-utils  \n```", "```\nyum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo  \n```", "```\nyum install -y openresty  \n```", "```\nsystemctl enable openresty  \n```", "```\nsystemctl start openresty  \n```", "```\nwget -qO - https://openresty.org/package/pubkey.gpg | apt-key add -\n```", "```\napt install -y software-properties-common  \n```", "```\nadd-apt-repository -y \"deb http://openresty.org/package/ubuntu $(lsb_release -sc) main\"\napt update  \n```", "```\napt install -y openresty  \n```", "```\nsystemctl enable openresty\nsystemctl start openresty\n```", "```\n/usr/local/openresty/bin/openresty -V  \n```", "```\nnginx version: openresty/1.11.2.3\nbuilt with OpenSSL 1.0.2k  26 Jan 2017\nTLS SNI support enabled\nconfigure arguments: --prefix=/usr/local/openresty/nginx --with-cc-opt='-O2 -I/usr/local/openresty/zlib/include -I/usr/local/openresty/pcre/include -I/usr/local/openresty/openssl/include' --add-module=../ngx_devel_kit-0.3.0 --add-module=../echo-nginx-module-0.60 --add-module=../xss-nginx-module-0.05 --add-module=../ngx_coolkit-0.2rc3 --add-module=../set-misc-nginx-module-0.31 --add-module=../form-input-nginx-module-0.12 --add-module=../encrypted-session-nginx-module-0.06 --add-module=../srcache-nginx-module-0.31 --add-module=../ngx_lua-0.10.8 --add-module=../ngx_lua_upstream-0.06 --add-module=../headers-more-nginx-module-0.32 --add-module=../array-var-nginx-module-0.05 --add-module=../memc-nginx-module-0.18 --add-module=../redis2-nginx-module-0.14 --add-module=../redis-nginx-module-0.3.7 --with-ld-opt='-Wl,-rpath,/usr/local/openresty/luajit/lib -L/usr/local/openresty/zlib/lib -L/usr/local/openresty/pcre/lib -L/usr/local/openresty/openssl/lib -Wl,-rpath,/usr/local/openresty/zlib/lib:/usr/local/openresty/pcre/lib:/usr/local/openresty/openssl/lib' --with-pcre-jit --with-ipv6 --with-stream --with-stream_ssl_module --with-http_v2_module --without-mail_pop3_module --without-mail_imap_module --without-mail_smtp_module --with-http_stub_status_module --with-http_realip_module --with-http_addition_module --with-http_auth_request_module --with-http_secure_link_module --with-http_random_index_module --with-http_gzip_static_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-threads --with-file-aio --with-dtrace-probes --with-http_ssl_module\n\n```", "```\nlocation /simpletest { \n    default_type 'text/plain'; \n    content_by_lua_block { \n        ngx.say('This is a simple test!') \n  } \n} \n```", "```\nlocation /simplejsontest { \n        default_type 'application/json'; \n        content_by_lua_block { \n            local cjson = require \"cjson.safe\" \n            ngx.say(cjson.encode({test=\"Encoded with CJSON\",enabled=true})) \n      } \n    } \n```", "```\n{\"test\":\"Encoded with CJSON\",\"enabled\":true}\n\n```", "```\nlocation /getmxrecords { \n    default_type 'application/json'; \n    content_by_lua_block { \n        local cjson = require \"cjson.safe\" \n        local resolver = require \"resty.dns.resolver\" \n        local r, err = resolver:new{ \n            nameservers = {\"8.8.8.8\"} \n        } \n        if not r then \n            ngx.say(cjson.encode({result=\"failed\", \n                    message=\"Failed to initiate the resolver. \n                    Reason: \"..err})) \n            return \n        end \n\n        local domain = ngx.var.arg_domain \n        if not domain or not string.match(domain, \"[%w]*[%.]?[%w]*\") then \n            ngx.say(cjson.encode({result=\"failed\", \n                    message=\"Invalid domain entered\"})) \n             return \n        end \n          local result, err = r:query(domain, { qtype = r.TYPE_MX }) \n         if not result then \n            ngx.say(cjson.encode({result=\"failed\", \n                    message=\"Failed to return a result.\n                    Reason: \"..err})) \n            return \n         end \n           ngx.say(cjson.encode({result=\"success\", records=result})) \n     } \n } \n```", "```\n    {\"records\":[{\"exchange\":\"mxa-00082601.gslb.pphosted.com\",\"preference\":10,\"class\":1,\"ttl\":299,\"name\":\"instagram.com\",\"section\":1,\"type\":15},{\"exchange\":\"mxb-00082601.gslb.pphosted.com\",\"preference\":10,\"class\":1,\"ttl\":299,\"name\":\"instagram.com\",\"section\":1,\"type\":15}],\"result\":\"success\"} \n```", "```\nlocation /redistest { \n    default_type 'text/plain'; \n    content_by_lua_block { \n        local redis = require \"resty.redis\" \n        local red = redis:new() \n        local ok, err = red:connect(\"127.0.0.1\", 6379) \n        if not ok then \n            ngx.say(\"Failed to connect to the redis server, the error was: \", err) \n        end \n        local counter = red:get(\"counter\") \n        if tonumber(counter) == nil then \n            counter = 0 \n        end \n        counter = counter + 1 \n        local ok, err = red:set(\"counter\", counter) \n        ngx.say(counter) \n    } \n} \n```", "```\nredis-cli SET /api/v1/test http://localhost/simpletest  \n```", "```\nlocation /proxy/ { \n    rewrite /proxy/(.*) /$1  break; \n    allow 127.0.0.1; \n    deny all; \n    proxy_pass $1; \n} \n\nlocation /api { \n    default_type 'application/json'; \n    access_by_lua_file apigateway/auth.lua; \n    content_by_lua_file apigateway/route.lua; \n} \n```", "```\nlocal cjson = require \"cjson.safe\" \nlocal allowedkeys = {\"abc123\", \"def456\", \"hij789\"} \nlocal function badAuth() \n    ngx.status = 401 \n    ngx.say(cjson.encode({status=\"error\",\n             errmessage=\"Authentication Failed\"})) \n    ngx.exit(401) \nend \n\nlocal function isAuthorised (key) \n    for index, value in ipairs(allowedkeys) do \n        if value == key then \n            return true \n        end \n    end \n    return false \nend \n\nlocal authKey = ngx.req.get_headers()[\"X-API-KEY\"] \nif authKey == nil then \n    badAuth() \nelseif not isAuthorised(authKey) then \n    badAuth() \nend \n```", "```\nlocal cjson = require \"cjson.safe\" \nlocal redis = require \"resty.redis\" \n\nlocal red = redis:new() \nlocal ok, err = red:connect(\"127.0.0.1\", 6379) \nif not ok then \n    ngx.say(cjson.encode({status=\"ok\", errormessage=\n         \"Failed to connect to the redis server, the error was: \"..err})) \n    ngx.exit(500) \nend \n\nlocal apiroute = red:get(ngx.var.uri) \nif apiroute == ngx.null then \n    ngx.say(cjson.encode({status=\"error\", errormessage=\n            \"no service at this path\"})) \n    ngx.exit(404) \nend \nres = ngx.location.capture(\"/proxy/\"..apiroute) \nif res then \n    ngx.say(cjson.encode({status=\"ok\", result=res.body})) \nelse \n    ngx.say(cjson.encode({status=\"error\", \n            errormessage=\"service failed to return a result\"})) \n    ngx.exit(500) \nend \n```", "```\n{\"status\":\"error\",\"errmessage\":\"Authentication Failed\"}  \n```", "```\ncurl -H \"X-API-KEY: abc123\" http://openresty.nginxcookbook.com/api/v1/test  \n```", "```\n{\"status\":\"ok\",\"result\":\"This is a simple test!\\n\"}  \n```"]