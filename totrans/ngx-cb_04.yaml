- en: All About SSLs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所有关于 SSL 的内容
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍以下内容：
- en: Basic SSL certificates
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本的 SSL 证书
- en: Enabling HTTP/2 on NGINX
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 NGINX 上启用 HTTP/2
- en: Configuring HSTS in NGINX
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 NGINX 中配置 HSTS
- en: Easy SSL certificates with Let's Encrypt
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Let's Encrypt 获取简单的 SSL 证书
- en: Making NGINX PCI-DSS compliant
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使 NGINX 符合 PCI-DSS 标准
- en: OCSP stapling with NGINX
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 NGINX 配置 OCSP stapling
- en: Achieving full A+ Qualys rating
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 达到 A+ 评级的 Qualys 评分
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The **Secure Sockets Layer** (**SSL**) standard has been traditionally used
    to encrypt web traffic that needs to be protected, such as financial transactions
    (for example, credit card numbers) and sensitive information. Recently, however,
    we have seen an ever-increasing trend of encrypting whole sites and all related
    services. The use of SSLs ensures that the whole transport of information is encrypted
    and therefore can't be intercepted, especially, now that Google has given a small
    **Search Engine Optimization** (**SEO**) ranking boost to sites that have an SSL
    enabled by default. While the boost is small, Google's focus on encouraging the
    safe transmission of data means that this will likely increase in the future.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全套接字层**（**SSL**）标准传统上用于加密需要保护的 Web 流量，如金融交易（例如，信用卡号码）和敏感信息。然而，最近我们看到加密整个网站及其相关服务的趋势日益增加。使用
    SSL 确保信息的整个传输过程都经过加密，因此无法被拦截，尤其是现在 Google 为默认启用 SSL 的站点提供了小幅的 **搜索引擎优化**（**SEO**）排名提升。尽管这种提升较小，但
    Google 在鼓励安全数据传输方面的关注意味着这一点在未来可能会增加。'
- en: Thankfully, NGINX's support for the latest SSL standards and the latest transport
    standards, such as HTTP/2 (covered in detail later), means that it's getting easier
    to efficiently deploy SSL-encrypted sites.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 值得庆幸的是，NGINX 对最新的 SSL 标准以及最新的传输标准（如 HTTP/2，稍后会详细介绍）的支持，使得高效部署 SSL 加密站点变得越来越容易。
- en: Basic SSL certificates
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本的 SSL 证书
- en: 'Before we get started, let''s just have a refresher on how the browser-to-server
    encryption works and what we need to consider. This is a very brief overview specific
    to a basic web server scenario, so the process can vary for different scenarios:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，让我们简要回顾一下浏览器到服务器的加密是如何工作的以及我们需要考虑的事项。这是一个针对基本 web 服务器场景的简短概述，因此不同场景下的过程可能会有所不同：
- en: '![](img/7b3f1da1-1d38-4070-bc38-5988fe4ce1da.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b3f1da1-1d38-4070-bc38-5988fe4ce1da.png)'
- en: 'Following are the steps that happen in a web server scenario:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Web 服务器场景中的步骤：
- en: First, the browser communicates with the web server and requests the start of
    an SSL handshake. This is also where the browser can let the server know what
    cipher (encryption) algorithms it will allow.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，浏览器与 Web 服务器通信，请求开始 SSL 握手。这也是浏览器向服务器通知它允许使用哪些加密算法的地方。
- en: Next, the server responds to the browser. At this stage, the server will confirm
    which cipher (based on the list provided by the browser) will be used. The server
    will also send a copy of the public certificate to the client. The browser will
    then communicate with the **Certificate Authority** (**CA**) to authenticate the
    certificate.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，服务器响应浏览器。在此阶段，服务器将确认将使用的加密算法（基于浏览器提供的列表）。服务器还会将公钥证书发送给客户端。浏览器随后将与 **证书颁发机构**（**CA**）通信，以验证证书的有效性。
- en: Next, the key exchange is kicked off. A session key is established. This key
    is based on the public key on the client side and decoded by the private key on
    the server side.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，开始密钥交换。建立会话密钥。该密钥基于客户端的公钥，并由服务器端的私钥解密。
- en: It's important to note that the private key is *never* transmitted; it always
    remains on the server.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 需要特别注意的是，私钥*绝不会*被传输；它始终保留在服务器上。
- en: Once the session key is complete, the client will send a final confirmation
    to complete the handshake and await a reciprocal finalization from the server
    side.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦会话密钥完成，客户端将发送最终确认以完成握手，并等待服务器端的相应确认。
- en: Finally, we have a secure tunnel in which encrypted data can now be transmitted.
    This is where the actual web content can now be sent.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终，我们已经建立了一个安全的隧道，现在可以在其中传输加密数据。这时，实际的网页内容可以开始发送。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To install an SSL, there are three components we need to start with. The first
    is **Certificate Signing Request** (**CSR**). This defines the information which
    will be contained within the certificate and includes things such as the organization
    name and domain name. The CSR is then sent to a CA or used to generate a self-signed
    certificate.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 SSL，我们需要从三个组件开始。第一个是 **证书签名请求**（**CSR**）。它定义了证书中将包含的信息，包括组织名称和域名等内容。然后将
    CSR 发送到 CA 或用来生成自签名证书。
- en: 'To make it easy for this recipe, we''ll use a self-signed certificate. We can
    easily generate the CSR and then the private key and public certificate with one
    command. For example, here''s how to generate a CSR with a 2048 bit key and 600
    day expiry:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化本例，我们将使用一个自签名证书。我们可以通过一条命令轻松生成 CSR，然后生成私钥和公钥证书。例如，下面是如何使用 2048 位密钥和 600
    天有效期生成 CSR 的方法：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This example will ask a series of questions for the CSR and then automatically
    generate the private key (`private.key`) and the public certificate (`public.pem`).
    Consider the following example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例将依次询问 CSR 所需的一些问题，并自动生成私钥（`private.key`）和公钥证书（`public.pem`）。以下是一个示例：
- en: '![](img/f21e29d3-e0d3-427e-aa16-4c72f89e2296.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f21e29d3-e0d3-427e-aa16-4c72f89e2296.png)'
- en: Self-signed certificates aren't validated by browsers and are not intended for
    production. They should be used for internal and testing purposes only.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 自签名证书无法通过浏览器验证，且不适用于生产环境。它们应仅用于内部和测试目的。
- en: How to do it...
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Now that we have a certificate and private key, we can update our NGINX configuration
    to serve SSL-based sites. Here''s our NGINX `server` directive block:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了证书和私钥，可以更新我们的 NGINX 配置以提供基于 SSL 的网站。以下是我们的 NGINX `server` 指令块：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you have a basic `index.html` or similar in `/var/www`, you should see something
    like the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 `/var/www` 目录中有基本的 `index.html` 或类似文件，你应该会看到如下内容：
- en: '![](img/a10ae483-5973-4c0c-96ac-cd4b0be50bb8.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a10ae483-5973-4c0c-96ac-cd4b0be50bb8.png)'
- en: 'The error message will vary between browsers, but they''re all simply letting
    you know that the certificate presented couldn''t be validated and therefore can''t
    be intrinsically trusted. For testing, add an exception here; you should see the
    SSL site served by NGINX:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 错误信息会在不同的浏览器中有所不同，但它们都只是告诉你证书无法验证，因此不能被本质信任。进行测试时，可以在这里添加一个例外；你应该看到 NGINX 提供的
    SSL 网站：
- en: '![](img/12d166db-1c29-4a00-a046-ae67df365d1e.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12d166db-1c29-4a00-a046-ae67df365d1e.png)'
- en: How it works...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Here''s what the directives do:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是这些指令的作用：
- en: '`listen 443 ssl`: Firstly, we tell NGINX to listen on port `443` (the HTTPS
    standard) using the SSL protocol. Previously, we''d simply told NGINX to listen
    on port `80`, and it used HTTP by default.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`listen 443 ssl`：首先，我们告诉 NGINX 使用 SSL 协议在 `443` 端口（HTTPS 标准端口）上监听。之前，我们只是告诉
    NGINX 在 `80` 端口上监听，并且默认使用 HTTP 协议。'
- en: '`ssl_certificate`: This is the location of the public key, which needs to be
    in the PEM format. If your CA also provided intermediate certificates, then they
    also need to be in this file.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ssl_certificate`：这是公钥所在的位置，需要是 PEM 格式。如果 CA 还提供了中间证书，那么这些证书也需要包含在该文件中。'
- en: '`ssl_certificate_key`: This is the location of the private key, and it also
    needs to be in PEM format. This key needs to be kept safe to ensure the integrity
    of your certificate—it should only reside on the server.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ssl_certificate_key`：这是私钥的位置，也需要是 PEM 格式。这个密钥需要妥善保管，以确保证书的完整性——它应该仅存在于服务器上。'
- en: '`ssl_protocols`: Here, we specify what variants of the SSL protocols we want
    to make available. The easiest default is to support **Transport Layer Security**
    (**TLS**), which is the successor to the older SSL protocol. As both SSLv2 and
    SSLv3 have had significant flaws exposed in recent years, they should only be
    enabled as a last resort.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ssl_protocols`：在这里，我们指定希望启用哪些变种的 SSL 协议。最简单的默认选项是支持 **传输层安全性**（**TLS**），它是旧版
    SSL 协议的继任者。由于 SSLv2 和 SSLv3 在最近几年暴露出了重大缺陷，因此它们应仅在最后的手段下启用。'
- en: '`ssl_ciphers`: The ciphers dictate the type of encryption used and at what
    level. The default of `HIGH:!aNULL:!MD5` means that we use only high grade (128-bit
    and higher), authenticated (the exclamation means NOT) encryption and not MD5
    hashing. The defaults are secure and shouldn''t be changed without a good reason.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ssl_ciphers`：密码套件决定了使用哪种加密类型以及加密级别。默认的 `HIGH:!aNULL:!MD5` 意味着我们仅使用高等级（128
    位及以上）的认证加密（感叹号表示“不是”）且不使用 MD5 哈希。默认配置是安全的，除非有充分的理由，否则不应更改。'
- en: Enabling HTTP/2 on NGINX
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 NGINX 上启用 HTTP/2
- en: The now ratified HTTP/2 standard is based on SPDY, an experimental protocol
    that Google developed internally. As shown in the diagram in the previous recipe,
    establishing an HTTPS connection can be quite time consuming. With HTTP/1.1, each
    connection to the web server must follow this process and wait for the handshake
    to complete.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经批准的 HTTP/2 标准基于 Google 内部开发的实验性协议 SPDY。正如上一篇中的图表所示，建立 HTTPS 连接可能非常耗时。使用
    HTTP/1.1，每个连接到 Web 服务器必须遵循这个过程并等待握手完成。
- en: In HTTP/2, this handshake time is reduced, but more importantly the requests
    are multiplexed over a single TCP connection. This means that the handshake only
    has to occur once, significantly reducing the latency of a site for the end user.
    In fact, it means that an HTTP/2-based site can actually be quicker than a standard
    HTTP-based one.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HTTP/2 中，握手时间被缩短，但更重要的是请求可以在单个 TCP 连接上多路复用。这意味着握手只需发生一次，大大减少了对最终用户的延迟。实际上，这意味着基于
    HTTP/2 的站点实际上可能比基于标准 HTTP 的站点更快。
- en: 'There are a number of other benefits that HTTP/2 also provides, such as header
    compression, a new binary protocol, and a server-based push. All of these further
    increase the efficiency of HTTP/2, yet it also remains backwards compatible with
    HTTP/1.1:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP/2 还提供了许多其他优点，例如头部压缩、新的二进制协议和服务器端推送。所有这些进一步提高了 HTTP/2 的效率，同时它还与 HTTP/1.1
    兼容：
- en: '![](img/ebe0b455-8082-40cd-a29a-eec2725f6e0d.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ebe0b455-8082-40cd-a29a-eec2725f6e0d.png)'
- en: HTTP/2 support
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP/2 支持
- en: 'Source: caniuse.com (April 2017)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 'Source: caniuse.com（2017 年 4 月）'
- en: All modern browsers (as shown in the preceding figure) support HTTP/2 natively,
    so it's ready to deploy in production. NGINX officially supported HTTP/2 starting
    with version 1.9.5.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代浏览器（如上图所示）都原生支持 HTTP/2，因此已准备好在生产环境中部署。NGINX 从版本 1.9.5 开始官方支持 HTTP/2。
- en: How to do it...
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 怎么做……
- en: 'Based on our previous example, we only need to make one key change. Instead
    of just specifying `ssl` as the listening protocol, we add `http2`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 基于我们之前的示例，我们只需要做一个关键的更改。不再只指定`ssl`作为监听协议，我们添加`http2`：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'No changes to protocols or ciphers are necessary. To verify that HTTP/2 is
    working, you can use Chrome **Developer Tools** (**DevTools**) to show the protocol,
    or an external tool, such as the one KeyCDN provides:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 协议或密码没有任何更改是必要的。要验证 HTTP/2 是否正常工作，您可以使用 Chrome **开发者工具**（**DevTools**）显示协议，或者使用
    KeyCDN 提供的外部工具：
- en: '![](img/8095424f-dc1d-43eb-ab9c-2af5fe1325fb.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8095424f-dc1d-43eb-ab9c-2af5fe1325fb.png)'
- en: 'Source: https://tools.keycdn.com/http2-test'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 'Source: https://tools.keycdn.com/http2-test'
- en: While a simple page won't show the performance difference, with the average
    page demand of around 50–70 requests we should see about 20 percent improvement.
    For more complex sites (for example, e-commerce sites) where there are more than
    200 requests, the difference is even more dramatic.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然简单的页面不会显示性能差异，但平均页面需求约为 50-70 个请求时，我们应该看到约 20% 的改进。对于更复杂的站点（例如电子商务站点），请求超过
    200 个时，差异甚至更为显著。
- en: See also
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'NGINX HTTP/2 white paper: [https://assets.wp.nginx.com/wp-content/uploads/2015/09/NGINX_HTTP2_White_Paper_v4.pdf](https://assets.wp.nginx.com/wp-content/uploads/2015/09/NGINX_HTTP2_White_Paper_v4.pdf)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: NGINX HTTP/2 白皮书：[https://assets.wp.nginx.com/wp-content/uploads/2015/09/NGINX_HTTP2_White_Paper_v4.pdf](https://assets.wp.nginx.com/wp-content/uploads/2015/09/NGINX_HTTP2_White_Paper_v4.pdf)
- en: Configuring HSTS in NGINX
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 NGINX 中配置 HSTS
- en: '**HTTP Strict Transport Security** (**HSTS**) is an enhancement to the HTTP
    protocol that is designed to enforce strict security standards to help protect
    your site and users. HSTS does a number of things. Firstly, it ensures that all
    requests must be made via HTTPS. This ensures that data isn''t accidentally sent
    via HTTP and, therefore, left unencrypted.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTTP 严格传输安全**（**HSTS**）是 HTTP 协议的增强版，旨在强制执行严格的安全标准，以帮助保护您的站点和用户。HSTS 有几个作用。首先，它确保所有请求必须通过
    HTTPS 进行。这确保数据不会意外通过 HTTP 发送，因此不会以未加密的方式留存。'
- en: Secondly, it ensures that only a valid certificate can be accepted. In our previous
    examples, we used a self-signed certificate and the browser allowed us to bypass
    the security check. With HSTS enabled, this is no longer possible. This means
    that attempts to emulate your site or man-in-the-middle attacks where a different
    certificate is used are now no longer possible.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，它确保只有有效的证书可以被接受。在我们之前的示例中，我们使用了自签名证书，浏览器允许我们绕过安全检查。启用 HSTS 后，这种情况就不再可能。这意味着试图模仿您的站点或使用不同证书进行中间人攻击现在不再可能。
- en: How to do it...
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 怎么做……
- en: 'To enable the use of HSTS, we add an additional header to our `server` directive:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启用 HSTS，我们在 `server` 指令中添加一个额外的头部：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This header specifies the `max-age`, which in our case we have set to `31536000`
    seconds (which is 365 days). This means that the browser will cache the HSTS settings
    for an entire year and ensure that all requests for the next 365 days will be
    HTTPS only for your domain. It will also only accept the official certificate.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 该头部指定了 `max-age`，在我们的案例中我们将其设置为 `31536000` 秒（即 365 天）。这意味着浏览器将在一年内缓存 HSTS 设置，并确保接下来
    365 天内对你的域名的所有请求都会是 HTTPS 请求，并且只接受官方证书。
- en: There's more...
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'There''s only a small point to remember: If you specify adding a header elsewhere
    (for example, a `location` block), you will need to redeclare the HSTS header.
    Consider the following example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住一个小细节：如果你在其他地方（例如 `location` 块）指定了添加头部，则需要重新声明 HSTS 头部。考虑以下示例：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As we added access control headers, we needed to redeclare the HSTS header.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们添加了访问控制头部，我们需要重新声明 HSTS 头部。
- en: Easy SSL certificates with Let's Encrypt
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Let's Encrypt 安装简单的 SSL 证书
- en: Let's Encrypt is a free, automated CA, which is made possible due to the sponsorship
    from companies such as the **Electronic Frontier Foundation** (**EFF**), Mozilla,
    Cisco, Akamai, University of Michigan, and over a dozen others. Organized by the
    **Internet Security Research Group** (**ISRG**), Let's Encrypt has already issued
    over 4 million certificates (as of May 2016), and the rate is growing exponentially.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Let's Encrypt 是一个免费的自动化证书颁发机构（CA），其实现得益于像 **电子前沿基金会**（**EFF**）、Mozilla、Cisco、Akamai、密歇根大学以及其他十多个公司的赞助。Let's
    Encrypt 由 **互联网安全研究小组**（**ISRG**）组织，自 2016 年 5 月以来，已经颁发了超过 400 万个证书，并且这个数字正在以指数级增长。
- en: While the free component may see the biggest drawcard, it's the automation that
    is the key point. For those who have previously gone through SSL generation through
    a traditional CA, it needs to have either file-based or email-based validation
    of the domain. If you have multiple domains, this process becomes quite time consuming
    to do over and over.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然免费的组件可能是最大的吸引力，但关键点还是在于自动化。对于那些曾经通过传统 CA 生成 SSL 证书的人来说，需要使用基于文件或电子邮件的域名验证。如果你有多个域名，重复这个过程会非常耗时。
- en: Thankfully, the Let's Encrypt CA is fully API-driven, and they even include
    a client to automate everything from the validation to the update of the NGINX
    configuration. There are also extensions for popular web control panels to automate
    the process as well, such as Plesk and CPanel.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Let's Encrypt CA 完全通过 API 驱动，甚至提供了一个客户端来自动化从验证到更新 NGINX 配置的整个过程。还有一些流行的
    Web 控制面板扩展，也能自动化这个过程，比如 Plesk 和 CPanel。
- en: How to do it...
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The official Let''s Encrypt client, recently renamed Certbot, is easy to use
    and install. The installation is the same for most distributions, and has been
    greatly simplified compared to the Let''s Encrypt beta phase. Here''s how to install
    it:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的 Let's Encrypt 客户端，最近更名为 Certbot，非常容易使用和安装。安装过程对于大多数发行版都是相同的，并且比 Let's Encrypt
    测试阶段大大简化了。以下是安装步骤：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](img/1a9ec682-9cc6-4929-9039-13f3b78afcf3.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a9ec682-9cc6-4929-9039-13f3b78afcf3.png)'
- en: This will download and install all of the required Python packages for your
    system, then create the Certbot-specific **Virtual Environment** (**Virtualenv**).
    Depending on the speed of your system, this may take up to five minutes to complete.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这将下载并安装系统所需的所有 Python 包，然后创建 Certbot 特定的 **虚拟环境**（**Virtualenv**）。根据系统的速度，这可能需要最多五分钟的时间来完成。
- en: 'Unfortunately, the NGINX plugin to automatically create the configuration isn''t
    complete yet, so we need to manually edit our configuration. First, let''s generate
    the certificate:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，NGINX 插件尚未完成，无法自动创建配置，因此我们需要手动编辑配置。首先，让我们生成证书：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will present us with two options for domain validation: It can be achieved
    either by placing files within your existing `webroot` directory or by running
    a temporary web server:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为我们提供两种域名验证的选项：可以通过将文件放置在现有的 `webroot` 目录中，或通过运行一个临时 Web 服务器来实现：
- en: '![](img/e4c24310-6a84-4a6d-a042-2c024ff9179c.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4c24310-6a84-4a6d-a042-2c024ff9179c.png)'
- en: I find that the standalone web server is the most flexible option, especially
    if your NGINX configuration doesn't serve static files. However, it does require
    you to stop any services using port `80` first.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现独立的 Web 服务器是最灵活的选择，特别是当你的 NGINX 配置不提供静态文件服务时。然而，这确实要求你首先停止任何使用 `80` 端口的服务。
- en: Next, the wizard will ask you for an email account. This is used to notify you
    when your certificate is about to expire or to notify you if it has been revoked.
    You'll then need to enter the domain name to generate the SSL certificate.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，向导会要求您输入一个电子邮件账户。这用于在您的证书即将到期或被吊销时通知您。然后您需要输入域名以生成SSL证书。
- en: This domain has to be valid and the DNS pointed at the server for it to validate
    correctly.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此域名必须有效，并且DNS指向服务器才能正确验证。
- en: 'If Certbot was able to validate, you should see a notice letting you know your
    certificate is ready:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Certbot能够验证，您应该会看到一条通知，告知您证书已准备就绪：
- en: '![](img/4c37b571-5660-4dbc-838b-b2a8f1164598.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c37b571-5660-4dbc-838b-b2a8f1164598.png)'
- en: 'It''s worth noting that while the expiry date looks short (90 days), it''s
    designed to be automated for renewal. We can run the renewal process with the
    following command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，尽管到期日期看起来很短（90天），但它设计为自动续订。我们可以使用以下命令运行续订过程：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As this can be run noninteractively, you can set it to autorenew via a Cron
    call or similar.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这可以非交互方式运行，您可以通过Cron调用或类似方式设置自动更新。
- en: 'Now, we have a certificate pair (located in `/etc/letsencrypt/live/`), we can
    now create an NGINX configuration to use them:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了一对证书（位于`/etc/letsencrypt/live/`），我们现在可以创建一个NGINX配置来使用它们：
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'With our new configuration loaded, we can verify that the certificate is valid:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 加载我们的新配置后，我们可以验证证书是否有效：
- en: '![](img/e01cc8d7-6886-4b12-ae09-7a1e9e53c0e7.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e01cc8d7-6886-4b12-ae09-7a1e9e53c0e7.png)'
- en: As the Chrome DevTools show, the certificate used is validated by the browser
    and gives the green lock for confirmation. There's no difference in this certificate
    compared to other CAs, except you can automate the generation and renewal!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如Chrome开发者工具所示，浏览器验证所使用的证书并给出绿色锁定以确认。与其他CA相比，此证书没有区别，只是您可以自动化生成和更新！
- en: See also
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'The official Certbot site: [https://certbot.eff.org/](https://certbot.eff.org/)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 官方Certbot网站：[https://certbot.eff.org/](https://certbot.eff.org/)
- en: Making NGINX PCI DSS compliant
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使NGINX符合PCI DSS标准
- en: The **Payment Card Industry Data Security Standard** (**PCI DSS**) is a set
    of 12 security standards designed to ensure the secure transmission and storage
    of payment-related information. These standards set out a stringent set of rules
    covering everything from server security to policy and business standards.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**支付卡行业数据安全标准**（**PCI DSS**）是一套包含12项安全标准的规定，旨在确保支付相关信息的安全传输和存储。这些标准设定了严格的规则，涵盖从服务器安全到策略和业务标准的各个方面。'
- en: We'll focus only on one part of Requirement 4, which is entitled *Encrypt transmission
    of cardholder data across open, public networks*.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将仅专注于要求4的一部分，即*加密跨开放公共网络传输的持卡人数据*。
- en: How to do it...
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'For the secure transmission of PCI DSS data with NGINX, there are a few tweaks
    required to achieve a standard configuration. As of version 3.2 of the standards,
    the use of the SSL protocol or TLS 1.0 requires additional checks and assessment.
    Unless it''s absolutely necessary for the backwards compatibility of old equipment,
    we highly recommend that you disable them. Here''s our working configuration:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用NGINX安全传输PCI DSS数据，需要进行一些调整以实现标准配置。截至标准版本3.2，使用SSL协议或TLS 1.0需要额外的检查和评估。除非绝对需要用于旧设备的向后兼容性，我们强烈建议禁用它们。以下是我们的工作配置：
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Let''s look at some of the differences:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些差异：
- en: '`listen 443 http2 default_server;`: We add the `default_server` so that NGINX
    has a default configuration it will use during the negotiation phase. This is
    because the **Server Name Indication** (**SNI**) only occurs after the connection
    has been negotiated. Without specifying the `default_server` directive, the initial
    handshake would revert to TLS 1.0 (the NGINX default).'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`listen 443 http2 default_server;`: 我们添加`default_server`以便NGINX在协商阶段使用默认配置。这是因为**服务器名称指示**（**SNI**）只会在连接协商完成后发生。如果不指定`default_server`指令，初始握手将会回退到TLS
    1.0（NGINX默认设置）。'
- en: '`ssl_protocols TLSv1.1 TLSv1.2;`: We specify only the TLS 1.1 and 1.2 protocols,
    which disables the older 1.0 (vulnerable to POODLE attacks). This also ensures
    that the older SSLv2 and SSLv3 remain disabled as well.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ssl_protocols TLSv1.1 TLSv1.2;`: 我们只指定TLS 1.1和1.2协议，这会禁用旧的1.0版本（易受POODLE攻击）。这还确保旧的SSLv2和SSLv3也被禁用。'
- en: '`ssl_ciphers HIGH:!aNULL:!MD5:!kEDH;`: While this doesn''t look much different
    to our previous examples, we have added the `!kEDH` parameter to the end. This
    disables the basic Diffie Hellman key exchange (vulnerable to LOGJAM) while still
    allowing the more efficient, **Elliptic curve Diffie-Hellman** (**EECDH**).'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ssl_ciphers HIGH:!aNULL:!MD5:!kEDH;`：虽然这与我们之前的示例看起来没有太大区别，但我们在末尾添加了 `!kEDH`
    参数。这会禁用基础的 Diffie Hellman 密钥交换（容易受到 LOGJAM 攻击），同时仍允许更高效的 **椭圆曲线 Diffie-Hellman**
    (**EECDH**)。'
- en: 'With this combination, we''re able to achieve an A+ rating with the High-Tech
    Bridge SSL Server Test, along with a confirmation that the settings are PCI DSS
    compliant:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种组合，我们能够在高科技桥 SSL 服务器测试中获得 A+ 等级，并确认设置符合 PCI DSS 标准：
- en: '![](img/aa252fc8-5f2f-4e79-a247-c1b01a170623.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa252fc8-5f2f-4e79-a247-c1b01a170623.png)'
- en: See also
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: 'The official PCI-DSS site: [https://www.pcisecuritystandards.org](https://www.pcisecuritystandards.org)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方 PCI-DSS 网站：[https://www.pcisecuritystandards.org](https://www.pcisecuritystandards.org)
- en: 'High-Tech Bridge SSL Server Test: [https://www.htbridge.com/ssl/](https://www.htbridge.com/ssl/)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高科技桥 SSL 服务器测试：[https://www.htbridge.com/ssl/](https://www.htbridge.com/ssl/)
- en: OCSP stapling with NGINX
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 NGINX 启用 OCSP stapling
- en: '**Online Certificate Status Protocol** (**OCSP**) is one of the main protocols
    used for checking for revoked certificates. This is important in order to ensure
    that if a server or certificate was compromised, the certificates can be replaced
    and the old ones revoked to prevent fraudulent use.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**在线证书状态协议** (**OCSP**) 是检查证书是否被吊销的主要协议之一。这一点非常重要，以确保如果服务器或证书被攻击，证书能够被替换并吊销旧证书，防止其被滥用。'
- en: These checks can be time consuming, as the browser has to validate the certificate
    the first time it's used. OCSP stapling is an alternative to OCSP, and alleviates
    some of the latency issues associated with OCSP. It does this by stapling a cached
    result directly to the main request. As this result is still signed by the CA,
    it means that the results are just as secure, yet with no additional latency.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这些检查可能会耗费时间，因为浏览器在首次使用证书时需要验证证书。OCSP stapling 是 OCSP 的一种替代方案，它减轻了 OCSP 带来的一些延迟问题。它通过将缓存结果直接附加到主请求中来实现这一点。由于该结果仍由
    CA 签名，因此结果同样安全，但没有额外的延迟。
- en: How to do it...
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In order to use OCSP stapling, we need to add two additional lines to our `server`
    directive:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 OCSP stapling，我们需要在 `server` 指令中添加两行额外的配置：
- en: '[PRE10]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This means that the server is now responsible for the initial OCSP lookup and
    will then send every subsequent request with the cached result.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着服务器现在负责初始的 OCSP 查找，并将在随后的每个请求中发送缓存结果。
- en: 'We can verify that this is working with the Qualys SSL Server Test, and we
    should be looking for the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用 Qualys SSL 服务器测试来验证这一点，并且我们应该关注以下几点：
- en: '![](img/a4887118-8874-4a9f-b811-bac36cd0e1fc.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4887118-8874-4a9f-b811-bac36cd0e1fc.png)'
- en: CloudFlare (a content distribution and website performance platform) claims
    that OCSP stapling saves up to 30 percent of the SSL negotiation time, so enabling
    this is key for maximizing website performance.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFlare（一个内容分发和网站性能平台）声称，OCSP stapling 可节省最多 30% 的 SSL 协商时间，因此启用此功能对于最大化网站性能至关重要。
- en: See also
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: 'The OCSP stapling Wikipedia page: [https://en.wikipedia.org/wiki/OCSP_stapling](https://en.wikipedia.org/wiki/OCSP_stapling)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OCSP stapling 的 Wikipedia 页面：[https://en.wikipedia.org/wiki/OCSP_stapling](https://en.wikipedia.org/wiki/OCSP_stapling)
- en: 'Qualys SSL Server Test: [https://www.ssllabs.com/ssltest](https://www.ssllabs.com/ssltest)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qualys SSL 服务器测试：[https://www.ssllabs.com/ssltest](https://www.ssllabs.com/ssltest)
- en: Achieving full A+ Qualys rating
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 达到完整的 A+ Qualys 等级
- en: One of the benchmarks for configuring an SSL-based site is to achieve an A+
    rating using the Qualys Server SSL Test. This is because Qualys has set a stringent
    set of expected results and minimum standards, designed to ensure that your website
    is as secure as possible.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 配置基于 SSL 的站点的一个基准是通过 Qualys 服务器 SSL 测试获得 A+ 等级。这是因为 Qualys 设置了一套严格的预期结果和最低标准，旨在确保您的网站尽可能安全。
- en: Achieving this requires you to disable old protocols and ciphers, much in the
    way we do for PCI-DSS configurations. In fact, the basic PCI-DSS configuration
    we tested earlier already achieves an A+ rating. We're going to take it and go
    a bit further to give the ultimate SSL configuration for NGINX.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这一目标需要禁用旧的协议和密码套件，这与我们为 PCI-DSS 配置所做的操作类似。实际上，我们之前测试的基本 PCI-DSS 配置已经达到了 A+
    等级。接下来，我们将进一步优化，为 NGINX 提供最终的 SSL 配置。
- en: Some of these changes can cause backwards compatibility issues with older devices
    and browsers. Ensure you test it against your intended target audience thoroughly
    before using it in production.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些更改可能会导致与旧设备和浏览器的向后兼容性问题。在将其投入生产之前，请确保对目标用户群体进行充分的测试。
- en: 'Before we start, here''s what a basic configuration (for example, our Let''s
    Encrypt recipe) achieves:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，下面是基本配置（例如，我们的Let's Encrypt教程）所实现的功能：
- en: '![](img/ddc1856b-1a13-40c0-9107-756a447f1aea.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ddc1856b-1a13-40c0-9107-756a447f1aea.png)'
- en: A `B` score isn't bad, and the main area it's downgraded for is the weak Diffie-Hellman
    key exchange. We'll ensure this isn't an issue in this recipe.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`B`级评分并不差，主要被降级的原因是Diffie-Hellman密钥交换较弱。我们将确保在本教程中不会出现这个问题。'
- en: How to do it...
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: The first thing we need to do is regenerate our certificate to ensure that it's
    4096-bit for the RSA key. Most CAs issue a 2048-bit certificate, which will only
    give us 90 percent for the Key Exchange evaluation. If you're using Let's Encrypt,
    you'll need to generate the certificate with the `--rsa-key-size 4096` parameter.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是重新生成证书，以确保RSA密钥为4096位。大多数CA会签发2048位证书，这样我们只能在密钥交换评估中获得90%的分数。如果你使用Let's
    Encrypt，你需要通过`--rsa-key-size 4096`参数生成证书。
- en: 'Here''s our `server` directive, which has been based on the PCI-DSS configuration
    and tweaked further:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的`server`指令，它基于PCI-DSS配置并进行了进一步调整：
- en: '[PRE11]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'With this set, we achieve A+, as shown in the following image:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此设置，我们获得了A+，如下图所示：
- en: '![](img/cd128382-08dc-4abf-af1c-6d15768ccf03.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cd128382-08dc-4abf-af1c-6d15768ccf03.png)'
- en: 'Using the High-Tech Bridge SSL Server Test we also achieve full NIST-recommendation
    compliance as well:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用High-Tech Bridge SSL服务器测试，我们还实现了完整的NIST推荐合规性：
- en: '![](img/eecb7308-a43d-455b-b140-186631e5bef5.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eecb7308-a43d-455b-b140-186631e5bef5.png)'
- en: To restate the note at the start, the more stringent the security rules, the
    greater the chance of issues with older systems and browsers.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 再次重申，安全规则越严格，与旧系统和浏览器的兼容性问题就越大。
- en: How it works...
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Firstly, we only allow TLS 1.2\. Qualys to require this for the 100 percent
    protocol grading.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们只允许使用TLS 1.2。Qualys要求此协议以获得100%的协议评分。
- en: Next, we set a very limited number of ciphers, all of which are 256 bit or higher.
    We've also set it to use EECDH only, to enforce forward secrecy. This is combined
    with the 384-bit curve (`secp384r1`), which is the grade that the NSA mandate
    for top-secret graded documents. This is roughly the equivalent of a 7680-bit
    RSA key, so don't be fooled by the lower bit count.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们设置了非常有限的密码套件，所有密码套件都是256位或更高。我们还将其设置为仅使用EECDH，以强制执行前向保密。这与384位曲线（`secp384r1`）结合使用，这是NSA为最高机密等级文件所要求的等级。它大致相当于一个7680位的RSA密钥，因此不要被较低的位数所迷惑。
- en: See also
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'Qualys SSL Server Test: [https://www.ssllabs.com/ssltest](https://www.ssllabs.com/ssltest)'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qualys SSL服务器测试：[https://www.ssllabs.com/ssltest](https://www.ssllabs.com/ssltest)
- en: Qualys Server Rating Guide: [https://github.com/ssllabs/research/wiki/SSL-Server-Rating-Guide](https://github.com/ssllabs/research/wiki/SSL-Server-Rating-Guide)
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qualys服务器评分指南：[https://github.com/ssllabs/research/wiki/SSL-Server-Rating-Guide](https://github.com/ssllabs/research/wiki/SSL-Server-Rating-Guide)
