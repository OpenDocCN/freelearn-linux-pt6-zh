["```\nhttp {\n\n    # here we configure two separate shared memory zones for the keys/metadata\n    #   and filesystem paths for the cached objects themselves\n    proxy_cache_path /var/spool/nginx/articles keys_zone=ARTICLES:16m levels=1:2 inactive=1d;\n\n    proxy_cache_path /var/spool/nginx/images keys_zone=IMAGES:128m levels=1:2 inactive=30d;\n\n    # but both paths still lie on the same filesystem as proxy_temp_path\n    proxy_temp_path /var/spool/nginx;\n\n    server {\n\n        location / {\n\n            # this is where the list of articles is found\n            proxy_cache_valid 1m;\n\n        }\n\n        location /articles {\n\n            # each article has a URI beginning with \"/articles\"\n            proxy_cache_valid 1d;\n\n        }\n\n        location /img {\n\n            # every image is referenced with a URI under \"/img\"\n            proxy_cache_valid 10y;\n\n        }\n\n}\n```", "```\nlocation / {\n\n    set $memcached_key $uri;\n\n    memcached_pass 127.0.0.1:11211;\n\n}\n```", "```\nlocation / {\n\n    set $memcached_key \"$uri?$args\";\n\n    memcached_pass 127.0.0.1:11211;\n\n}\n```", "```\nserver {\n\n    location / {\n\n        set $memcached_key \"$uri?$args\";\n\n        memcached_pass 127.0.0.1:11211;\n\n        error_page 404 502 504 = @app;\n\n    }\n\n    location @app {\n\n        proxy_pass 127.0.0.1:8080;\n\n    }\n\n}\n```", "```\nserver {\n\n    root /home/www;\n\n    location / {\n\n        # match the index.html page explicitly so the *.html below\n        #  won't match the main page\n        location = /index.html\t {\n\n            expires 5m;\n\n        }\n\n        # match any file ending in .js or .css (Javascript or CSS files)\n        location ~* /.*\\.(js|css)$ {\n\n            expires 24h;\n\n        }\n\n        # match any page ending in .html\n        location ~* /.*\\.html$ {\n\n            expires 3d;\n\n        }\n\n    }\n\n    # all of our images are under a separate location (/img)\n    location /img {\n\n        expires max;\n\n    }\n\n}\n```", "```\nserver {\n\n    root /home/www;\n\n    location / {\n\n        add_before_body /header;\n\n        add_after_body /footer;\n\n    }\n\n    location /header {\n\n        proxy_pass http://127.0.0.1:8080/header;\n\n    }\n\n    location /footer {\n\n        proxy_pass http://127.0.0.1:8080/footer;\n\n    }\n\n}\n```", "```\nlocation / {\n\n    sub_filter </head> '<meta name=\"frontend\" content=\"web3\"></head>';\n\n}\n```", "```\nlocation / {\n\n    sub_filter_once off;\n\n    sub_filter '<img src=\"img/' '<img src=\"/img/';\n\n}\n```", "```\nlocation / {\n\n    sub_filter_types text/css;\n\n    sub_filter url(img/ 'url(/img/';\n\n}\n```", "```\nlocation / {\n\n    xml_entities /usr/local/share/dtd/entities.dtd;\n\n    xsl_stylesheet /usr/local/share/xslt/style1.xslt;\n\n    xsl_stylesheet /usr/local/share/xslt/style2.xslt theme=blue;\n\n}\n```", "```\n <!--# command parameter1=value1 parameter2=value2 â€¦ -->\n```", "```\n<html>\n  <head>\n    <title>*** SSI test page ***</title>\n    <link rel=\"stylesheet\" href=\"/css/layout.css\" type=\"text/css\"/>\n      <!--# block name=\"boilerplate\" -->\n      <p>...</p>\n      <!--# endblock -->\n  </head>\n  <body>\n    <div id=\"header\">\n      <!--# include virtual=\"/render/header?page=$uri\" stub=\"boilerplate\" -->\n    </div>\n    <div id=\"menu\">\n      <!--# include virtual=\"/render/menu?page=$uri\" stub=\"boilerplate\" -->\n    </div>\n    <div id=\"content\">\n      <p>This is the content of the page.</p>\n    </div>\n    <div id=\"footer\">\n      <!--# include virtual=\"/render/footer?page=$uri\" stub=\"boilerplate\" -->\n    </div>\n  </body>\n</html>\n```", "```\n<!--# perl sub=\"module::function\" arg=\"parameter1\" arg=\"parameter2\" ... -->\n```", "```\n# upstreammapper.pm\n\n# name our package\npackage upstreammapper;\n\n# include the nginx request methods and return code definitions\nuse nginx;\n\n# this subroutine will be called from nginx\nsub handler {\n\n    my $r = shift;\n\n    my @alpha = (\"a\"..\"z\");\n\n    my %upstreams = ();\n\n    # simplistically create a mapping between letter and\n    #  an IP which is between 10 and 35 of that network\n    foreach my $idx (0..$#alpha) {\n\n  $upstreams{ $alpha[$idx] } = $idx + 10;\n\n    }\n\n    # get the URI into an array\n    my @uri = split(//,$r->uri);\n\n    # so that we can use the first letter as a key\n    my $ip = \"10.100.0.\" . $upstreams{ $uri[1] };\n\n    return $ip;\n\n}\n\n1;\n\n__END__\n```", "```\nhttp {\n\n    # this path is relative to the main configuration file\n    perl_modules perl/lib;\n\n    perl_require upstreammapper.pm;\n\n    # we'll store the result of the handler in the $upstream variable\n    perl_set $upstream upstreammapper::handler;\n```", "```\n    location / {\n\n        include proxy.conf;\n\n        proxy_pass http://$upstream;\n\n    }\n\n}\n```", "```\n$ echo -n \"alphabet_soup.pdfsupersecret\" |md5sum 8082202b04066a49a1ae8da9ec4feba1  - \n$ echo -n \"time_again.pdfsupersecret\" |md5sum 5b77faadb4f5886c2ffb81900a6b3a43  -\n\n```", "```\n<a href=\"/downloads/8082202b04066a49a1ae8da9ec4feba1/alphabet_soup.pdf\">alphabet soup</a>\n<a href=\"/downloads/5b77faadb4f5886c2ffb81900a6b3a43/time_again.pdf\">time again</a>\n```", "```\n# any access to URIs beginning with /downloads/ will be protected\nlocation /downloads/ {\n\n    # this is the string we used to generate the hashes above\n    secure_link_secret supersecret;\n\n    # deny access with a Forbidden if the hash doesn't match\n    if ($secure_link = \"\") {\n\n        return 403;\n\n    }\n\n    try_files /downloads/$secure_link =404;\n\n}\n```", "```\n<a href=\"/downloads/bare_link.pdf\">bare link</a>\n```", "```\nlocation /img {\n\n    try_files $uri /resize/$uri;\n\n}\n\nlocation ~* /resize/(?.<name>.*)_(?<width>[[:digit:]]*)x(?<height>[[:digit:]]*)\\.(?<extension>gif|jpe?g|png)$ {\n\n     error_page 404 = /resizer/$name.$extension?width=$width&height=$height;\n\n}\n\nlocation /resizer {\n\n    image_filter resize $arg_width $arg_height;\n\n}\n```", "```\nserver {\n\n    root /home/www;\n\n    location /img {\n\n        try_files $uri /resize/$uri;\n\n    }\n\n    location /resize {\n\n        error_page 404 = @resizer;\n    }\n\n    location @resizer {\n\n        internal;\n\n        proxy_pass http://localhost:8080$uri;\n\n        proxy_store /home/www/img$request_uri;\n\n        proxy_temp_path /home/www/tmp/proxy_temp;\n\n    }\n\n}\n\nserver {\n\n    listen 8080;\n\n    root /home/www/img;\n\n    location ~* /resize/(?.<name>.*)_(?<width>[[:digit:]]*)x(?<height>[[:digit:]]*)\\.(?<extension>gif|jpe?g|png)$ {\n\n        error_page 404 = /resizer/$name.$extension?width=$width&height=$height;\n\n    }\n\n    location /resizer {\n\n        image_filter resize $arg_width $arg_height;\n\n    }\n\n}\n```", "```\nlocation /thumbnail {\n\n    image_filter resize 90 90;\n\n    error_page 415 = @empty;\n\n}\nlocation = @empty {\n\n    access_log off;\n\n    empty_gif;\n\n}\n```", "```\nlocation /img {\n\n    image_filter size;\n\n}\n```", "```\n{ \"img\" : { \"width\": 150, \"height\": 200, \"type\": \"png\" } }\n```", "```\nhttp {\n\n    log_format useridcomb '$remote_addr - $uid_got [$time_local] ' \n                    '\"$request\" $status $body_bytes_sent ' \n                    '\"$http_referer\" \"$http_user_agent\"';\n\n    server {\n\n        server_name .example.com;\n\n        access_log logs/example.com-access.log useridcomb;\n\n        userid         on; \n        userid_name    uid; \n\n        userid_domain  example.com; \n\n        userid_path    /; \n\n        userid_expires 365d; \n\n        userid_p3p     'policyref=\"/w3c/p3p.xml\", CP=\"CUR ADM OUR NORSTA NID\"';\n\n    }\n\n}\n```", "```\nlocation ~* \\.php {\n\n    include fastcgi_params;\n\n    fastcgi_pass 127.0.0.1:9000;\n\n}\n```", "```\nlocation ~* \\.php {\n\n    try_files $uri =404;\n\n    include fastcgi_params;\n\n    fastcgi_pass 127.0.0.1:9000;\n\n}\n```"]