- en: Chapter 7. Going Forward with Nginx
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 前进：与 Nginx 一起发展
- en: In the modern, interconnected constantly changing world, nothing ends with the
    last pages of a book, including this one. By the time you read this, some of the
    new features mentioned will have become wildly popular, and some may start their
    way to being obsolete. Nginx as open source software with a highly devoted team
    of developers, vibrant community, and a huge growing install base will have hundreds
    of changes committed and tested. You may wonder whether there is a sure way to
    keep up with it. Is it needed at all? While the current fashion moves in the direction
    of mobile-first, cloud-connected, intelligent Internet of things, the underlying
    protocols and principles remain. HTTP has long moved beyond anything imagined
    by its inventors, and it is living through a new circle of evolution with the
    rapid adoption of HTTP/2 after a long and somewhat controversial period of testing
    in the form of SPDY. Nginx was, and is, there on the frontlines. There is little
    doubt that HTTP in one form or another is here to stay for a long time, and it
    is a safe bet to build a good chunk of your professional career around it, especially
    when such a wonderful tool is readily available in your kit.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代这个互联互通、不断变化的世界里，一本书的最后一页并不意味着一切的结束，包括本书也是如此。当您读到这本书时，书中提到的一些新特性可能已经变得非常流行，而有些特性则可能开始走向过时。作为开源软件，Nginx
    拥有一支高度忠诚的开发团队、活跃的社区以及一个快速增长的安装基础，已经经历了数百次的更改和测试。您或许会想，是否有某种可靠的方式能够跟上它的变化？这一切真的有必要吗？虽然当前的趋势是向移动优先、云连接、智能物联网的方向发展，但底层的协议和原理依然存在。HTTP
    已经远远超出了其发明者的想象，它正在经历一次新的进化周期，在经过 SPDY 长时间且颇具争议的测试阶段后，HTTP/2 得到了快速的采用。Nginx 曾经并且仍然站在了这个前沿。毫无疑问，无论是哪种形式，HTTP
    都将长期存在，而围绕它构建职业生涯是一个稳妥的选择，尤其是在如此强大的工具已轻松可得的情况下。
- en: Although the industry of providing Internet services is still young, the main
    career models are already established. If you love Nginx and have successfully
    read this book, you basically have two main options for moving forward.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管互联网服务行业仍然年轻，但主要的职业发展模式已经确立。如果你热爱 Nginx 并且成功读完了本书，那么基本上你有两个主要的选择来继续前进。
- en: System administration
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统管理
- en: '**System administration** is the art of combining hardware and software together
    so that the sum is much more valuable than all of the parts. If you prefer more
    down-to-earth definitions, system administration is the operations specialist
    responsible for the technical components of business processes or even more to
    the point, web servers hosting websites, web applications, and, increasingly,
    the backend API endpoints. As the industry grew, the difference between software
    engineering and system administration became more important, and most modern businesses
    have separate roles for these jobs. There is a reverse trend of the so-called
    DevOps movement, by the way. DevOps engineers combine the administration (or -ops)
    skills with software development.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**系统管理**是将硬件和软件结合起来的艺术，使得整体的价值远大于各部分的总和。如果您更喜欢务实的定义，系统管理是负责业务流程中技术组件的操作专家，甚至更具体一点，是负责托管网站、Web
    应用程序，越来越多地是后台 API 接口的 Web 服务器的专家。随着行业的发展，软件工程和系统管理之间的区别变得越来越重要，大多数现代企业都有单独的角色来担任这两种工作。顺便提一下，还有一个相反的趋势，即所谓的
    DevOps 运动。DevOps 工程师将管理（或 -ops）技能与软件开发结合在一起。'
- en: This book is mainly for Nginx administrators who work alongside separate development
    teams, and it is very natural to want to become better and more valuable at this
    job. There are several vast fields of knowledge that will make you better at administering
    web servers.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书主要面向与独立开发团队一起工作的 Nginx 管理员，想要在这份工作中变得更好、更有价值是非常自然的。为了更好地管理 Web 服务器，您需要了解多个广阔的知识领域。
- en: Linux/Unix operating system as a whole
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux/Unix 操作系统整体
- en: Linux has long become the de facto standard run web servers, but just being
    familiar with it is not enough. A deep understanding of all the inner workings
    may become a great goal in your career. Starting from the file systems, going
    down to the actual bytes on the disk level, moving to the virtual memory subsystem,
    to processes, signals, and all the ways interprocess communication works is a
    long road to perfection that will pay off tremendously when you face a really
    tricky bug or a vicious attack. We would also recommend looking at other Unix-type
    free operating systems, mostly FreeBSD and OpenBSD, which are certainly worthy
    competitors and have a different set of basic principles at their core. They might
    become your personal favorites and secret weapons. You should intimately know
    all the processes that Nginx consists of, the way they may be controlled, and
    the way they communicate between themselves.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 长期以来已经成为事实上的 Web 服务器标准，但仅仅熟悉它是不够的。深入理解所有内部工作机制可能会成为你职业生涯中的伟大目标。从文件系统开始，到磁盘级别上的实际字节，再到虚拟内存子系统、进程、信号，以及所有进程间通信的方式，这是通向完美的漫长道路，面对棘手的
    bug 或恶意攻击时，这一切将带来巨大的回报。我们还建议你了解其他类 Unix 的自由操作系统，主要是 FreeBSD 和 OpenBSD，它们无疑是值得竞争的对手，并且其核心原则有所不同。它们可能会成为你个人的最爱和秘密武器。你应该非常熟悉
    Nginx 中包含的所有进程，它们如何被控制以及它们之间如何进行通信。
- en: Modern Internet protocols
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现代互联网协议
- en: Included here are the actual protocols and the networking subsystems of the
    relevant operating systems of your web servers and your networking equipment,
    such as switches and routers. Being able to telnet into a web server is essential,
    but this is only the first step. We need to understand the building blocks of
    the whole stack, how the model of operations and the operating systems start from
    low-level frames, move to a couple of layers of packets, then organize connections
    that are both fault-tolerant to an extent and may adapt to different characteristics
    of the underlying medium. The TCP/IP stack does not stand still. You will have
    to learn IPv6 deeply to be relevant in the coming years, for example. The application-level
    HTTP may seem simple at first glance, but you will also need to know everything
    about TLS. Debugging networking in your particular operating system is a whole
    separate discipline in itself. Although good knowledge of the *tcpdump* filter
    language is a very good start, it is usually not enough. Good little examples
    are the Nginx directives `tcp_nopush` and `tcp_nodelay`. Being able to explain
    what effect they have on the connections and predicting the change in user experience
    is what you want.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这里包含了实际的协议和相关操作系统的网络子系统，涉及到你的 Web 服务器和网络设备，如交换机和路由器。能够通过 telnet 连接到 Web 服务器是必不可少的，但这仅仅是第一步。我们需要理解整个技术栈的构建块，操作模型和操作系统如何从低层帧开始，经过几层数据包，再组织出既具容错能力又能适应底层媒介不同特性的连接。TCP/IP
    技术栈并非一成不变。例如，未来几年你必须深入学习 IPv6 才能保持相关性。应用层的 HTTP 看起来可能很简单，但你也需要了解有关 TLS 的一切。调试特定操作系统中的网络是一个完全独立的学科。虽然对
    *tcpdump* 过滤语言的良好掌握是一个非常好的起点，但通常还不够。像 Nginx 指令 `tcp_nopush` 和 `tcp_nodelay` 这样的简单示例非常有用。能够解释它们对连接的影响，并预测用户体验的变化，这正是你所需要的。
- en: Specific backend software used in your company
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你公司使用的特定后台软件
- en: Nginx is never the only software that powers your websites unless you only host
    a lot of static files. The upstream software is more often than not the source
    of problems with your site. Getting a good grasp of how a Ruby-on-Rails or Django
    application operates is not that hard, but being able to successfully deploy,
    monitor, and debug problems with a huge Java-based backend may be a whole new
    full-time job.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你只托管大量静态文件，否则 Nginx 永远不会是唯一支持你网站的软件。上游软件往往是你网站出现问题的根源。掌握 Ruby-on-Rails 或 Django
    应用的工作原理并不困难，但如果能够成功部署、监控并调试一个庞大的基于 Java 的后台，可能就会变成一个全职工作。
- en: Modern cloud platforms
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现代云平台
- en: One of the few contexts where the buzzword "cloud" actually has a meaning, is
    the cloud hosting platforms field pioneered as a mass product by Amazon with its
    **Amazon Web Services** (**AWS**) but now represented by many players. Using one
    of those platforms is a recommended way of hosting a website unless you have very
    specific requirements. And mastering the platform is essential. Simpler solutions
    like the wildly popular Digital Ocean droplets are rather easy and do not diverge
    much from managing a real hardware server. AWS, on the contrary, is a huge ecosystem
    of interconnected complex products, such as databases, queueing/messaging services,
    and other specialized APIs that your developers will love to use. Having knowledge
    and practical experience with different platforms will be a great asset for you.
    By the way, [https://www.nginx.com](https://www.nginx.com) provides prebuilt AMIs
    with Nginx Plus, the commercial version of Nginx, for Amazon EC2 at [https://www.nginx.com/resources/admin-guide/setting-nginx-plus-environment-amazon-ec2/](https://www.nginx.com/resources/admin-guide/setting-nginx-plus-environment-amazon-ec2/).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “云”这一流行词真正有意义的少数几个领域之一就是云托管平台领域，这一领域由亚马逊通过其**Amazon Web Services**（**AWS**）开创并作为大众产品推出，现在有许多参与者。除非你有非常具体的需求，否则使用这些平台之一是托管网站的推荐方式。而且掌握平台的使用至关重要。像广受欢迎的
    Digital Ocean 液态服务器这样的简化解决方案非常容易，并且与管理真实硬件服务器没有太大区别。相反，AWS 是一个巨大的生态系统，包含了多个互联的复杂产品，如数据库、队列/消息服务以及其他开发者会喜欢使用的专用
    API。掌握不同平台的知识和实践经验将是你的一项重要资产。顺便提一下，[https://www.nginx.com](https://www.nginx.com)
    提供了预构建的 Nginx Plus AMI，这是 Nginx 的商业版本，适用于 Amazon EC2，详情请见 [https://www.nginx.com/resources/admin-guide/setting-nginx-plus-environment-amazon-ec2/](https://www.nginx.com/resources/admin-guide/setting-nginx-plus-environment-amazon-ec2/)。
- en: Automation
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化
- en: 'There are two ways to scale manual labor: delegation to other people and automation.
    Although the first option is certainly important, the second is much preferred
    on the basis of cost. Knowing your *shell-fu* is again essential, but do have
    at least one general-purpose scripting language in your toolkit. The current fashion
    is Python or Ruby, whereas Node.js-based Javascript is emerging as another interesting
    choice. Perl is still very strong with its enormous library of open source, mostly
    bad but sometimes very good packages named CPAN. Recent Nginx versions have the
    ability to encapsulate scripting language interpreters into the web server. There
    was an official NginxScript JavaScript interpreter announced during the `nginx.conf`
    2015 conference, and there is also a very popular module that embeds Lua. Refer
    to [https://openresty.org/](https://openresty.org/).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展人工劳动有两种方式：委派给他人和自动化。尽管第一种方式无疑很重要，但从成本角度来看，第二种方式更为优先。掌握你的*shell-fu*技巧再次至关重要，但至少要在工具包中有一门通用的脚本语言。当前的流行语言是
    Python 或 Ruby，而基于 Node.js 的 JavaScript 正成为另一个有趣的选择。Perl 依然非常强大，拥有庞大的开源库，尽管大部分包都不太好，但有时也能找到非常优秀的包，名为
    CPAN。最近的 Nginx 版本具备将脚本语言解释器封装到 Web 服务器中的能力。在 2015 年的 `nginx.conf` 大会上，宣布了官方的 NginxScript
    JavaScript 解释器，还有一个非常流行的模块可以嵌入 Lua。参考 [https://openresty.org/](https://openresty.org/)。
- en: Proper automation skills will open new horizons for you, especially on the modern
    platforms that have APIs for traditionally manual tasks such as launching a new
    server. Automation is the key to scaling beyond a couple of servers to tens, hundreds,
    and more. This is where the DevOps engineering truly shines. Being able to create
    and launch a server farm into production from a script feels like a whole new
    dimension. When speaking about actual programming, there is the second path you
    may choose.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握合适的自动化技能将为你打开新的视野，尤其是在现代平台上，这些平台拥有用于传统人工任务（如启动新服务器）的 API。自动化是将服务器数量从几台扩展到几十台、上百台甚至更多的关键。这正是
    DevOps 工程的真正亮点。能够通过脚本创建并将服务器群集投入生产，感觉就像进入了一个全新的维度。当谈到实际编程时，还有第二条你可以选择的路径。
- en: Software development
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件开发
- en: Nginx is developed by a commercial company having very highly qualified full-time
    paid software engineers. At the same time, the open source version of Nginx, which
    covers 99% of your needs, is always available both as a collection of versioned
    tarballs and as a Mercurial repository with commits history under a very permissive
    BSD license that allows modification and redistribution. This is a unique opportunity
    to learn from a corpus of very effective and professional C code. Nginx supports
    modules, and there are numerous third-party Nginx modules available (see the official
    wiki page [https://www.nginx.com/resources/wiki/modules/](https://www.nginx.com/resources/wiki/modules/)).
    Nginx module development is the main way to customize the software for specific
    needs and is a very valuable skill that you may build your career on.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 由一家商业公司开发，拥有非常高素质的全职付费软件工程师。同时，Nginx 的开源版本覆盖了 99% 的需求，并始终提供版本化的 tarball
    文件和一个包含提交历史的 Mercurial 仓库，采用非常宽松的 BSD 许可证，允许修改和再分发。这是一个从一份非常有效和专业的 C 代码库中学习的独特机会。Nginx
    支持模块，并且有大量第三方 Nginx 模块可用（见官方 wiki 页面 [https://www.nginx.com/resources/wiki/modules/](https://www.nginx.com/resources/wiki/modules/)）。Nginx
    模块开发是定制软件以满足特定需求的主要方式，也是一个非常有价值的技能，你可以在此基础上构建你的职业生涯。
- en: Nginx is written in C language with very little external dependencies. It contains
    its own highly effective library of primitive data structures and algorithms,
    such as hash tables, radix trees, and very efficient self-balancing red-black
    trees. Reading some clean-and-lean code is a special pleasure, and Nginx fully
    delivers on that front.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 是用 C 语言编写的，几乎没有外部依赖。它包含了自己非常高效的原始数据结构和算法库，如哈希表、基数树以及非常高效的自平衡红黑树。阅读一些简洁高效的代码是一种特别的乐趣，而
    Nginx 在这方面完全满足了这一点。
- en: There are success stories about using customized Nginx as a web application
    platform, and for a great example, see the earlier-mentioned OpenResty. Although
    we cannot recommend this approach to businesses yet, being a developer in a company
    that has chosen Nginx as a platform may be a great way to become a rare specialist,
    who are always in high demand.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多成功案例表明定制的 Nginx 被用作 web 应用平台，其中一个很好的例子就是前面提到的 OpenResty。虽然我们目前还不能向企业推荐这种做法，但如果你所在的公司选择
    Nginx 作为平台，作为开发者可能是成为一个稀缺专家的绝佳途径，而这种专家总是非常吃香。
- en: 'The most important benefit that you get from the open nature of Nginx combined
    with software engineering skills is an ultimate troubleshooting method: source-level
    debugging from inside Nginx. Nginx has great logging facilities, but nothing compares
    to the ability to step through critical sections in a debugger or modify the source
    to trigger rare conditions. And this brings us back to the main topic of this
    book. No matter how stable and robust Nginx has become over the years, it is still
    a piece of software that is written by humans and that is run in faulty, unpredictable,
    and mind-bogglingly complex environments. We hope that this book provided you
    with some new tools in your noble quest to run the fastest and the most valuable
    websites you can imagine.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Nginx 的开放性质结合软件工程技能中获得的最重要的好处是最终的故障排除方法：在 Nginx 内部进行源代码级的调试。Nginx 拥有强大的日志功能，但没有什么能比得上在调试器中逐步分析关键代码段或修改源代码以触发罕见条件的能力。这也将我们带回到本书的主要话题。无论
    Nginx 经过多年的发展变得多么稳定和健壮，它仍然是由人编写的一个软件，运行在错误、不可预测且极其复杂的环境中。我们希望本书为你提供了一些新的工具，帮助你在追求运行最快、最有价值网站的崇高目标中更进一步。
- en: Summary
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this final short chapter, we elaborated on different ways the readers may
    choose when they feel like moving forward as professionals with Nginx troubleshooting
    as one of their skills. The industry is so dynamic that you have to run just to
    stay in the same place, and this means learning and trying harder and harder with
    every coming day. We hope that our readers will make the modern web a better,
    more stable, and safe place with all the power that Nginx provides and will provide
    in future versions.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一简短的最后一章中，我们详细阐述了读者在希望将 Nginx 故障排除作为技能之一进一步发展的过程中可能选择的不同方式。这个行业发展迅速，想要原地不动，你就必须不停地奔跑，这意味着每天都要不断学习和尝试。我们希望我们的读者能利用
    Nginx 提供的所有功能，尤其是未来版本中将提供的功能，让现代 web 变得更加美好、稳定和安全。
- en: This (some will say "hopeless") desire for faster, more dependable websites
    and online services was the main motivation for the author of this book. The writing
    process had its easy and rough patches, but in the end, this dream is what always
    powered him. And the book was blessed with wonderful content managers.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这种（有些人会说是“无望的”）对更快、更可靠的网站和在线服务的渴望，是本书作者的主要动机。写作过程有过顺利也有过艰难，但最终，这个梦想始终是他前进的动力。而且，这本书得到了出色的内容经理们的祝福。
