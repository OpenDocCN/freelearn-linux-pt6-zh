["```\nmail {\nauth_http localhost:9000/cgi-bin/auth;\nproxy on;\nimap_capabilities \"IMAP4rev1\" \"UIDPLUS\";\nserver {\nlisten 143;\nprotocol imap;\nserver_name imap.example1.com;\n}\npop3_capabilities \"TOP\" \"USER\";\nserver {\nlisten 110;\nprotocol pop3;\nserver_name pop3.example1.com;\n}\n}\n\n```", "```\nHTTP/1.0 200 OK\nAuth-Status: OK\nAuth-Server: 192.168.1.10\nAuth-Port: 110\nAuth-User: newname\n\n```", "```\nuser nobody;\nworker_processes 1;\nerror_log logs/error.log info;\npid logs/nginx.pid;\nevents {\nworker_connections 1024;\nmulti_accept on;\n}\nhttp {\nperl_modules perl/lib;\nNginxauthentication, setting up for mail servicesperl_require mailauth.pm;\nserver {\nlocation /auth {\nperl mailauth::handler;\n}\n}\n}\nmail {\nauth_http 127.0.0.1:80/auth;\npop3_capabilities \"TOP\" \"USER\";\nimap_capabilities \"IMAP4rev1\" \"UIDPLUS\";\nserver {\nlisten 110;\nprotocol pop3;\nproxy on;\n}\nserver {\nlisten 143;\nprotocol imap;\nproxy on;\n}\n\n```", "```\npackage mailauth;\nuse nginx;\nuse DBI;\nmy $dsn=\"DBI:mysql:database=DBNAME;host=HOSTNAME\";\nour $dbh=DBI->connect_cached($dsn, 'dbusername', 'dbpass', {AutoCommit => 1});\nour $sth=$dbh->prepare(\"select password,mail_server from mailaccounts where username=? limit 1\");\nour $auth_ok;\nour $mail_server_ip={};\nour $protocol_ports={};\n$mail_server_ip->{'mailhost01'}=\"192.168.1.22\";\n$mail_server_ip->{'mailhost02'}=\"192.168.1.33\";\n$protocol_ports->{'pop3'}=110;\n$protocol_ports->{'imap'}=143;\nsub handler {\nmy $r = shift;\n$auth_ok=0;\n$sth->execute($r->header_in(\"Auth-User\"));\nNginxauthentication, setting up for mail servicesmy $hash=$sth->fetchrow_hashref();\n# assuming that the query results password and mail_server\n# assuming that the password is in crypt format\nif (crypt($r->header_in(\"Auth-Pass\"), $hash->{'password'}) eq $r->header_in(\"Auth-Pass\")){\n$auth_ok=1;\n}\nif ($auth_ok==1){\n$r->header_out(\"Auth-Status\", \"OK\") ;\n$r->header_out(\"Auth-Server\", $mail_server_ip->{$hash->{'mail_server'}});\n$r->header_out(\"Auth-Port\", $protocol_ports->{$r->header_in(\"Auth-Protocol\")});\n} else {\n$r->header_out(\"Auth-Status\", \"Invalid login or password\") ;\n}\n$r->send_http_header(\"text/html\");\nreturn OK;\n}\n1;\n__END__\n\n```", "```\nGET /auth HTTP/1.0\nHost: auth.server.hostname\nAuth-Method: plain\nAuth-User: user\nAuth-Pass: password\nAuth-Protocol: imap\nAuth-Login-Attempt: 1\nClient-IP: 192.168.1.1\n\n```", "```\nHTTP/1.0 200 OK\nAuth-Status: OK\nAuth-Server: 192.168.1.22\nAuth-Port: 110\nAuth-User: newname\n\n```", "```\nmail {\nauth_http localhost:9000/cgi-bin/auth;\nproxy on;\nstarttls on; ## enable STARTTLS for all mail servers\n# The config assumes certificates in /etc/nginx/ssl/ and\n# private keys in /etc/nginx/ssl/private/\nssl on;\nssl_prefer_server_ciphers on;\nssl_protocols TLSv1 SSLv3;\nssl_ciphers HIGH:!ADH:!MD5:@STRENGTH;\nssl_session_cache shared:TLSSL:16m;\nssl_session_timeout 10m;\n## default SSL cert. Each host should have its own.\nssl_certificate ssl/wildcard.crt;\nssl_certificate_key ssl/private/wildcard.key;\n## default, STARTTLS is appended because of starttls directive above\nimap_capabilities \"IMAP4rev1\" \"UIDPLUS\";\nserver {\nlisten 143;\nprotocol imap;\nSSLsetting up, for mail authenticationserver_name mx.example1.com;\n}\npop3_capabilities \"TOP\" \"USER\";\nserver {\nlisten 110;\nprotocol pop3;\n}\n}\n\n```", "```\n    ./configure --with-http_dav_module\n    make && make install\n\n    ```", "```\n    root /data/www/www.example1.com;\n    location /files {\n    dav_methods PUT DELETE MKCOL COPY MOVE;\n    create_full_put_path on;\n    dav_access group:rw all:r;\n    limit_except GET {\n    allow 192.168.1.0/32;\n    deny all;\n    }\n    }\n\n    ```", "```\n/etc/init.d/nginx restart\n\n```", "```\n    ./configure -with-http_image_filter_module\n    Make && make install\n\n    ```", "```\n    location /img/ {\n    proxy_pass http://backend;\n    image_filter resize 150 100;\n    error_page 415 = /empty;\n    }\n    location = /empty {\n    empty_gif;\n    }\n\n    ```", "```\n    /etc/init.d/nginx restart\n\n    ```", "```\n    ./configure --with-http_sub_module\n    Make && make install\n\n    ```", "```\n    Server {\n    Server_name www.example1.com;\n    ...\n    location / {\n    ...\n    sub_filter 'bad_word' '**This is censored**';\n    sub_filter_once off;\n    }\n    }\n\n    ```", "```\n/et/init.d/nginx restart\n\n```", "```\n    wget http://wiki.nginx.org/images/6/61/Mod_zip-1.1.6.tar.gz\n    tar -xvzf Mod_zip-1.1.6.tar.gz\n    cd nginx\n    ./configure --add-module=../Mod_zip-1.1.6\n    make && make install\n\n    ```", "```\n    /etc/init.d/nginx restart\n\n    ```", "```\n    - 428 /test1.txt Test file 1.txt\n    - 100339 /test2.txt Test file 2.txt\n\n    ```", "```\n    wget http://pushmodule.slact.net/downloads/nginx_http_push_module-0.692.tar.gz\n    tar -xvzf nginx_http_push_module-0.692.tar.gz\n    cd nginx\n    ./configure --add-module=../nginx_http_push_module-0.692\n    make && make install\n\n    ```", "```\n    # internal publish endpoint (keep it private / protected)\n    location /publish {\n    set $push_channel_id $arg_id; #/?id=239aff3 or somesuch\n    push_publisher;\n    push_store_messages on; # enable message queueing\n    push_message_timeout 2h; # expire buffered messages after 2 hours\n    push_max_message_buffer_length 10; # store 10 messages\n    push_min_message_recipients 0; # minimum recipients before purge\n    }\n    # public long-polling endpoint\n    location /activity {\n    push_subscriber;\n    push_subscriber_concurrency broadcast;\n    set $push_channel_id $arg_id;\n    default_type text/plain;\n    }\n\n    ```", "```\n/etc/init.d/nginx restart\n\n```", "```\n    ./configure --with-http_xslt_module\n    make && make install\n\n    ```", "```\n    server {\n    server_name www.example1.com;\n    . . .\n    location / {\n    . . .\n    }\n    location /xml_api {\n    xml_entities /site/dtd/entities.dtd;\n    xslt_stylesheet /site/xslt/one.xslt param1=\"value\";\n    . . .\n    }\n    }\n\n    ```", "```\n/etc/init.d/nginx restart\n\n```", "```\n    git clone git://github.com/mikewest/nginx-static-etags.git ./nginx-static-etags\n    cd nginx\n    ./configure --add-module=../nginx-static-etags\n    make && make install\n\n    ```", "```\n    location / {\n    ...\n    FileETag on;\n    ...\n    }\n\n    ```", "```\n/etc/init.d/nginx restart\n\n```", "```\n    wget http://wiki.nginx.org/images/7/78/Ngx_http_log_request_speed.tar.gz\n    tar -xvzf Ngx_http_log_request_speed.tar.gz\n    cd nginx\n    ./configure --add-module=../Ngx_http_log_request_speed\n    make && make install\n\n    ```", "```\n    user www www;\n    worker_processes 2;\n    error_log logs/error.log;\n    pid logs/nginx.pid;\n    events {\n    worker_connections 1024;\n    }\n    http {\n    log_request_speed_filter on;\n    log_request_speed_filter_timeout 3;\n    . . .\n    }\n\n    ```", "```\n    /etc/init.d/nginx restart\n\n    ```", "```\nwget http://wiki.nginx.org/images/a/a8/Log_Analyzer.tar.gz\ncd Log_Analyzer\ntail -n 10000 /var/log/nginx/error.log | grep 'process request' | ./analyzer.pl -r\nPOST /message/ajaxWrite/from_profile/toni32 HTTP/1.1 --- avg ms: 3110, value count: 1\nPOST /sessionupdate_prod.php HTTP/1.1 --- avg ms: 3312, value count: 137\nGET /favoriten/1 HTTP/1.1 --- avg ms: 3345, value count: 76\nGET /nachrichten/read/in/neu/369217567 HTTP/1.1 --- avg ms: 3737, value count: 1\nPOST /login_prod.php HTTP/1.1 --- avg ms: 4117, value count: 14\nGET /wan/isonline?NICKNAME=luckynight&rtime=1259292758 HTTP/1.1 --- avg ms: 5267, value count: 1\nGET /sessionupdate_prod.php HTTP/1.1 --- avg ms: 5572, value count: 8\n\n```", "```\n    wget http://i.6.cn/nginx_mp4_streaming_public_20081229.tar.bz2\n    tar -xvjf nginx_mp4_streaming_public_20081229.tar.bz2\n    cd nginx\n    ./configure --add-module=../nginx_mp4_streaming_public_20081229\n    make && make install\n\n    ```", "```\n    server {\n    server_name www.example1.com;\n    . . .\n    root /var/www/www.example1.com;\n    location / {\n    . . .\n    }\n    location /videos {\n    mp4;\n    . . .\n    }\n    }\n\n    ```", "```\n/etc/init.d/nginx restart\n\n```", "```\nhttp {\nscgi_cache_path /usr/local/nginx/temp levels=1:2\nkeys_zone=NAME:10m\ninactive=5m;\nserver {\nlocation / {\nscgi_pass 127.0.0.1:9000;\nscgi_cache NAME;\nscgi_cache_valid 200 302 1h;\nscgi_cache_valid 301 1d;\nscgi_cache_valid any 1m;\nscgi_cache_min_uses 1;\nscgi_cache_use_stale error timeout invalid_header http_500;\n}\n}\n\n```", "```\n    git clone https://github.com/replay/ngx_http_secure_download.git\n    cd nginx\n    ./configure --add-module=../ngx_http_secure_download\n    make && make install\n\n    ```", "```\n    location /timedfolder {\n    secure_download on;\n    secure_download_secret IAmSalt$remote_addr;\n    secure_download_path_mode file;\n    if ($secure_download = \"-1\") {\n    rewrite /expired.html break;\n    }\n    if ($secure_download = \"-2\") {\n    rewrite /bad_hash.html break;\n    }\n    if ($secure_download = \"-3\") {\n    return 500;\n    }\n    rewrite ^(.*)/[0-9a-zA-Z]*/[0-9a-zA-Z]*$ $1 break;\n    }\n\n    ```", "```\n/etc/init.d/nginx restart\n\n```"]