["```\nroot@nginx:~# curl https://get.acme.sh | sh\n```", "```\nroot@nginx:~# acme.sh --version\nhttps://github.com/acmesh-official/acme.sh\nv3.0.8\n```", "```\nSAVED_CF_Key='abcd1234'\nSAVED_CF_Email=my-cloudflare-account@personal.email\n```", "```\nroot@nginx:~# acme.sh --issue --dns dns_cf -d example.com -d *.example.com\n```", "```\n ssl_certificate /root/.acme.sh/example.com/fullchain.cer;\n ssl_certificate_key /root/.acme.sh/example.com/example.com.key;\n ssl_protocols TLSv1.3;\n ssl_prefer_server_ciphers off;\n ssl_session_cache  builtin:1000  shared:SSL:10m;\n ssl_session_tickets on;\n ssl_stapling on;\n ssl_stapling_verify on;\n```", "```\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n…\n}\n```", "```\n# apt install mysql-server php8.1-fpm php8.1-mysql php8.1-gd php8.1-xml php8.1-mbstring php8.1-curl php8.1-zip\n```", "```\n# dnf install mysql-server php8.1-fpm php8.1-mysqlnd php8.1-gd php8.1-xml php8.1-mbstring php8.1-curl php8.1-zip\n```", "```\n[wordpress]\n```", "```\n; Specify user account and group for the pool \n; We assume that you created a \"wordpress\" user and group  \nuser=wordpress \ngroup=wordpress \n; Network interface and listening port \n; Use 127.0.0.1 if Nginx runs on the same machine \nlisten=127.0.0.1:9000 \n; Only allow connections from local computer \n; Change this value if Nginx runs on a different machine \nallowed_clients=127.0.0.1\n```", "```\nchroot /home/wordpress/www;\n```", "```\n     # mysql -u root -p\n    ```", "```\n    wordpress database (don’t forget to specify a complex enough password):\n\n    ```", "```\n    mysql> exit \n    # mysql -u wordpress -p \n    wordpress database you created a minute ago.\n    ```", "```\n\n    ```", "```\n/home/wordpress/www# wget https://wordpress.org/latest.tar.gz\n/home/wordpress/www# tar xzf latest.tar.gz\n/home/wordpress/www# mv ./wordpress/* ./ && rm -r ./wordpress\n```", "```\n/home/wordpress/www# chown -R wordpress ./\n/home/wordpress/www# chgrp -R wordpress ./\n/home/wordpress/www# chmod -R 0644 ./\n```", "```\n# Sets the user and group under which the worker processes  \n# will run. The following values are valid assuming your server  \n# will only be hosting one website.  \nuser wordpress wordpress; \nworker_processes 8; # 1 process per core \npid /var/run/nginx.pid; \n\nevents { \n# Edit this value depending on your server hardware \n   worker_connections 768; \n} \n\nhttp { \n   # Core settings affecting I/O \n   sendfile on; \n   tcp_nopush on; \n   tcp_nodelay on; \n\n   # Default Nginx values \n   keepalive_timeout 65; \n   types_hash_max_size 2048; \n   include /etc/nginx/mime.types; \n   default_type application/octet-stream; \n\n   # Set access and error log paths \n   access_log /var/log/nginx/access.log; \n   error_log /var/log/nginx/error.log; \n\n   # Enable gzipping of files matching the given mime types \n   gzip on; \n\n   gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript; \n\n   # Include virtual host configuration files; \n   # Edit path accordingly \n   include /etc/nginx/sites-enabled/*; \n}\n```", "```\nserver {\n#Default server on port 80\n  Listen [::]:80 default_server;\n  listen 80 default_server;\n  server_name _;\n#Always redirect to https\n  return 301 https://$host$request_uri;\n}\nserver { \n   # Listen on all network interfaces on port 443 SSL and HTTP2 \n   listen 443 ssl http2;\n   listen [::]:443 ssl http2;\n   #Include ssl.conf created earlier\n   include ssl.conf\n\n   # Specify the host name(s) that will match the site \n   # The following value allows both www. and no subdomain \n   server_name .example.com; \n\n   # Set the path of your WordPress files \n   root /home/wordpress/www; \n\n   # Automatically load index.php \n   index index.php; \n\n   # Saves client request body into files, cleaning up afterwards \n   client_body_in_file_only clean; \n   client_body_buffer_size 32K; \n\n   # Allow uploaded files up to 300 megabytes \n   client_max_body_size 300M; \n\n   # Automatically close connections if no data is  \n   # transmitted to the client for a period of 10 seconds \n   send_timeout 10s; \n\n   # The rest of the configuration (location blocks)  \n   # is found below \n   [...] \n}\n```", "```\n   # The following applies to static files:  \n   # images, CSS, javascript \n   location ~* ^.+.(jpg|jpeg|png|gif|ico|css|js)$ { \n         access_log off; # Disable logging \n         # Allow client browsers to cache files  \n         # for a long period of time \n         expires max;  \n   } \n\n   # The following applies to every request \n   location / { \n      # Try serving the requested URI: \n      # - If the file does not exist, append / \n      # - If the directory does not exist,  \n      # redirect to /index.php forwarding the request URI \n      # and other request arguments \n         try_files $uri $uri/ /index.php?q=$uri&$args; \n   } \n\n   # The following applies to every PHP file \n   location ~ .php$ { \n         # Ensure file really exists \n            if (!-e $request_filename) { \n                  return 404; \n            } \n            # Pass the request to your PHP-FPM backend \n            fastcgi_pass 127.0.0.1:9000; \n         fastcgi_index index.php; \n         fastcgi_param PATH_INFO $fastcgi_script_name; \n         include fastcgi_params; \n   }\n}\n```", "```\n    services:\n      nextcloud-aio-mastercontainer:\n        image: nextcloud/all-in-one:latest\n        init: true\n        restart: always\n        container_name: nextcloud-aio-mastercontainer\n        volumes:\n          - nextcloud_aio_mastercontainer:/mnt/docker-aio-config\n          - /var/run/docker.sock:/var/run/docker.sock:ro\n        ports:\n          - 8080:8080\n          - \"127.0.0.1:11000:11000\"\n        environment:\n          - APACHE_PORT=11000\n    volumes:\n      nextcloud_aio_mastercontainer:\n        name: nextcloud_aio_mastercontainer\n    ```", "```\n    /etc/nginx/sites-enabled/nextcloud.conf:\n\n    ```", "```\n\n    ```"]