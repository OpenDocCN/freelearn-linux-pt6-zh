- en: 'Chapter 6. Setting Up Applications: FCGI and WSGI Modules'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a PHP FCGI site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a Python site using uWSGI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying FCGI timeouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizing FCGI cache to speed it up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using multiple FCGI backends
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a practical section devoted to helping programmers and system administrators
    to understand and install their applications using Nginx as the web server. Due
    to the lack of integrated modules for running PHP and Python, the setting up of
    such systems can be an issue for non-experienced system administrators.
  prefs: []
  type: TYPE_NORMAL
- en: Nginx is designed to be a framework to handle native web and mail protocols
    using an event driven mechanism. Most of the web server-application interfaces
    have been added to the main web server later. Over time, CGI has evolved into
    many forms. It has resulted FCGI, SCGI, and similar protocol WSGI for python.
    The goal at the end of the day for all these protocols is to effectively communicate
    with the web server in a standardized format with the lowest possible language
    overheads.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a PHP FCGI site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe helps you to set up a PHP site using Nginx and PHP-fpm fairly easily
    and quickly. Nginx, unlike Apache, does not have `mod_php` built into it and remains
    a standalone web server which supports many standard protocols such as CGI, FCGI,
    SCGI, WSGI, and more through core and third-party modules.
  prefs: []
  type: TYPE_NORMAL
- en: PHP-fpm is a set of utilities and scripts that enables the system administrator
    to easily run and manage a PHP FCGI backend. This is officially available as a
    part of the PHP5.3.x stable and would become a major part of PHP deployment going
    forward.
  prefs: []
  type: TYPE_NORMAL
- en: We will initially have a look at how to set up php-fpm and then see a simple
    WordPress site being configured using this setup.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This will be divided into two sections; one which will help you install php-fpm
    and the other which will help you configure WordPress on Nginx using this setup.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing php-fpm for PHP 5.2.x**'
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your system and PHP requirements you will need to either download
    the packages [deb/rpm] or the source code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are lucky, you can work with the packages you can download from [http://php-fpm.org/download/](http://php-fpm.org/download/)
    depending on the version of PHP that you have.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are not in luck for the packages, you will need to follow the guide
    on the following site: [http://legacy.php-fpm.org/Documentation](http://legacy.php-fpm.org/Documentation).
    In this guide you will effectively download the latest patch for PHP 5.2.X and
    then apply the patch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After the installation is done, you can start the php-fpm daemon process. This
    will by default run on the 9000 port (or you can configure it according to your
    needs).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Configuring WordPress**'
  prefs: []
  type: TYPE_NORMAL
- en: Now we will simply create a new configuration for the WordPress site that you
    plan to run with Nginx and PHP-FPM. This assumes that the php-fpm is listening
    on port 9000.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now all you need to do is restart Nginx and make sure that it accepts the configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After this, we can access the domain that has been set up and that will redirect
    you to the installation page, as displayed in the following screenshot:![How to
    do it...](img/4965_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will need to make sure that you have created a MySQL database on your system,
    as the next installation screen requires you to enter the database information:![How
    to do it...](img/4965_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you will have got your PHP WordPress blog up and running!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/4965_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Depending on the operating system and PHP version, you will have to choose the
    correct method of installing php-fpm. After the installation, you will need to
    start the php-fpm daemon installed on a port that is not already in use by any
    other application.
  prefs: []
  type: TYPE_NORMAL
- en: The Nginx configuration step involves setting up a server directive which will
    basically invoke the daemon with the HTTP request and the script being queried.
    We are also handling WordPress clean URLs using the above rewrites.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also go ahead and install other PHP applications without any clean URLs
    by simply using the following sample configuration! In this case, we do not require
    any of the static files and clean URL rewrites.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Setting up a Python site using uWSGI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python has seen an immense rise of popularity ever since it was adopted by Google
    for a significant part of its server side scripting. It has garnered significant
    support from the industry and consequently warrants attention in this practical
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: There has been development of **Web Server Gateway Interface** (WSGI) which
    acts as a simple and universal interface between a web server and the various
    Python frameworks that have come up in recent times. In this recipe, we will use
    a sample installation of Django, which is a Python web framework, to show how
    we can get Nginx and python to work together.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For setting up a simple python, we will look at three parts. The first part
    will deal with the installation of uWSGI (`http://projects.unbit.it/uwsgi/wiki`),
    the second will deal with the setting up a very basic Django installation, and
    the last will deal with how to get them all working together.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installation of uWSGI**'
  prefs: []
  type: TYPE_NORMAL
- en: If you are using a Nginx which is greater than 0.8.4 then uWSGI is already installed
    on your server. Otherwise you will need to follow the steps below. It is also
    assumed that you have root privileges or `sudo` access to the server on which
    the installation is to be done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download the uWSGI module at the same level of your Nginx source code directory
    and then configure the package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: wget [http://projects.unbit.it/downloads/uwsgi-0.9.6.5.tar.gz](http://projects.unbit.it/downloads/uwsgi-0.9.6.5.tar.gz
    )
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will install the uWSGI module for your Nginx setup. You will also need
    to copy the `uwsgi_params` file into your Nginx installation directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Basic Django setup with WSGI script**'
  prefs: []
  type: TYPE_NORMAL
- en: We will first install the easy_install script from [http://peak.telecommunity.com/dist/ez_setup.py](http://peak.telecommunity.com/dist/ez_setup.py)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will then install the Django package using `easy_install`, this will handle
    all the dependencies and install them for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After this, we will start a new project called `test`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now test if it is running or not by simply going into the test directory
    and invoking the in-built development server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/4965_06_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We will now create the WSGI file that will run this test setup. You will need
    to go above the test directory and create a new file called `django_wsgi.py:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will now need to run a uWSGI instance for this site using the following
    command. This assumes that the project was created at `/var/www/` and the port
    that uWSGI will use is 3031.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Nginx with uWSGI**'
  prefs: []
  type: TYPE_NORMAL
- en: 'For running this test Django site, you will need to add the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will need to restart the Nginx web server and then you can try visiting
    your site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/4965_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The idea behind uWSGI is to provide a common protocol between the application
    and the web server so that you can plug and play depending on your needs. In this
    recipe, we can clearly see how one can go about uWSGI, which in some cases already
    comes as a part of the Nginx source package. We can see how to create and get
    a small Django application running.
  prefs: []
  type: TYPE_NORMAL
- en: So the uWSGI daemon runs on the 3031 port in our example and Nginx basically
    converts the HTTP requests into the WSGI protocol and proxies them to the daemon.
    uWSGI provides quite a lot of features which allow you to also manage the python
    overheads properly.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can take this simple example and extend it to most other python frameworks.
    Here is a really small standalone python script for `web.py` developers. Save
    this as `django_usgi2.py:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To run this use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Modifying FCGI timeouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have already discovered the various possibilities of how to set up PHP
    with Nginx, it will become clear that FCGI is a fairly optimal setup for low to
    medium traffic environments for PHP and Python, where RAM is a constraint.
  prefs: []
  type: TYPE_NORMAL
- en: In situations where due to resource constraints or time-consuming computation
    the FCGI daemon is not able to send back a response quickly enough, the user is
    made to wait and this lowers the quality of experience for the site.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to increase your FCGI timeout from the default 60 second you will
    need to add the following to your FCGI directives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These simple directives simply increase the amount of time the server waits
    for the upstream FCGI process to process and send data. This is important as other
    directives like `send_timeout` and `proxy_connect_timeout` do not affect the Nginx
    FCGI upstream setting.
  prefs: []
  type: TYPE_NORMAL
- en: We are utilizing the same Nginx setup from the recipe use to set up PHP-fpm
    with Nginx in the above configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing FCGI cache to speed it up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Due to the disconnected nature of the Nginx and the FCGI daemon, a cache in
    between can really speed things up for common requests. If set up correctly it
    can do wonders for a site and the server as the CPU will not be utilized unnecessarily.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is pretty easy to setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we are setting up a cache called `NAME` and setting it up for
    the site, with an hour of caching on any site that was successfully retrieved,
    while very low caching for error pages.
  prefs: []
  type: TYPE_NORMAL
- en: The `fastcgi_cache_path` directive specifies the path to the cache storage and
    other cache parameters. All data is stored within this directive, the cache key
    and the name of the cache file are calculated as the MD5 sum of the proxied URL.
    The levels parameter sets the number and width of the name of the sub directories
    to be used in the caching file location. The size has been set to 10M in the current
    example, and by default, entries are removed from the chache if inactive for ten
    minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table summarizes the various directives and their use:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Directive | Use |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| fastcgi_cache | This determines the area which will be utilized for caching
    |'
  prefs: []
  type: TYPE_TB
- en: '| fastcgi_cache_key | This sets the key that will be used for caching |'
  prefs: []
  type: TYPE_TB
- en: '| fastcgi_cache_path | This sets the path and other critical parameters for
    the cache being created |'
  prefs: []
  type: TYPE_TB
- en: '| fastcgi_cache_methods | This sets which HTTP methods are to be allowed while
    caching |'
  prefs: []
  type: TYPE_TB
- en: '| fastcgi_cache_min_uses | This specifies how many requests to the same URL
    will be cached |'
  prefs: []
  type: TYPE_TB
- en: '| fastcgi_cache_use_stale | This determines if the web server will start serving
    stale cached data in case of gateway errors |'
  prefs: []
  type: TYPE_TB
- en: '| fastcgi_cache_valid | This sets the caching period for the specified HTTP
    codes |'
  prefs: []
  type: TYPE_TB
- en: Using multiple FCGI backends
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at how to work with multiple FCGI backends on the
    system. This can happen in a system where you have multiple types of applications
    running, such as a PHP application, a Python FCGI application, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: It can also be the case that you want to isolate two application backends to
    prevent performance issues between them, as one slow application would definitely
    tie the other one down.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is fairly straightforward, as you can create a simple `fcgi_common` file
    that will contain the common FCGI configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You will then need to use the following configuration and put it in the Nginx
    configuration file at `sites-enabled/www.example1.com:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You will then need to use the following configuration and put it in the Nginx
    configuration file at `sites-enabled/www.example2.com`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This setup basically lets you take out the common parts of the FCGI directives
    and have a clean setup for as many sites as you want.
  prefs: []
  type: TYPE_NORMAL
- en: If you notice, with this setup the rewrites specific for the clean URLs of an
    application are the only extra directives that are required.
  prefs: []
  type: TYPE_NORMAL
