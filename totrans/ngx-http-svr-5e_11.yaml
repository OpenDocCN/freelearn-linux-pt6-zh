- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Troubleshooting
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除
- en: Even if you read every single word of this book with the utmost attention, you
    will not unfortunately be sheltered from all kinds of issues, ranging from simple
    configuration errors to the occasional unexpected behavior of one module or another.
    To help you with that, in this chapter, we will attempt to provide solutions for
    some of the common problems encountered by administrators who are just getting
    started with NGINX.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你认真阅读了本书的每一个字，也无法避免各种问题，从简单的配置错误到偶尔出现的模块意外行为。为了帮助你，在本章中，我们将尝试提供一些常见问题的解决方案，尤其是那些刚开始使用
    NGINX 的管理员可能遇到的。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涉及以下主题：
- en: A basic guide containing general tips on NGINX troubleshooting
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含常见 NGINX 故障排除技巧的基本指南
- en: How to solve some of the most common install issues
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何解决一些最常见的安装问题
- en: Dealing with `403 Forbidden` and `400 Bad Request` HTTP errors and more
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理 `403 Forbidden` 和 `400 Bad Request` HTTP 错误等
- en: Why your configuration does not appear to apply correctly
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么你的配置似乎没有正确应用
- en: A few words about the `if` block behavior
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 `if` 块行为的一些话
- en: Looking at some general tips on NGINX troubleshooting
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 看看一些关于 NGINX 故障排除的一般技巧
- en: Before we begin, whenever you run into some kind of problem with NGINX, you
    should make sure to follow the recommendations given in the following sections,
    as they are generally a good source of solutions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，每当你遇到与 NGINX 相关的问题时，应该确保遵循以下章节中给出的建议，因为它们通常是解决方案的良好来源。
- en: Checking access permissions
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查访问权限
- en: 'A lot of errors that NGINX administrators are faced with are caused by invalid
    access permissions. On two separate occasions, you have the option to specify
    a user and group for the NGINX worker processes to run:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 很多 NGINX 管理员面临的错误都是由无效的访问权限引起的。在两个不同的情况下，你可以为 NGINX 工作进程指定一个用户和组来运行：
- en: When configuring the build with the `configure` command, you are allowed to
    specify a user and group that will be used by default (refer to [*Chapter 1*](B21787_01.xhtml#_idTextAnchor014)).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用 `configure` 命令配置构建时，你可以指定一个将作为默认使用的用户和组（参见 [*第 1 章*](B21787_01.xhtml#_idTextAnchor014)）。
- en: In the configuration file, the `user` directive allows you to specify a user
    and group. This directive overrides the value that you may have defined during
    the `configure` step.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在配置文件中，`user` 指令允许你指定用户和组。此指令将覆盖你在 `configure` 步骤中可能已定义的值。
- en: If NGINX is supposed to access files that do not have the correct permissions,
    in other words, that cannot be read (and by extension, cannot be written for directories
    that hold temporary files, for example) by the specified user and group, NGINX
    will not be able to serve files correctly. Additionally, should your web application
    encounter an error related to file- or directory-access permissions, the user
    and group under which your FastCGI or other backend runs should also be investigated.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 NGINX 需要访问没有正确权限的文件，换句话说，如果指定的用户和组无法读取这些文件（例如，对于保存临时文件的目录，无法写入），NGINX 将无法正确提供文件。此外，如果你的
    Web 应用程序遇到与文件或目录访问权限相关的错误，应该检查运行 FastCGI 或其他后端的用户和组。
- en: Testing your configuration
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试你的配置
- en: 'A common mistake is often made by administrators showing a little too much
    self-confidence: after having modified the configuration file (often without a
    backup), they reload NGINX to apply the new configuration. If the configuration
    file contains syntax or semantic errors, the application will refuse to reload.
    Even worse, if NGINX is stopped (for example, after a complete server reboot)
    it will refuse to start at all. In either of those cases, remember to follow these
    recommendations:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的错误是一些管理员显示出过多的自信：在修改了配置文件后（通常没有备份），他们会重新加载 NGINX 来应用新的配置。如果配置文件中包含语法或语义错误，应用程序将拒绝重新加载。更糟的是，如果
    NGINX 停止（例如，在完全重启服务器后），它将根本无法启动。在这两种情况下，请记得遵循以下建议：
- en: Always keep a backup of your working configuration files in case something goes
    wrong
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终保留一个工作配置文件的备份，以防出现问题
- en: Before reloading or restarting NGINX, test your configuration with a simple
    command, `nginx -t`, to test your current configuration files, or run `nginx -t
    -``c /path/to/config/file.conf`
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在重新加载或重启 NGINX 之前，使用简单的命令 `nginx -t` 测试你的当前配置文件，或者运行 `nginx -t -c /path/to/config/file.conf`。
- en: Reload your server instead of restarting it, preferring `systemctl reload nginx`
    over `systemctl restart nginx` (and `nginx -s reload` instead of `nginx -s stop
    && nginx`), as it will keep existing connections alive, and thus won’t interrupt
    ongoing file downloads
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新加载服务器，而不是重新启动它，应该使用`systemctl reload nginx`而不是`systemctl restart nginx`（以及`nginx
    -s reload`代替`nginx -s stop && nginx`），因为这将保持现有连接活跃，从而不会中断正在进行的文件下载。
- en: Have you reloaded the service?
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你是否重新加载了服务？
- en: 'You would be surprised to learn how often this happens: the most complicated
    situations have the simplest solutions. Before tearing your hair out, before rushing
    to the forums or IRC asking for help, start with the most simple of verifications.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你会惊讶地发现，这种情况发生得多么频繁：最复杂的问题往往有最简单的解决方法。在抓狂之前，在匆忙去论坛或IRC寻求帮助之前，从最简单的验证开始。
- en: You just spent two hours creating your virtual host configuration. You’ve saved
    the files properly and have fired up your web browser to check the results. But
    did you remember that one additional step? NGINX, unlike Apache, does not support
    on-the-fly configuration changes in `.htaccess` files or similar. So take a moment
    to make sure you have reloaded NGINX with `systemctl reload nginx` or `/usr/local/nginx/sbin/nginx
    -s reload`, without forgetting to test your configuration beforehand!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚花了两个小时创建虚拟主机配置。你已经正确保存了文件并启动了浏览器检查结果。但是你记得那一步吗？与Apache不同，NGINX不支持在`.htaccess`文件或类似文件中进行动态配置更改。所以请花点时间确保你已经通过`systemctl
    reload nginx`或`/usr/local/nginx/sbin/nginx -s reload`重新加载了NGINX，并且在此之前别忘了测试配置！
- en: Checking logs
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查日志
- en: 'There is usually no need to look for the answer to your problems on the internet.
    Chances are, the answer is already given to you by NGINX in the log files. There
    are two variations of log files you may want to check. First, check the access
    logs. These contain information about requests themselves: the request method
    and URI, the HTTP response code issued by NGINX, and more, depending on the log
    format you defined:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通常无需在互联网上查找问题的答案。很可能，答案已经通过NGINX的日志文件提供给你。你可能需要查看两种类型的日志文件。首先，检查访问日志。这些日志包含有关请求本身的信息：请求方法和URI，NGINX发出的HTTP响应码等，具体取决于你定义的日志格式：
- en: '![Figure 11.1: An extract of the Nginx error log for troubleshooting and debugging
    purposes](img/B21787_11_1.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.1：用于故障排除和调试的Nginx错误日志摘录](img/B21787_11_1.jpg)'
- en: 'Figure 11.1: An extract of the Nginx error log for troubleshooting and debugging
    purposes'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1：用于故障排除和调试的Nginx错误日志摘录
- en: More importantly, for troubleshooting, the error log is a goldmine of information.
    Depending on the level you defined (see the `error_log` and `debug_connection`
    directives for more details), NGINX will provide details on its inner functioning.
    For example, you will be able to see the request URI translated to the actual
    filesystem path. This can be a great help for debugging rewrite rules. The error
    log should be located in the `/logs/` directory of your NGINX setup, by default
    `/usr/local/nginx/logs` or `/var/log/nginx`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，对于故障排除，错误日志是信息的宝库。根据你定义的日志级别（有关更多细节，请参见`error_log`和`debug_connection`指令），NGINX会提供其内部运行的详细信息。例如，你将能够看到请求URI转化为实际的文件系统路径。这对于调试重写规则非常有帮助。错误日志应该位于NGINX设置的`/logs/`目录中，默认路径是`/usr/local/nginx/logs`或`/var/log/nginx`。
- en: In this section, we learned how to troubleshoot NGINX running errors. Moving
    forward, we’ll explore the use of external tools to streamline the aggregation
    of NGINX errors for more efficient troubleshooting.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中，我们学习了如何排查NGINX运行错误。接下来，我们将探索使用外部工具来简化NGINX错误的聚合，以提高故障排除效率。
- en: Installing a log parser
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装日志解析器
- en: While NGINX has great logs, at some of the higher levels of logging, they can
    also be quite exhaustive in the amount of information they log. A good way to
    not miss information and get a high-level overview of what is going on with NGINX
    is to install a log parser that can aggregate information and display it in a
    more approachable format.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然NGINX有很好的日志，但在某些更高级别的日志记录下，它们也可能记录大量信息。一个不错的方法是安装日志解析器，它能够聚合信息，并以更易于理解的格式显示，从而帮助你不会错过任何信息，并能快速了解NGINX的运行情况。
- en: Note
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: One open source tool we can use for this is called **GoAccess**. More info can
    be found on its website at [https://goaccess.io/](https://goaccess.io/).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用的一个开源工具叫做**GoAccess**。更多信息可以在其官网找到：[https://goaccess.io/](https://goaccess.io/)。
- en: 'The good thing about GoAccess, aside from being free and open source, is that
    it can be accessed through both the Terminal and your browser. Therefore, it can
    function as both a monitoring tool that you run in your Terminal and as a reporting
    tool that generates a kind of dashboard for your stats:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: GoAccess 的优点，除了免费和开源之外，还在于它可以通过终端和浏览器访问。因此，它可以作为一个监控工具运行在你的终端上，同时也可以作为一个生成统计仪表盘的报告工具：
- en: '![Figure 11.2: GoAccess analyzing and organizing Nginx logs for a clear view](img/B21787_11_2.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.2：GoAccess 分析和整理 Nginx 日志，以便清晰查看](img/B21787_11_2.jpg)'
- en: 'Figure 11.2: GoAccess analyzing and organizing Nginx logs for a clear view'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2：GoAccess 分析和整理 Nginx 日志，以便清晰查看
- en: 'To get started and install GoAccess, you can either check your distribution
    package manager (whether with `apt`, `dnf` or else) or download and compile it
    manually:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始并安装 GoAccess，你可以查看你的发行版包管理器（无论是 `apt`、`dnf` 还是其他）或手动下载并编译：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once installed, using it is very straightforward; you can get a Terminal view
    by running the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装完成，使用起来非常简单；你可以通过运行以下命令来获得终端视图：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here, the `COMBINED` log format refers to the default log format of NGINX,
    but it is also compatible with Apache HTTPd logs. If you want to get an HTML report
    that you can view in a browser, or perhaps email to someone for reporting, then
    run the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的 `COMBINED` 日志格式指的是 NGINX 的默认日志格式，但它也与 Apache HTTPd 的日志兼容。如果你想获得一个可以在浏览器中查看的
    HTML 报告，或者将其通过电子邮件发送给某人以进行报告，可以运行以下命令：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A neat feature of GoAccess is that it can also provide a real-time auto-updating
    HTML page by using the `--real-time-html` flag. Enabling this will add some WebSocket
    code to the report that will fetch the latest stats continuously. Create a location
    block for your report and point it to your `report.html` to have a report always
    available online.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: GoAccess 的一个很酷的功能是，它还可以通过使用 `--real-time-html` 标志提供一个实时自动更新的 HTML 页面。启用此功能将向报告中添加一些
    WebSocket 代码，持续获取最新的统计数据。为你的报告创建一个位置块，并将其指向 `report.html`，这样报告就可以始终在线查看。
- en: We’ve covered how to handle NGINX log errors. Up next, we’ll dive into the challenges
    of compiling and installing NGINX.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讲解了如何处理 NGINX 日志错误。接下来，我们将深入探讨编译和安装 NGINX 的挑战。
- en: Troubleshooting install issues
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排查安装问题
- en: 'There are typically four sources of errors when attempting to install NGINX
    or to run it for the first time:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试安装 NGINX 或首次运行时，通常会遇到四种错误来源：
- en: Some of the prerequisites are missing or an invalid path to the source was specified.
    More details about prerequisites can be found in [*Chapter 1*](B21787_01.xhtml#_idTextAnchor014).
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些先决条件缺失，或者指定了无效的源路径。关于先决条件的更多细节，请参见 [*第 1 章*](B21787_01.xhtml#_idTextAnchor014)。
- en: After having installed NGINX correctly, you cannot use the SSL-related directives
    to host a secure website. Have you made sure to include the SSL module correctly
    during the `configure` step? More details are in [*Chapter 1*](B21787_01.xhtml#_idTextAnchor014).
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在正确安装 NGINX 后，你不能使用与 SSL 相关的指令来托管一个安全网站。你是否确保在 `configure` 步骤中正确包含了 SSL 模块？更多细节请参见
    [*第 1 章*](B21787_01.xhtml#_idTextAnchor014)。
- en: 'NGINX refuses to start and outputs a message similar to `[emerg] bind() to
    0.0.0.0:80 failed (98: Address already in use)`. This error signifies that another
    application is utilizing the network port `80`. This could either mean that another
    web server, such as Apache, is already running on the machine, or that you don’t
    have the proper permissions to open a server socket on this port. This can happen
    if you are running NGINX from an underprivileged system account.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'NGINX 启动失败，并输出类似 `[emerg] bind() to 0.0.0.0:80 failed (98: Address already
    in use)` 的错误信息。这个错误意味着另一个应用程序正在使用网络端口 `80`。这可能是因为另一个 web 服务器（如 Apache）已经在该机器上运行，或者是因为你没有足够的权限在该端口上打开服务器套接字。如果你是从权限受限的系统账户运行
    NGINX，可能会发生这种情况。'
- en: 'NGINX refuses to start and outputs a message similar to `[emerg] 3629#0: open()
    "/path/to/logs/access.log" failed (2: No such file or directory)`. In this case,
    one of the files that NGINX tries to open, such as a log file, cannot be accessed.
    This could be caused by invalid access permissions or by an invalid directory
    path (for example, when specifying log files to be stored in a directory that
    does not exist on the system). After addressing NGINX’s compilation challenges,
    we’ll explore location block and error nuances. Though NGINX functions, we’ll
    learn to adjust these settings to meet our expectations.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 'NGINX 启动失败并输出类似于 `[emerg] 3629#0: open() "/path/to/logs/access.log" failed
    (2: No such file or directory)` 的信息。在这种情况下，NGINX 尝试打开的某个文件（例如日志文件）无法访问。这可能是由于无效的访问权限或无效的目录路径（例如，指定要存储日志文件的目录在系统中不存在）。解决了
    NGINX 编译问题后，我们将探讨位置块和错误的细微差别。尽管 NGINX 已经运行，我们将学习如何调整这些设置以符合我们的期望。'
- en: Looking at the 403 forbidden custom error page
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看 403 禁止访问的自定义错误页面
- en: 'If you decide to use `allow` and `deny` directives to allow or deny access,
    respectively, to a resource on your server, clients who are being denied access
    will usually fall back on a `403 Forbidden` error page. Imagine you have carefully
    set up a custom, user-friendly 403 error page for your clients to understand why
    they are denied access. Unfortunately, you cannot get that custom page to work,
    and clients still get the default NGINX 403 error page:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定使用 `allow` 和 `deny` 指令来分别允许或拒绝客户端访问服务器上的某个资源，那么被拒绝访问的客户端通常会回退到 `403 Forbidden`
    错误页面。假设你已经精心设置了一个自定义的、用户友好的 403 错误页面，帮助客户端理解为什么他们被拒绝访问。可惜的是，你无法让这个自定义页面正常工作，客户端仍然会看到默认的
    NGINX 403 错误页面：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The problem is simple: NGINX also denies access to your custom 403 error page!
    In such a case, you need to override the access rules in a `location` block specifically
    matching your page. You can use the following code to allow access to your custom
    403 error page only:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 问题很简单：NGINX 也拒绝访问你的自定义 403 错误页面！在这种情况下，你需要在专门匹配该页面的 `location` 块中覆盖访问规则。你可以使用以下代码仅允许访问自定义的
    403 错误页面：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you are going to have more than just one error page, you could specify a
    `location` block matching all error page filenames:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算设置多个错误页面，你可以指定一个 `location` 块来匹配所有错误页面的文件名：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: All your visitors are now allowed to view your custom error pages.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有访问者都可以查看你的自定义错误页面。
- en: Exploring 400 Bad Request
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 400 错误请求
- en: 'Occasionally, you may run into a recurring issue with some of your websites:
    NGINX returns `400 Bad Request` error pages to random visitors, and this only
    stops happening when visitors clear their cache and cookies. The error is caused
    by an overly large header field sent by the client. Most of the time, this is
    when cookie data exceeds a certain size. In order to prevent further trouble,
    you can simply increase the value of the `large_client_header_buffers` directive
    in order to allow a larger cookie data size:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔，你可能会遇到一些网站的问题：NGINX 向随机访问者返回 `400 Bad Request` 错误页面，并且只有当访问者清除缓存和 Cookie
    时，这个问题才会停止。该错误是由于客户端发送了过大的头字段。大多数情况下，这是因为 Cookie 数据超出了某个大小限制。为了避免进一步的麻烦，你可以通过增加
    `large_client_header_buffers` 指令的值来允许更大的 Cookie 数据大小：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In addition to adjusting the `large_client_header_buffers` for resolving 400
    Bad Request errors, it’s also worth examining directives such as `proxy_buffers`,
    `proxy_buffer_size`, and `proxy_busy_buffers_size`. Modifying these settings can
    further mitigate error 400 by optimizing how NGINX handles incoming data.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 除了调整 `large_client_header_buffers` 来解决 400 错误请求外，还值得检查 `proxy_buffers`、`proxy_buffer_size`
    和 `proxy_busy_buffers_size` 等指令。修改这些设置可以通过优化 NGINX 处理传入数据的方式，进一步缓解 400 错误。
- en: Looking at truncated or invalid FastCGI responses
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看截断或无效的 FastCGI 响应
- en: 'When setting up an NGINX frontend for a website that heavily relies on **AJAX**
    (short for **Asynchronous JavaScript and XML**), along with a FastCGI backend
    such as PHP, you may run into different sorts of problems. If your server returns
    truncated AJAX responses, invalid JSON values, or even empty responses, you may
    want to check your configuration for the following elements:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当为一个高度依赖 **AJAX**（即 **异步 JavaScript 和 XML**）以及类似 PHP 的 FastCGI 后端设置 NGINX 前端时，你可能会遇到各种问题。如果你的服务器返回截断的
    AJAX 响应、无效的 JSON 值，甚至空响应，你可能需要检查以下配置元素：
- en: Have you set up a writable directory for FastCGI temporary files? Make sure
    to do so via the `fastcgi_temp_path` directive.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是否为 FastCGI 临时文件设置了可写目录？确保通过 `fastcgi_temp_path` 指令进行设置。
- en: If `fastcgi_buffering` is set to `off`, all FastCGI responses are forwarded
    to the client synchronously, in chunks of a certain size (determined by `fastcgi_buffer_size`).
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`fastcgi_buffering`被设置为`off`，所有的FastCGI响应都会以同步的方式分块转发给客户端，每块的大小由`fastcgi_buffer_size`决定。
- en: In some cases, increasing the size and number of buffers allocated to storing
    FastCGI responses prevents responses from getting truncated. For example, use
    `fastcgi_buffers 256 8k;` for 256 buffers of 8 kilobytes each.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在某些情况下，增加分配给存储FastCGI响应的缓冲区的大小和数量，可以防止响应被截断。例如，使用`fastcgi_buffers 256 8k;`为每个8千字节的256个缓冲区分配内存。
- en: Exploring location block priorities
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索`location`块的优先级
- en: 'This problem frequently occurs when using multiple location blocks in the same
    server block: configuration does not apply as you thought it would.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当在同一个服务器块中使用多个`location`块时，常常会出现这个问题：配置不会像你预期的那样生效。
- en: 'As an example, suppose that you want to define a behavior to be applied to
    all image files that are requested by clients:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设你想定义一个行为，适用于所有客户端请求的图片文件：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Later on, you decide to enable automatic indexing of the `/images/` directory.
    Therefore, you decide to create a new `location` block, matching all requests
    starting with `/images/`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 后来你决定启用`/images/`目录的自动索引。因此，你决定创建一个新的`location`块，匹配所有以`/images/`开头的请求：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With this configuration, when a client requests to download `/images/square.gif`,
    NGINX will apply the second location’s block only. Why not the first one? The
    reason is that `location` blocks are processed in a specific order. For more information
    about `location` block priorities, refer to the *Location block* section in [*Chapter
    3*](B21787_03.xhtml#_idTextAnchor179).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种配置下，当客户端请求下载`/images/square.gif`时，NGINX只会应用第二个`location`块。为什么不是第一个呢？原因在于`location`块是按特定顺序处理的。有关`location`块优先级的更多信息，请参考[*第3章*](B21787_03.xhtml#_idTextAnchor179)中的*Location块*部分。
- en: Looking at if block issues
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看`if`块的问题
- en: In some situations, if not most, you should avoid using `if` blocks. There are
    two main issues that occur, regardless of the NGINX build you are using.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，甚至大多数情况下，你应该避免使用`if`块。不论你使用的是哪种NGINX版本，都会遇到两个主要问题。
- en: Inefficient statements
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 低效的语句
- en: 'There are some cases where `if` is used inappropriately, in a way that risks
    saturating your storage device with useless checks:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有些情况下，`if`的使用是不恰当的，这种使用方式有可能使你的存储设备充斥着无用的检查：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'With such a configuration, every single request received by NGINX will trigger
    a complete verification of the directory tree for the requested filename, thus
    requiring multiple storage disk access system calls. If you test `/usr/local/nginx/html/hello.html`,
    NGINX will check `/`, `/usr`, `/usr/local`, `/usr/local/nginx`, and so on. In
    any case, you should avoid resorting to such a statement, for example, by filtering
    the file type beforehand (which could be done by making such a check only if the
    requested file matches specific extensions):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样的配置下，NGINX接收到的每一个请求都会触发对请求文件名的目录树进行完整验证，因此需要多次访问存储磁盘进行系统调用。如果你测试`/usr/local/nginx/html/hello.html`，NGINX将检查`/`、`/usr`、`/usr/local`、`/usr/local/nginx`等目录。无论如何，你应该避免使用这种语句，例如，可以通过提前过滤文件类型来避免这种情况（例如，仅在请求的文件与特定扩展名匹配时才进行检查）：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Unexpected behavior
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 意外行为
- en: 'The `if` block should ideally be employed in simple situations, as its behavior
    might be surprising in some cases. Apart from the fact that `if` statements cannot
    be nested, the following situations may present issues:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`块理应仅在简单的情况下使用，因为在某些情况下，它的行为可能会令人吃惊。除了`if`语句不能嵌套之外，以下情况可能会引发问题：'
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this case, the first `if` block is ignored and only the second one is processed.
    However, if you insert a *Rewrite module* directive in the first block, such as
    `rewrite`, `break`, or `return`, the first block will be processed and the second
    one will be ignored.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，第一个`if`块会被忽略，只有第二个块会被处理。然而，如果你在第一个块中插入了*重写模块*指令，如`rewrite`、`break`或`return`，则第一个块会被处理，第二个块会被忽略。
- en: 'There are many other cases where the use of `if` causes problems:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 还有很多其他情况，`if`的使用会引发问题：
- en: Having `try_files` and `if` statements in the same location block is not recommended,
    as the `try_files` directive will, in most cases, be ignored.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不建议在同一个`location`块中同时使用`try_files`和`if`语句，因为在大多数情况下，`try_files`指令会被忽略。
- en: Some directives are theoretically allowed within the `if` block, but can create
    serious issues; for instance, `proxy_pass` and `fastcgi_pass`. You should keep
    those within `location` blocks.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 某些指令在理论上可以在`if`块中使用，但可能会引发严重问题；例如，`proxy_pass`和`fastcgi_pass`。你应当将它们保留在`location`块内。
- en: You should avoid using `if` blocks within a `location` block that captures regular
    expression patterns from within its modifier.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你应避免在一个`location`块内使用包含正则表达式模式的`if`块。
- en: These issues originate from the fact that while the NGINX configuration is written
    in what appears to be a declarative language, directives from the Rewrite module,
    such as `if`, `rewrite`, `return`, or `break`, make it look like event-based programming.
    In general, you should try to avoid using directives from other modules within
    `if` blocks as much as possible.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题源于NGINX配置看似是声明式语言，然而来自Rewrite模块的指令，如`if`、`rewrite`、`return`或`break`，使得它看起来像是事件驱动的编程。通常情况下，你应尽量避免在`if`块中使用来自其他模块的指令。
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Most of the problems you can run into will occur during the early configuration
    stages while you test your server before production. These problems are usually
    easier to deal with because you are mentally prepared for the challenge, and more
    importantly, because NGINX points out syntax or configuration errors on startup.
    It is, on the other hand, much more difficult to identify the cause of malfunctions
    while your websites are actually in production. But once again, NGINX saves the
    day: if you properly configure log files (both access and error logs) and adopt
    the habit of reading them regularly, you will find that problem-solving is made
    easy.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数你可能遇到的问题通常发生在早期配置阶段，即在生产前测试服务器时。这些问题通常较容易处理，因为你在心理上已经为挑战做好了准备，更重要的是，因为NGINX会在启动时指出语法或配置错误。另一方面，在网站实际进入生产环境时，识别故障原因要困难得多。但幸运的是，NGINX再一次提供了帮助：如果你正确配置了日志文件（包括访问日志和错误日志），并养成定期查看日志的习惯，你会发现问题解决变得轻松许多。
- en: This concludes our journey with NGINX, throughout which we have walked through
    a large number of subjects, from the basic mechanisms of the HTTP server to web
    application deployment and troubleshooting.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着我们与NGINX的旅程的结束，在这段旅程中，我们讨论了大量话题，从HTTP服务器的基本机制到Web应用部署与故障排查。
- en: If you want to know more about NGINX, we invite you to dive into the vibrant
    NGINX community, a collaborative hub teeming with expertise and innovative ideas.
    Whether seeking advice for your projects or offering your own insights, the community
    is an invaluable resource for broadening your understanding and refining your
    skills. Engage in discussions, share solutions, and connect with fellow enthusiasts
    to further your journey with NGINX.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想深入了解NGINX，我们邀请你加入充满活力的NGINX社区，这里是一个充满专业知识和创新思维的合作平台。无论是寻求项目建议，还是分享自己的见解，社区都是拓宽理解、提升技能的宝贵资源。参与讨论、分享解决方案，并与其他爱好者建立联系，继续你与NGINX的探索之旅。
