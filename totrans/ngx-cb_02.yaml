- en: Common PHP Scenarios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring NGINX for WordPress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WordPress multisite with NGINX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Drupal using NGINX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using NGINX with MediaWiki
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Magento with NGINX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring NGINX for Joomla
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PHP is a thoroughly tested product to use with NGINX because it is the most
    popular web-based programming language. It powers sites, such as Facebook, Wikipedia,
    and every WordPress-based site, and its popularity hasn't faded as other languages
    have grown.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll go through examples of the more common PHP scenarios
    and how to implement them with NGINX. As WordPress is the most popular of the
    PHP systems, I've included some additional information to help with troubleshooting.
    Even if you're not using WordPress, some of this information may be helpful if
    you run into issues with other PHP frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the recipes expect that you have a working understanding of PHP systems,
    so not all of the setup steps for the systems will be covered. This is to keep
    the book succinct and allow the focus to be on the NGINX components.
  prefs: []
  type: TYPE_NORMAL
- en: In order to keep the configurations as simple as possible, I haven't included
    details such as cache headers or SSL configurations in these recipes. This will
    be covered in later chapters and the full working configurations will be made
    available via [https://github.com/timbutler/nginxcookbook/](https://github.com/timbutler/nginxcookbook/).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring NGINX for WordPress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Covering nearly 30 percent of all websites, WordPress is certainly the **Content
    Management System** (**CMS**) of choice by many. Although it came from a blogging
    background, WordPress is a very powerful CMS for all content types and powers
    some of the world's busiest websites.
  prefs: []
  type: TYPE_NORMAL
- en: By combining it with NGINX, you can deploy a highly scalable web platform.
  prefs: []
  type: TYPE_NORMAL
- en: You can view the official WordPress documentation on NGINX at [https://codex.wordpress.org/Nginx](https://codex.wordpress.org/Nginx).
  prefs: []
  type: TYPE_NORMAL
- en: We'll also cover some of the more complex WordPress scenarios, including multisite
    configurations with subdomains and directories.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To compile PHP code and run it via NGINX, the preferred method is via **PHP-FPM**,
    a high-speed **FastCGI Process Manager**. We'll also need to install PHP itself
    and, for the sake of simplicity, we'll stick with the OS-supplied version. Those
    seeking the highest possible performance should ensure they're running PHP 7 (released
    December 3, 2015), which can offer a 2-3 times speed improvement for WordPress,
    while at the same time being up to four times more memory efficient compared to
    PHP 5.6.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install PHP-FPM, you should run the following on a Debian/Ubuntu system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For those running CentOS/RHEL, you should run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As PHP itself is a prerequisite for the `php-fpm` packages, it will also be
    installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: Other packages such as MySQL will be required if you''re intending to
    run this on a single VPS instance. Consult the WordPress documentation for a full
    list of requirements.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this instance, we're simply using a standalone WordPress site, which would
    be deployed in many personal and business scenarios. This is the typical deployment
    for WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: 'For ease of management, I''ve created a dedicated config file just for the
    WordPress site (`/etc/nginx/conf.d/wordpress.conf`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Reload NGINX to read the new configuration file and check your log files if
    there are any errors. If you''re installing WordPress from scratch, you should
    see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/97343223-e9bd-4a84-a499-29edbe25d83d.png)'
  prefs: []
  type: TYPE_IMG
- en: You can complete the WordPress installation if you haven't already.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the most part, the configuration is the same as the static website configuration
    in [Chapter 1](69685f00-24c3-428c-b607-01a4e9a2784d.xhtml), *Let's Get Started*.
    For the root URL call, we have a new `try_files` directive, which will attempt
    to load the files in the order specified, but will fall back to the last parameter
    if they all fail.
  prefs: []
  type: TYPE_NORMAL
- en: For this WordPress example, it means that any static files will be served if
    they exist on the system, then fall back to `/index.php?args` if this fails.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `args` rewrite allows the permalinks of the site to be in a much more human
    form. For example, if you have a working WordPress installation, you can see links
    such as the one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2fe479db-b80f-4f6a-9d61-568023f1b092.png)'
  prefs: []
  type: TYPE_IMG
- en: Lastly, we process all PHP files via the FastCGI interface to PHP-FPM. In the
    preceding example, we're referencing the Ubuntu/Debian standard; if you're running
    CentOS/RHEL, then the path will be `/var/run/php-fpm.sock`.
  prefs: []
  type: TYPE_NORMAL
- en: NGINX is simply *proxying* the connection to the PHP-FPM instance, rather than
    being part of NGINX itself. This separation allows for greater resource control,
    especially since the number of incoming requests to the web server doesn't necessarily
    match the number of PHP requests for a typical website.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Take care when copying and pasting any configuration files. It''s very easy
    to miss something and have one thing slightly different in your environment, which
    will cause issues with the website working as expected. Here''s a quick lookup
    table of various other issues which you may come across:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Error** | **What to check** |'
  prefs: []
  type: TYPE_TB
- en: '| `502 Bad Gateway` | File ownership permissions for the PHP-FPM socket file
    |'
  prefs: []
  type: TYPE_TB
- en: '| `404 File Not Found` | Check for the missing `index index.php` directive
    |'
  prefs: []
  type: TYPE_TB
- en: '| `403 Forbidden` | Check for the correct path in the `root` directive and/or
    check for correct file permissions |'
  prefs: []
  type: TYPE_TB
- en: Your error log (defaults to `/var/log/nginx/error.log`) will generally contain
    a lot more detail regarding the issue you're seeing compared with what's displayed
    in the browser. Make sure you check the error log if you receive any errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: NGINX does not support `.htaccess` files. If you see examples on the
    web referencing a `.htaccess` files, these are Apache specific. Make sure any
    configurations you''re looking at are for NGINX.'
  prefs: []
  type: TYPE_NORMAL
- en: WordPress multisite with NGINX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WordPress **multisites** (also referred to as network sites) allow you to run
    multiple websites from the one codebase. This can reduce the management burden
    of having separate WordPress installations when you have similar sites. For example,
    if you have a sporting site with separate news and staff for different regions,
    you can use a multisite installation to accomplish this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To convert a WordPress site into a multisite, you need to add the configuration
    variable into your config file `wp-config.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Under the Tools menu, you'll now see an extra menu called Network Setup. This
    will present you with two main options, Sub-domains and Sub-directories. These
    are the two different ways the multisite installation will work. The Sub-domains
    option has the sites separated by domain names, for example, `site1.nginxcookbook.com`
    and `site2.nginxcookbook.com`. The Sub-directories option means that the sites
    are separated by directories, for example, `www.nginxcookbook.com/site1` and `www.nginxcookbook.com/site2`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7d47de1-4a62-4648-82cc-38dc9029d73e.png)'
  prefs: []
  type: TYPE_IMG
- en: There's no functional difference between the two, it's simply an aesthetic choice.
    However, once you've made your choice, you cannot return to the previous state.
  prefs: []
  type: TYPE_NORMAL
- en: Once you've made the choice, it will then provide the additional code to add
    to your `wp-config.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the code for my example, which is subdirectory based:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Because NGINX doesn't support `.htaccess` files, the second part of the WordPress
    instructions will *not* work. Instead, we need to modify the NGINX configuration
    to provide the rewrite rules ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the existing `/etc/nginx/conf.d/wordpress.conf` file, you''ll need to add
    the following just after the `location /` directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Although the `if` statements are normally avoided if possible, in this instance,
    it will ensure the subdirectory multisite configuration works as expected. If
    you're expecting a few thousand concurrent users on your site, then it may be
    worthwhile investigating the static mapping of each site. There are plugins to
    assist with the map generations for this, but they are still more complex compared
    to the `if` statement.
  prefs: []
  type: TYPE_NORMAL
- en: Subdomains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''ve selected subdomains, your code to put in `wp-config.php` will look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll also need to modify the NGINX config as well to add in the wildcard
    for the server name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You can now add in the additional sites, such as `site1.wordpressdemo.nginxcookbook.com`,
    and there won't be any changes required for NGINX.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'NGINX recipe page: [https://www.nginx.com/resources/wiki/start/topics/recipes/wordpress/](https://www.nginx.com/resources/wiki/start/topics/recipes/wordpress/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'WordPress Codex page: [https://codex.wordpress.org/Nginx](https://codex.wordpress.org/Nginx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Drupal using NGINX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With version 8 recently released and a community of over 1 million supporters,
    Drupal remains a popular choice when it comes to a highly flexible and functional
    CMS platform. Version 8 has over 200 new features compared to version 7, aimed
    at improving both the usability and manageability of the system. This cookbook
    will be using version 8.0.5.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cb1217cd-6355-4aaf-b64e-3037736eff35.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This example assumes you already have a working instance of Drupal or are familiar
    with the installation process. You can also follow the installation guide available
    at [https://www.drupal.org/documentation/install](https://www.drupal.org/documentation/install).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe is for a basic Drupal configuration, with the Drupal files located
    in `/var/www/html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the configuration to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Based on a simple PHP-FPM structure, we make a few key changes specific to
    the Drupal environment. The first change is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We put a block in for any files beginning with a dot, which are normally hidden
    and/or system files. This is to prevent accidental information leakage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Any PHP file within the `vendor` directory is also blocked, as they shouldn't
    be called directly. Blocking the PHP files limits any potential exploit opportunity
    which could be discovered in third-party code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, Drupal 8 changed the way the PHP functions are called for updates,
    which causes any old configuration to break. The `location` directive for the
    PHP files looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This is to allow the distinct pattern that Drupal uses, where the PHP filename
    could be midway through the URI.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also modify how the FastCGI process splits the string, so that we ensure
    we always get the correct answer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'NGINX recipe: [https://www.nginx.com/resources/wiki/start/topics/recipes/drupal/](https://www.nginx.com/resources/wiki/start/topics/recipes/drupal/)'
  prefs: []
  type: TYPE_NORMAL
- en: Using NGINX with MediaWiki
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MediaWiki, most recognized by its use with Wikipedia, is the most popular open
    source wiki platform available. With features heavily focused on the ease of editing
    and sharing content, MediaWiki makes a great system to store information you want
    to continually edit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b64f4aa7-06a7-4aef-a473-5a411392cff9.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This example assumes you already have a working instance of MediaWiki or are
    familiar with the installation process. For those unfamiliar with the process,
    it's available online at [https://www.mediawiki.org/wiki/Manual:Installation_guide](https://www.mediawiki.org/wiki/Manual:Installation_guide).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The basic NGINX configuration for MediaWiki is very similar to many other PHP
    platforms. It has a flat directory structure which easily runs with basic system
    resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The default installation doesn''t use any rewrite rules, which means you''ll
    get URLs such as `index.php?title=Main_Page` instead of the neater (and more readable)
    `/wiki/Main_Page`. To enable this, we need to edit the `LocalSettings.php` file
    and add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This allows the URLs to be rewritten in a much neater format.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'NGINX recipe: [https://www.nginx.com/resources/wiki/start/topics/recipes/mediawiki/](https://www.nginx.com/resources/wiki/start/topics/recipes/mediawiki/)'
  prefs: []
  type: TYPE_NORMAL
- en: Using Magento with NGINX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With nearly 30 percent market share, Magento is the most popular e-commerce
    platform in the world. Due to a number of features and complexity, it's also a
    very resource-intensive system to use compared to a lightweight alternative. This
    means that NGINX is an ideal pairing to ensure you have the highest performance
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'The latest major version of Magento is 2.0, which was nearly a complete rewrite
    compared to the previous versions. There''s still quite a bit of complexity involved
    too, so make sure that you''re ready to take on Magento if you''ve chosen it for
    your e-commerce platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cae24b63-9891-44bb-bd8a-8efd418dc58c.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This guide assumes you're familiar with the installation of Magento 2.0 and
    have a working instance. Although there shouldn't be too many major changes, this
    recipe has been tested with version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thankfully, Magento provides a fairly functional NGINX sample configuration
    (located in the root of the Magento source folder) to get started with. I've located
    the files within the `/var/www/html` directory, which will be known as `MAGE_ROOT`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Magento provides a basic configuration out of the box, which only requires
    a few small changes. However, I prefer to use my own configuration which I find
    easier to follow. Here''s how I do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this is significantly more complex than a basic WordPress configuration.
    There are four main sections; the first is to handle the setup and updates, the
    second is to handle static media (for example, default Magento, CSS, and JavaScript),
    media files (for example, upload images), and finally how to process PHP files.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll go through this one in sections. Magento is different from many flat file
    / single root directory structures, so it requires some slight changes compared
    to a basic PHP site.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This sets a variable we can easily reference and it means there''s only one
    place we need to update if we move the files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: All of the main website files sit in the `pub` subdirectory. This is commonly
    overlooked when uploading the files to a shared hosting platform such as CPanel
    or Plesk. Ensure that the main `root` directive points to the `pub` folder, not
    just the directory of the Magento files. The `root` directive is therefore pointed
    at the `pub` folder with the preceding configuration line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Conversely, the setup and update URLs need to have a separate `root` directive
    to ensure they also point to the correct location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This sets the `root` back to the default directory, which sits outside the
    `pub` directory. The easiest way to look at it is to view the setup and upgrade
    sites as separate websites with their own separate structure. This is why the
    directive block also has the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We only allow access to `index.php` within the `setup`/`update` directories,
    and then deny access to any *nonpub* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This will give a 403 error if a malicious user or script attempts to access
    files outside the `pub` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'It also ensures that all requests come from the same frame, which will prevent
    clickjacking:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The static and media sections are both fairly similar in how they operate. Headers
    are set for caching (explained in more detail in [Chapter 7](bc04362e-995f-4550-92b7-183754306d34.xhtml),
    *Reverse Proxy*) and the calls are wrapped through a PHP function (`static.php`
    or `get.php`) to allow Magento to perform tasks such as file merging and minification.
    It can result in a slightly slower first hit, but as it caches the result each
    subsequent request should be very fast.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Magento sample configuration: [https://github.com/magento/magento2/blob/develop/nginx.conf.sample](https://github.com/magento/magento2/blob/develop/nginx.conf.sample)'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring NGINX for Joomla
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the recent release of version 3.5, Joomla is still one of the most popular
    CMS platforms in the world. This latest release features full PHP 7 support, drag-and-drop
    images, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/249e5024-4e56-45a5-ae75-cb4d951f53a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This assumes you have a working Joomla installation and have located the files
    at `/var/www/html/`. If you need an installation guide, try the official documentation
    available at [https://docs.joomla.org/J3.x:Installing_Joomla](https://docs.joomla.org/J3.x:Installing_Joomla).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use Joomla with NGINX, we need a simple NGINX configuration file. This is
    a very basic PHP-FPM configuration with no changes required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To enable clean URLs, you also need to ensure that URL rewriting is enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/862f3d5d-9b3c-4a8e-b9f2-03877fcf2b39.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Joomla docs: [https://docs.joomla.org/Nginx](https://docs.joomla.org/Nginx)'
  prefs: []
  type: TYPE_NORMAL
