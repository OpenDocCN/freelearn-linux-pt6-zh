- en: 'Chapter 3. Get It All Logged: The Logging Module'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章：全面记录：日志模块
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖：
- en: Setting up error log path and levels
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置错误日志路径和级别
- en: Logging it like Apache
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像 Apache 一样记录日志
- en: Disabling logging of 404 in error logs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用在错误日志中记录 404 错误
- en: Using different logging profiles in the same setup
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在同一设置中使用不同的日志配置文件
- en: Enabling a log file cache
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用日志文件缓存
- en: Utilizing separate error logs per virtual host
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个虚拟主机使用单独的错误日志
- en: Setting up log rotation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置日志轮换
- en: Enabling remote logging with syslog-ng
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用使用 syslog-ng 进行远程日志记录
- en: Setting up your custom logs for easy parsing
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置自定义日志以便轻松解析
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter aims to teach the basics as well as the advanced configurations
    that can be done around the Nginx logging module, like log management, backup,
    rotation, and more. Logging is very crucial as it can help you identify and track
    various attributes of your application, like performance, user behavior, and much
    more. It also helps you as a system administrator to identify, both reactively
    and proactively, potential security issues.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在教授基础和进阶的 Nginx 日志模块配置方法，如日志管理、备份、轮换等。日志记录非常关键，因为它可以帮助你识别和追踪应用程序的各类属性，如性能、用户行为等等。它还帮助你作为系统管理员，主动和被动地识别潜在的安全问题。
- en: Setting up error log path and levels
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置错误日志路径和级别
- en: The basic configurations that one needs to get the logging modules working properly
    are setting up the location of the logging files and configuring the level of
    the logging that will take place.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正确配置日志模块所需的基本设置是确定日志文件的位置并配置日志记录的级别。
- en: Nginx allows a clear separation of the access and the error logs, thus letting
    you easily track your error lists.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 允许清晰地区分访问日志和错误日志，因此可以轻松跟踪错误列表。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'You can use the following configuration to setup a file path for logging in
    addition to setting the format in which to log in:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下配置来设置日志文件路径，同时设置日志的格式：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This simple configuration will allow us to log the various HTTP activities
    that occur on all the sites hosted in the particular environment. Here is a sample
    log from the access log:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的配置将允许我们记录在特定环境中托管的所有站点上发生的各种 HTTP 活动。以下是来自访问日志的一个示例日志：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It is easy to see how the various variables are outputted in order, as defined
    with the combined format.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易看到各种变量是如何按顺序输出的，这些顺序是通过组合格式定义的。
- en: 'The error log, which is now logged at `/var/log/nginx/error.log`, will start
    logging all the critical errors, and here is a sample entry from an error log:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 错误日志现在记录在 `/var/log/nginx/error.log` 中，将开始记录所有的关键错误，以下是一个错误日志的示例条目：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There's more...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: You can change the level of error logging (error_log) to `debug,info,notice,warn
    ,error,crit`, or `alert`, based upon your application needs. It is usually best
    to try out the various levels to understand what exactly it outputs, and weather
    that can satisfy your current debugging needs.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以根据应用需求更改错误日志级别（error_log）为 `debug,info,notice,warn,error,crit` 或 `alert`。通常最好尝试不同的级别，了解它们具体输出的内容，并判断它们是否能满足当前的调试需求。
- en: '| Error level | What does it mean? |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 错误级别 | 含义 |'
- en: '| --- | --- |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Alert | Emergency conditions |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| Alert | 紧急条件 |'
- en: '| Crit | Critical conditions |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| Crit | 严重条件 |'
- en: '| Error | Error conditions |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| Error | 错误条件 |'
- en: '| Warn | Warning conditions |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| Warn | 警告条件 |'
- en: '| Notice | Normal, but significant conditions |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| Notice | 普通但重要的条件 |'
- en: '| Info | Information messages |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| Info | 信息性消息 |'
- en: '| Debug | Debug-level messages |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| Debug | 调试级别消息 |'
- en: Logging it like Apache
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 像 Apache 一样记录日志
- en: Apache or httpd is the most used open source web server out there. It has a
    very stable codebase and community which has made it more or less the standard
    for open source enterprise applications out there.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Apache 或 httpd 是最常用的开源 Web 服务器。它具有非常稳定的代码库和社区，使其在开源企业应用中几乎成了标准。
- en: Most of the log analyzers are configured with Apache logging format in mind.
    Our goal in this recipe is to enable us to use log analyzing tools which already
    work well with Apache in our Nginx setup.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数日志分析器在配置时会考虑 Apache 日志格式。本节的目标是使我们能够在 Nginx 设置中使用与 Apache 配合良好的日志分析工具。
- en: How to do it...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'If you want the log to look like the Apache logs, you will need to enter the
    following code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望日志看起来像 Apache 日志，你需要输入以下代码：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this, we basically create a new Apache compatible format which will be easily
    read with tools like AWStats. We then set the standard as the Nginx access log
    format in the preceding configuration. The format has the following fields:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们基本上创建了一个新的 Apache 兼容格式，可以通过像 AWStats 这样的工具轻松读取。然后我们将前述配置中的标准设置为 Nginx
    访问日志格式。该格式包含以下字段：
- en: '| Variable | What is it? |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 变量 | 它是什么？ |'
- en: '| --- | --- |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `$remote_addr` | This is the IP of the remote address that was accessing
    the site. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `$remote_addr` | 这是访问网站的远程地址的 IP。 |'
- en: '| `$remote_user` | If the user is logged in with HTTP authentication, this
    would be their username. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `$remote_user` | 如果用户通过 HTTP 认证登录，这将是他们的用户名。 |'
- en: '| `$time_local` | This is the local timestamp of the server when the request
    was made. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `$time_local` | 这是请求发起时服务器的本地时间戳。 |'
- en: '| `$request` | The request that was made on the server. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `$request` | 在服务器上发出的请求。 |'
- en: '| `$status` | The HTTP response code (200, 404, 500, and so on). |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `$status` | HTTP 响应代码（200、404、500 等）。 |'
- en: '| `$body_bytes_sent` | This is the size of the response that was sent to the
    server. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `$body_bytes_sent` | 这是发送到服务器的响应大小。 |'
- en: '| `$http_referer` | This is the site from where the user has arrived on to
    this particular page/made this HTTP request. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `$http_referer` | 这是用户从哪个网站访问到此页面/发起此 HTTP 请求。 |'
- en: '| `$http_user_agent` | This is the browser type that was used to make this
    HTTP request. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `$http_user_agent` | 这是发起此 HTTP 请求时使用的浏览器类型。 |'
- en: '| `$http_x_forwarded_for` | If the server is running as a reverse proxy then
    this will display the actual IP of the server. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `$http_x_forwarded_for` | 如果服务器作为反向代理运行，那么它将显示服务器的实际 IP。 |'
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding lines from the access log display the format in action. This particular
    format will easily work with all the web log parsing and analyzing tools, such
    as webalizer and AWStats, with no changes at all.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 访问日志的前几行显示了格式的实际应用。这个特定的格式将与所有的网页日志解析和分析工具（如 webalizer 和 AWStats）兼容，完全无需修改。
- en: Disabling logging of 404 in error logs
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 禁用 404 错误日志的记录
- en: In the age of Google, we can see that there are thousands of crawlers out there
    trying to get the most out of your site and content by reading through all your
    pages. In a lot of situations, when you update or upgrade a site, these crawlers
    start to take up system resources by trying to access pages that used to exist
    and do not anymore. This also increases the system overheads of logging and can
    potentially become a bottleneck for your site. This recipe will address this particular
    issue.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在谷歌的时代，我们可以看到有成千上万的爬虫试图通过读取你所有的页面来从你的站点和内容中获取最大的收益。在许多情况下，当你更新或升级网站时，这些爬虫开始占用系统资源，试图访问以前存在但现在已经不存在的页面。这还会增加日志记录的系统开销，可能成为你网站的瓶颈。本教程将解决这个问题。
- en: How to do it...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'This piece of configuration is placed in the location context of the configuration,
    as shown in the following code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这段配置被放置在配置文件的 location 上下文中，如下方代码所示：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This simple configuration will not log when the `/robots.txt` file is not found
    on the server. This will save the unnecessary overhead of opening the error log
    file and writing out an 404 entry indicating that the file, robots.txt(cit) is
    being found.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的配置在服务器上找不到 `/robots.txt` 文件时不会记录日志。这样可以避免不必要地打开错误日志文件并写入 404 条目，指示文件 robots.txt（cit）未找到。
- en: Using different logging profiles in the same setup
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在同一配置中使用不同的日志配置文件
- en: As we have seen before, Nginx allows you to easily set up a logging format.
    In this recipe, we will explore how one configuration file can exploit multiple
    logging formats. This neat functionality can help you generate custom logs specific
    to a particular section of the site whenever necessary.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所见，Nginx 允许你轻松设置日志格式。在本教程中，我们将探讨如何通过一个配置文件利用多个日志格式。这种精巧的功能可以帮助你在必要时生成针对网站特定部分的自定义日志。
- en: How to do it...
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'This particular configuration will implement three logging formats and then
    effectively utilize them for logging different sections of the site:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定的配置将实现三种日志格式，并有效地将它们应用于记录网站的不同部分：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `main` log format will be used to log the normal dynamic PHP request, while
    the `static_main` log format is being used to log the static requests that come
    to Nginx. Finally we use an `error_main` format to keep track of the errors.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`main` 日志格式将用于记录正常的动态 PHP 请求，而 `static_main` 日志格式将用于记录到达 Nginx 的静态请求。最后，我们使用
    `error_main` 格式来跟踪错误。'
- en: There's more...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: 'You have access to the following variables to use in the `log_format` structure.
    These can be utilized effectively to gather and understand whatever Nginx can
    access in your stack:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以访问以下变量，在 `log_format` 结构中使用它们。这些变量可以有效地帮助你收集并理解 Nginx 在你的栈中可以访问的所有内容：
- en: '| Variable | Description |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 变量 | 描述 |'
- en: '| --- | --- |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `$arg_PARAMETER` | This variable contains the value of the GET request variable
    PARAMETER if present in the query string. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `$arg_PARAMETER` | 这个变量包含 GET 请求参数 PARAMETER 在查询字符串中的值（如果存在）。 |'
- en: '| `$args` | This variable is the GET parameter''s in request line, for example,
    `foo=123&bar=blahblah`. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `$args` | 这个变量是请求行中的 GET 参数，例如 `foo=123&bar=blahblah`。 |'
- en: '| `$binary_remote_addr` | The address of the client in binary form. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `$binary_remote_addr` | 客户端的二进制地址。 |'
- en: '| `$body_bytes_sent` | The bytes of the body sent. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `$body_bytes_sent` | 发送的正文字节数。 |'
- en: '| `$content_length` | This variable is equal to line Content-Length in the
    header of request. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `$content_length` | 这个变量等于请求头中的 Content-Length 行。 |'
- en: '| `$content_type` | This variable is equal to line Content-Type in the header
    of request. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `$content_type` | 这个变量等于请求头中的 Content-Type 行。 |'
- en: '| `$document_root` | This variable is equal to the value of directive root
    for the current request. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `$document_root` | 这个变量等于当前请求的指令 root 的值。 |'
- en: '| `$document_uri` | The same as `$uri`. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `$document_uri` | 与 `$uri` 相同。 |'
- en: '| `$host` | This variable is equal to line Host in the header of request or
    name of the server processing the request if the Host header is not available.
    This variable may have a different value from `$http_host` when the Host input
    header is absent or has an empty value. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `$host` | 这个变量等于请求头中的 Host 行，或者当 Host 头部不可用时，等于处理请求的服务器的名称。当 Host 输入头缺失或为空时，这个变量的值可能与
    `$http_host` 不同。 |'
- en: '| `$http_HEADER` | The value of the HTTP header HEADER when converted to lowercase
    and with "dashes" converted to "underscores", for example, `$http_user_agent,
    $http_referer`. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `$http_HEADER` | 转换为小写并将 HTTP 头部中的 HEADER 的“短横线”转换为“下划线”后的值，例如，`$http_user_agent,
    $http_referer`。 |'
- en: '| `$is_args` | Evaluates to "?" if `$args` is set, returns "" otherwise. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `$is_args` | 如果 `$args` 被设置，返回“?”，否则返回空字符串 ""。 |'
- en: '| `$request_uri` | This variable is equal to the *original* request URI as
    received from the client including the args. It cannot be modified. Look at `$uri`
    for the post-rewrite/altered URI. Does not include host name. Example:`"/foo/bar.php?arg=baz"`.
    |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `$request_uri` | 这个变量等于从客户端接收到的*原始*请求 URI，包括参数。它无法被修改。查看 `$uri` 获取重写或修改后的
    URI。不会包含主机名。示例：`"/foo/bar.php?arg=baz"`。 |'
- en: '| `$scheme` | The HTTP scheme (that is http, https). Evaluated only on demand,
    for example:`rewrite ^(.+)$ $scheme://example.com$1 redirect`; |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `$scheme` | HTTP 协议（即 http, https）。仅在需要时计算，例如：`rewrite ^(.+)$ $scheme://example.com$1
    redirect`; |'
- en: '| `$server_addr` | Equal to the server address. As a rule, for obtaining the
    value of this variable is done one system call. In order to avoid system call,
    it is necessary to indicate addresses in directives, listen, and to use parameter
    bind. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `$server_addr` | 等于服务器地址。通常，为了获取此变量的值会进行一次系统调用。为了避免系统调用，需要在指令中指定地址，监听，并使用
    bind 参数。 |'
- en: '| `$server_name` | The name of the server. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `$server_name` | 服务器的名称。 |'
- en: '| `$server_port` | This variable is equal to the port of the server, to which
    the request arrived. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `$server_port` | 这个变量等于服务器的端口号，接收到请求的端口。 |'
- en: '| `$server_protocol` | This variable is equal to the protocol of request, usually
    this HTTP/1.0 or HTTP/1.1. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `$server_protocol` | 这个变量等于请求的协议，通常是 HTTP/1.0 或 HTTP/1.1。 |'
- en: '| `$uri` | This variable is equal to current URI in the request (without arguments,
    those are in `$args.)` It can differ from `$request_uri` which is what is sent
    by the browser. Examples of how it can be modified are internal redirects, or
    with the use of index. Does not include host name. Example:`"/foo/bar.html"`.
    |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `$uri` | 这个变量等于当前请求的 URI（不包含参数，参数在 `$args` 中）。它可能与 `$request_uri` 不同，后者是浏览器发送的
    URI。修改的例子有内部重定向，或使用索引。不会包含主机名。示例：`"/foo/bar.html"`。 |'
- en: Enabling a log file cache
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用日志文件缓存
- en: Logging is primarily a disk based activity, and on a busy server, that requires
    logging as an audit requirement. It is crucial to ensure that you enable file
    descriptor caching in Nginx. This is a performance enhancement recipe that will
    also increase the life of your server hard drive.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录主要是基于磁盘的活动，在繁忙的服务器上，这需要作为审计要求进行日志记录。确保在Nginx中启用文件描述符缓存至关重要。这是一个性能提升方案，也将延长服务器硬盘的使用寿命。
- en: How to do it...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'You can put this configuration in the `http` part of the configuration:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将此配置放入配置的`http`部分：
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This simple configuration sets up the following flags which are described in
    the following table:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的配置设置了以下标志，具体描述如下表：
- en: '| Flag | Utility |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 标志 | 功能 |'
- en: '| --- | --- |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Max | Maximal number of descriptors in the cache, with overflow Least Recently
    Used removed (LRU) |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 最大 | 缓存中描述符的最大数量，溢出时最近最少使用的描述符将被移除（LRU） |'
- en: '| Inactive | Sets the time after which descriptor without hits during this
    time are removed; default is 10 seconds |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 不活跃 | 设置没有命中事件的描述符被移除的时间；默认值为10秒 |'
- en: '| min_uses | Sets the minimum number of file usage within the time specified
    in parameter inactive, after which the file descriptor will be put in the cache;
    default is 1 |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| min_uses | 设置在参数inactive指定的时间内文件的最小使用次数，超过该次数后，文件描述符将被放入缓存；默认值为1 |'
- en: '| Valid | Sets the time until it will be checked if file still exists under
    same name; default is 60 seconds |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| 有效 | 设置检查文件是否仍以相同名称存在的时间；默认值为60秒 |'
- en: '| Off | Disables the cache |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 关闭 | 禁用缓存 |'
- en: These settings can be optimized over some span of testing, thus giving you the
    best of what Nginx has to offer with logging and reducing your performance overheads
    for the same.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设置可以通过一段时间的测试进行优化，从而为你提供Nginx在日志记录方面的最佳性能，并减少相应的性能开销。
- en: Utilizing separate error logs per virtual host
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为每个虚拟主机使用单独的错误日志
- en: We looked earlier at how simple it is in Nginx to set up virtual hosts and manage
    them clearly in their separate files. In this recipe, we are going to have a look
    at how we create different access and error logs for each virtual host.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前看过，在Nginx中设置虚拟主机并清晰地管理它们在各自的文件中是多么简单。在这个方案中，我们将看看如何为每个虚拟主机创建不同的访问日志和错误日志。
- en: How to do it...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'This is a configuration that takes three virtual hosts (www.example1.com ,
    [www.example2.com](http://www.example2.com), and [www.example3.com)](http://www.example3.com))
    which have different access and error logs:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个配置，涉及三个虚拟主机（www.example1.com，[www.example2.com](http://www.example2.com)
    和 [www.example3.com](http://www.example3.com)），它们具有不同的访问和错误日志：
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As you can see, we can place `access_log` and `error_log` directives individually
    in each of the virtual host configurations. This allows us to create different
    files for each of those sites.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们可以将`access_log`和`error_log`指令单独放入每个虚拟主机的配置中。这样，我们可以为每个站点创建不同的文件。
- en: There's more...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can potentially combine the earlier recipe of different log formats and
    this recipe to create different kinds of access and error logs for each of your
    sites. This clearly exhibits the immense power that the Nginx logging module brings
    to the table for the system administrators.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将前面关于不同日志格式的配置与此方案结合，为每个站点创建不同的访问日志和错误日志。这清楚地展示了Nginx日志模块为系统管理员带来的强大功能。
- en: '[PRE9]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding example shows how we are logging the access and error logs with
    different formats, which are `main` and `error_main` respectively. This may be
    necessary in cases where one logs fewer variables for the access logs purposes
    and more esoteric variables to track errors in the error logs.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例展示了如何使用不同的格式记录访问日志和错误日志，分别是`main`和`error_main`。在某些情况下，可能需要记录较少的变量来进行访问日志，并在错误日志中跟踪更多晦涩的变量。
- en: Setting up log rotation
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置日志轮换
- en: In production sites that have been running for a decent amount of time, log
    archiving becomes a necessity. For proper log archiving, you will need to have
    a proper log rotation system in place. Every website request generates more than
    one log entry (as there are logging for the static files as well), so logs tend
    to bloat up quickly. This recipe helps you tackle the log rotation setup with
    Nginx, making sure you are archiving your logs correctly.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在已经运行了一段时间的生产站点中，日志归档变得非常必要。为了进行正确的日志归档，你需要设置一个合适的日志轮换系统。每个网站请求都会生成多个日志条目（因为静态文件也会记录日志），因此日志会迅速膨胀。此方法可以帮助你处理
    Nginx 的日志轮换设置，确保你正确归档日志。
- en: This depends on the logrotate script that is available, for example, on both
    Fedora and Debian distributions.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这取决于可用的 logrotate 脚本，例如 Fedora 和 Debian 发行版上都有。
- en: How to do it...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'You will need to add a configuration to the logrotate conf file:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要向 logrotate 配置文件中添加一个配置：
- en: '[PRE10]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This assumes that the Nginx configurations are placed in the `/var/log/nginx`
    directory and the Nginx PID file exists at `/var/run/nginx.pid`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这假设 Nginx 配置文件位于 `/var/log/nginx` 目录，并且 Nginx PID 文件位于 `/var/run/nginx.pid`。
- en: How it works...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This is a simple configuration for logrotate which effectively carries out
    the following steps:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的 logrotate 配置，能有效执行以下步骤：
- en: Moves the existing log file with a new filename and compresses it.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将现有日志文件移动并重命名为新文件名，并进行压缩。
- en: Makes a USR1 signal call to the Nginx master process, which releases the log
    which has just been moved and starts writing into a normal log file.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 Nginx 主进程发送 USR1 信号，它将释放刚刚移动的日志并开始写入正常的日志文件。
- en: The logrotate script allows very interesting configurations which allow you
    great control over when the log needs to be rotated, what compressions you need,
    and with what permissions the files to be archived.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: logrotate 脚本提供了非常有趣的配置选项，允许你在日志需要轮换时进行精细控制，选择需要的压缩方式，以及设置归档文件的权限。
- en: Enabling remote logging with syslog-ng
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用通过 syslog-ng 进行远程日志记录
- en: Imagine running a cluster of servers spread out over various geographies. In
    such a scenario, one will probably need to do remote logging on a set of redundant
    central logging servers. It makes life easier for log parsing and system administration
    tasks as well.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下运行一个分布在不同地理位置的服务器集群。在这种情况下，你可能需要在一组冗余的中央日志服务器上执行远程日志记录。这样可以更轻松地进行日志解析和系统管理任务。
- en: In this recipe, we will have a look at syslog-ng and Nginx to get them working
    together in a networked environment. This will involve some interesting things,
    like patching the Nginx codebase.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本方法中，我们将查看 syslog-ng 和 Nginx 如何在网络环境中协同工作。这将涉及一些有趣的内容，比如修改 Nginx 的代码库。
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'If you want to get the Nginx installation to interact with syslog-ng, you will
    need to carry out the following steps carefully. This recipe assumes that you
    have already installed syslog-ng on your system:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望让 Nginx 安装与 syslog-ng 进行交互，你需要小心执行以下步骤。本方法假设你已经在系统中安装了 syslog-ng：
- en: 'You will need to download Nginx from the following URL: ([http://nginx.org/download/nginx-0.7.67.tar.gz](http://nginx.org/download/nginx-0.7.67.tar.gz))'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要从以下网址下载 Nginx：([http://nginx.org/download/nginx-0.7.67.tar.gz](http://nginx.org/download/nginx-0.7.67.tar.gz))
- en: '[PRE11]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then untar the downloaded file:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后解压下载的文件：
- en: '[PRE12]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Download the patch: ([http://bugs.gentoo.org/attachment.cgi?id=197180](http://bugs.gentoo.org/attachment.cgi?id=197180))'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载补丁：([http://bugs.gentoo.org/attachment.cgi?id=197180](http://bugs.gentoo.org/attachment.cgi?id=197180))
- en: '[PRE13]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Apply the patch:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用补丁：
- en: '[PRE14]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Configure Nginx:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置 Nginx：
- en: '[PRE15]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Build and install Nginx:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并安装 Nginx：
- en: '[PRE16]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You will now need to configure the syslog client, adding the following configuration
    to `/etc/syslog-ng/syslog-ng.conf` and restarting the syslog-ng service:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在需要配置 syslog 客户端，将以下配置添加到 `/etc/syslog-ng/syslog-ng.conf` 中，并重启 syslog-ng
    服务：
- en: '[PRE17]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You will now need to configure the remote logging server `nginx_log` , adding
    the following configuration to `/etc/syslog-ng/syslog-ng.conf` and restarting
    the syslog-ng service:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在需要配置远程日志服务器 `nginx_log`，将以下配置添加到 `/etc/syslog-ng/syslog-ng.conf` 中，并重启 syslog-ng
    服务：
- en: '[PRE18]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can test this configuration out by running the following:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令来测试此配置：
- en: '[PRE19]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Nginx, by default, does not support syslog-ng and needs some patching to work
    correctly. So in the first set of steps we actually install Nginx with the patch
    and then proceed to configure syslog-ng.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Nginx 不支持 syslog-ng，并且需要一些补丁才能正常工作。所以在第一步中，我们实际上是安装了带有补丁的 Nginx，然后继续配置
    syslog-ng。
- en: There are two parts to the syslog-ng configuration. In the first we actually
    configure the client on which Nginx is running and make the local5 facility (where
    Nginx logs in our case) point to the syslog-ng server running on the `nginx_log`
    server. The second part involved configuring the syslog-ng server to accept log
    request from the remote client and putting them at certain locations on the hard
    drive.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: syslog-ng 配置分为两个部分。在第一部分中，我们实际上配置了运行 Nginx 的客户端，并使本地5级日志设施（在我们的案例中是 Nginx 日志）指向运行在
    `nginx_log` 服务器上的 syslog-ng 服务器。第二部分涉及配置 syslog-ng 服务器以接受来自远程客户端的日志请求，并将其存储在硬盘的特定位置。
- en: There is a small utility called "logger", which allows you to test out the logging
    on your machine without invoking Nginx. It's pretty nifty and lets you easily
    debug your syslog-ng setup.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个小工具叫做 "logger"，它允许你在不启动 Nginx 的情况下测试你机器上的日志。它非常实用，可以让你轻松调试 syslog-ng 设置。
- en: Setting up your custom logs for easy parsing
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置自定义日志以便于解析
- en: The point of logging is not only to find out errors in a setup, but also for
    various analytics that one can perform on the usage of the sites running on the
    server. There are various tools that are available that one can use to analyze
    your web logs. Some of the open source and freely available ones are AWstats,
    webalizer, and so on. We will have a look at how to set up for AWstats.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录的目的不仅是为了发现设置中的错误，还可以进行各种分析，分析运行在服务器上的站点的使用情况。有各种工具可以用来分析你的网页日志。一些开源且免费提供的工具包括
    AWstats、webalizer 等。我们将看看如何为 AWstats 进行设置。
- en: 'The following screenshot is a sample of the AWstats generated HTML report:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是 AWstats 生成的 HTML 报告示例：
- en: '![Setting up your custom logs for easy parsing](img/4965_03_01.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![设置自定义日志以便于解析](img/4965_03_01.jpg)'
- en: How to do it...
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: We will first have a look at how to install AWstats, and then configure it to
    create a continuous report around Nginx logs.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先看看如何安装 AWstats，然后配置它以围绕 Nginx 日志生成持续报告。
- en: 'Add the following to the Nginx configuration file:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到 Nginx 配置文件中：
- en: '[PRE20]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now we need to install the AWstats package, so download the latest version
    and then run the configuration wizard `awstats_configure.pl` to create a new statistics
    profile:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要安装 AWstats 包，下载最新版本并运行配置向导 `awstats_configure.pl` 来创建一个新的统计档案：
- en: '[PRE21]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can now open the file generated `/etc/awstats/awstats.www.example1.com.conf`
    and update the LogFile variable to the path of the Nginx log file (assuming that
    they are being log rotated).
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在可以打开生成的文件 `/etc/awstats/awstats.www.example1.com.conf`，并将 LogFile 变量更新为 Nginx
    日志文件的路径（假设它们正在进行日志轮换）。
- en: '[PRE22]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now you can test out the new log analysis by using the following command. This
    will also depend on where you installed the AWstats package:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你可以使用以下命令测试新的日志分析。这也取决于你安装 AWstats 包的位置：
- en: '[PRE23]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now you need to generate the reports in HTML, so you will need to create a
    directory and then run the HTML generation script:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你需要生成 HTML 格式的报告，因此你需要创建一个目录，然后运行 HTML 生成脚本：
- en: '[PRE24]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can now add some configuration to Nginx to expose this HTML analysis on
    your own domain:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在可以向 Nginx 添加一些配置，以便在你自己的域名上公开此 HTML 分析：
- en: '[PRE25]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Now you can visit [http://example1.com/awstats/awstats.www.example1.com.html](http://example1.com/awstats/awstats.www.example1.com.html)
    to see the resultant HTML.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你可以访问 [http://example1.com/awstats/awstats.www.example1.com.html](http://example1.com/awstats/awstats.www.example1.com.html)
    查看生成的 HTML。
- en: How it works...
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: This is a fairly simple setup, where we are initially setting up the logging
    format on Nginx so that we are able to fully exploit all that AWstats can generate
    for us. Then we go on to install AWstats, which is a set of Perl scripts. We generate
    a configuration for our domain `www.example1.com` and then start analyzing the
    log. In addition to the basic analysis, we can also generate really easy-to-use
    HTML reports.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相对简单的设置，我们首先在 Nginx 上设置日志格式，以便能够充分利用 AWstats 为我们生成的所有内容。然后我们继续安装 AWstats，这是一个
    Perl 脚本集。我们为我们的域 `www.example1.com` 生成一个配置文件，并开始分析日志。除了基本分析外，我们还可以生成非常易于使用的 HTML
    报告。
- en: There's more...
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容……
- en: 'A tool like AWstats allows you to track things like:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 像 AWstats 这样的工具可以帮助你追踪以下内容：
- en: Visits (the number of unique visitors)
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问量（独立访客数量）
- en: Access time and the last visit
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问时间和最后一次访问
- en: User authentication (last time logged in using site credentials)
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户认证（上次使用站点凭据登录的时间）
- en: Weekly peak time (the number of pages, click-through rate per hour, and week
    kilobytes)
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每周高峰时段（每小时的页面数量、点击率和每周流量）
- en: Name/country hosts visitors (pages, click-through rate, byte, 269 domains/ countries
    detected, GeoIP detection)
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机/国家访客（页面数、点击率、字节数，检测到 269 个域名/国家，GeoIP 检测）
- en: Host list of recently visited and did not resolve the IP address list
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最近访问的主机列表和未解析的 IP 地址列表
- en: Most read entry and exit pages
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读量最多的入口页和出口页
- en: File types
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件类型
- en: Site compression tables (mod_gzip or mod_deflate)
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 站点压缩表（mod_gzip 或 mod_deflate）
- en: Operating system (one for each operating system, the number of pages, click-through
    rate, byte, 35 OS detected)
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统（每种操作系统的页面数量、点击率、字节数，检测到 35 个操作系统）
- en: Type of browsers used
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用的浏览器类型
- en: Robot visits (319 robots detected)
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器人访问（检测到 319 个机器人）
- en: Worm attacks (5 worm family)
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蠕虫攻击（5 个蠕虫家族）
- en: Search engines statistics about what keywords lead users to your site
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索引擎统计数据，关于哪些关键词将用户引导到你的网站
- en: HTTP protocol error (the most recent inspection did not find the page)
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP 协议错误（最近的检查未找到页面）
- en: Other reports based on the personalized URL and link parameters, involving the
    field of integrated marketing purpose
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于个性化 URL 和链接参数的其他报告，涉及综合营销的目的
- en: Your site by adding "favorite bookmarks" views
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过添加“收藏书签”视图来优化你的网站
- en: Screen size (in the index page of the need to add some HTML tags)
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 屏幕大小（需要在首页添加一些 HTML 标签）
- en: 'The proportion of browser support: Java, Flash, RealG2 reader, Quicktime reader,
    WMA reader, PDF reader'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器支持的比例：Java、Flash、RealG2 阅读器、Quicktime 阅读器、WMA 阅读器、PDF 阅读器
- en: The ratio of load-balancing server cluster report
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载均衡服务器集群报告的比例
- en: The preceding setup was not completely automated after you run the script for
    the first time. We can take a step ahead and put all this in a cron script that
    will help us run it as a cron job.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在你第一次运行脚本后，之前的设置并没有完全自动化。我们可以更进一步，将这一切放入一个 cron 脚本中，这样我们就可以将其作为 cron 任务来运行。
- en: You will need to add the following in your cron (crontab `e):`
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在你的 cron 中添加以下内容（crontab `e`）：
- en: '[PRE26]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This above cron job basically fires up a script every day at 1:00AM. The job
    of the script is to parse and generate the reports for the sites that it is configured
    for.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的 cron 任务基本上是在每天的 1:00AM 启动一个脚本。脚本的任务是解析并生成为其配置的站点的报告。
