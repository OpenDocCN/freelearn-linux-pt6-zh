["```\nuser www-data;\nworker_processes 1;\nerror_log /var/log/nginx/error.log;\npid /var/run/nginx.pid;\nevents {\nworker_connections 1024;\n}\nhttp {\ninclude /etc/nginx/mime.types;\ndefault_type application/octet-stream;\naccess_log /var/log/nginx/access.log;\nsendfile on;\ntcp_nodelay on;\ntcp_nopush off;\nâ€¦\n}\n\n```", "```\nuser www-data;\nworker_processes 1;\nerror_log /var/log/nginx/error.log;\npid /var/run/nginx.pid;\nevents {\nworker_connections 1024;\n}\nhttp {\ninclude /etc/nginx/mime.types;\ndefault_type application/octet-stream;\naccess_log /var/log/nginx/access.log;\n. . .\n#keepalive_timeout 65;\nkeepalive_timeout 3;\n. . .\n}\n\n```", "```\nserver {\nserver_name www.example1.com;\nlocation / {\nset $memcached_key $uri;\nmemcached_pass 127.0.0.1:11211;\ndefault_type text/html;\nerror_page 404 @fallback;\n}\nlocation @fallback {\nproxy_pass http://backend;\n}\n}\n\n```", "```\nuser www-data;\nworker_processes 1;\nworker_rlimit_nofile 206011;\nerror_log /var/log/nginx/error.log;\npid /var/run/nginx.pid;\nevents {\nevent select;\nworker_connections 1024;\n}\nhttp {\n...\n}\n\n```", "```\nlocation ~* \\.(jpg|jpeg|gif|css|png|js|ico|html)$ {\nexpires max;\n}\nlocation / {\n...\nproxy_pass http://backend;\n}\n\n```", "```\nlocation / {\n...\nif ($http_user_agent ~* aesop_com_spiderman|alexibot|backweb|bandit|batchftp|bigfoot|black.?hole|blackwidow|blowfish|botalot|buddy|builtbottough|bullseye|cheesebot|cherrypicker|chinaclaw|collector|copier|copyrightcheck|cosmos|crescent|curl|custo|da|diibot|disco|dittospyder|dragonfly|drip|easydl|ebingbong|ecatch|eirgrabber) {\nrewrite ^/ http://www.example1.com/robots.txt;\n}\nproxy_pass http://backend;\n}\n\n```", "```\nserver {\nlisten 80;\nserver_name example1.com;\nlocation / {\n...\n}\n}\nserver {\nlisten 80;\nserver_name www.example1.com;\nrewrite ^ http://example1.com$uri permanent;\n}\n\n```", "```\n    wget http://wiki.nginx.org/File:Mod_strip-0.1.tar.gz\n    tar xvzf Mod_strip-0.1.tar.gz\n\n    ```", "```\n    ./configure add-module=../Mod_strip-0.1\n    make && make install\n\n    ```", "```\n    location / {\n    strip on;\n    . . .\n    proxy_pass http://backend;\n    }\n\n    ```", "```\n    ./configure --with-http_stub_status_module\n    make && make install\n\n    ```", "```\n    location /nginx_status {\n    stub_status on;\n    access_log off;\n    }\n\n    ```", "```\nActive connections: 291\nserver accepts handled requests\n16630948 16630948 31070465\nReading: 6 Writing: 179 Waiting: 106\n\n```", "```\n    ./configure --with-http_stub_status_module\n    Make && make install\n\n    ```", "```\n    location /nginx_status {\n    stub_status on;\n    access_log off;\n    }\n\n    ```", "```\n    cd /usr/share/munin/plugins\n    sudo wget -O nginx_request http://exchange.munin-monitoring.org/plugins/nginx_request/version/2/download\n    sudo wget -O nginx_status http://exchange.munin-monitoring.org/plugins/nginx_status/version/3/download\n    sudo wget -O nginx_memory http://exchange.munin-monitoring.org/plugins/nginx_memory/version/1/download\n    sudo chmod +x nginx_request\n    sudo chmod +x nginx_status\n    sudo chmod +x nginx_memory\n\n    ```", "```\n    sudo ln -s /usr/share/munin/plugins/nginx_request /etc/munin/plugins/nginx_request\n    sudo ln -s /usr/share/munin/plugins/nginx_status /etc/munin/plugins/nginx_status\n    sudo ln -s /usr/share/munin/plugins/nginx_memory /etc/munin/plugins/nginx_memory\n\n    ```", "```\n    [nginx*]\n    env.url http://localhost/nginx_status\n\n    ```", "```\nsudo /etc/init.d/munin-node restart\n\n```", "```\n    ./configure --with-http_gzip_static_module\n    Make && make install\n\n    ```", "```\n    http {\n    . . .\n    gzip_static on;\n    gzip_http_version 1.1;\n    gzip_proxied expired no-cache no-store private auth;\n    gzip_disable \"MSIE [1-6]\\.\";\n    gzip_vary on;\n\n    ```", "```\nserver {\nserver_name www.example1.com;\nlocation ~* ^.+\\.(jpg|jpeg|gif)$ {\nvalid_referers none blocked example1.com www.example1.com;\nif ($invalid_referer) {\nreturn 444;\n}\n}\n...\n}\n\n```", "```\n    ./configure -with-http_perl_module\n    Make && make install\n\n    ```", "```\n    http {\n    perl_modules perl;\n    perl_require Javascript/Minifier.pm;\n    perl_require Minify.pm;\n    root /var/www;\n    server {\n    server_name www.example1.com;\n    location / {\n    index index.html index.htm;\n    }\n    location ~ \\.js$ {\n    perl Minify::handler;\n    }\n    }\n    }\n\n    ```", "```\n    package Minify;\n    use nginx;\n    use JavaScript::Minifier qw(minify);\n    sub handler {\n    my $r=shift;\n    my $cache_dir=\"/tmp\"; # Cache directory where minified files will be kept\n    my $cache_file=$r->uri;\n    $cache_file=~s!/!_!g;\n    $cache_file=join(\"/\", $cache_dir, $cache_file);\n    my $uri=$r->uri;\n    my $filename=$r->filename;\n    return DECLINED unless -f $filename;\n    if (! -f $cache_file) {\n    JavaScript filesminifying, with embedded Perlopen(INFILE, $filename) or die \"Error reading file: $!\";\n    open(OUTFILE, '>' . $cache_file ) or die \"Error writting file: $!\";\n    minify(input => *INFILE, outfile => *OUTFILE);\n    close(INFILE);\n    close(OUTFILE);\n    }\n    $r->sendfile($cache_file);\n    return OK;\n    }\n    1;\n    __END__\n\n    ```", "```\n    ./configure --with-http_perl_module\n    Make && make install\n\n    ```", "```\n    http {\n    perl_modules perl;\n    perl_require CSS/Minifier.pm;\n    perl_require Minify.pm;\n    root /var/www;\n    server {\n    location / {\n    embedded PerlCSS files, minifying withindex index.html index.htm;\n    }\n    location ~ \\.css$ {\n    perl Minify::handler;\n    }\n    }\n    }\n\n    ```", "```\n    package Minify;\n    use nginx;\n    use CSS::Minifier qw(minify);\n    sub handler {\n    my $r=shift;\n    my $cache_dir=\"/tmp\"; # Cache directory where minified files will be kept\n    my $cache_file=$r->uri;\n    $cache_file=~s!/!_!g;\n    $cache_file=join(\"/\", $cache_dir, $cache_file);\n    my $uri=$r->uri;\n    my $filename=$r->filename;\n    return DECLINED unless -f $filename;\n    if (! -f $cache_file) {\n    open(INFILE, $filename) or die \"Error reading file: $!\";\n    open(OUTFILE, '>' . $cache_file ) or die \"Error writting file: $!\";\n    minify(input => *INFILE, outfile => *OUTFILE);\n    close(INFILE);\n    close(OUTFILE);\n    }\n    $r->sendfile($cache_file);\n    return OK;\n    }\n    1;\n    __END__\n\n    ```", "```\n    http {\n    include mime.types;\n    default_type application/octet-stream;\n    perl_modules perl;\n    perl_require Sitemap.pm;\n    keepalive_timeout 65;\n    server {\n    listen 80;\n    server_name www.example1.com;\n    location / {\n    root html;\n    index index.html index.htm;\n    }\n    location /sitemap.xml {\n    perl Sitemap::handler;\n    }\n    }\n    }\n\n    ```", "```\n    package Sitemap;\n    use nginx;\n    use LWP::Simple;\n    our $basedir=\"/var/www/www.example1.com\";\n    sub handler {\n    my $r=shift;\n    my $cache_dir=\"/tmp\"; # Cache directory where minified files will be kept\n    my $cache_file=$r->uri;\n    $cache_file=~s!/!_!g;\n    $cache_file=join(\"/\", $cache_dir, $cache_file);\n    my $uri=$r->uri;\n    my $filename=$r->filename;\n    return DECLINED unless -f $filename;\n    if (! -f $cache_file) {\n    `python sitemap_gen.py` # Assumes that google sitemap generator is in the same directory\n    }\n    $r->sendfile($cache_file);\n    return OK;\n    }\n    1;\n    __END__\n\n    ```", "```\n    server {\n    listen 80;\n    server_name example1.com;\n    access_log /var/log/nginx/example1.com.access.log;\n    error_log /var/log/nginx/example1.com.error.log;\n    root /var/www/example1.com;\n    index index.php;\n    location / {\n    rewrite ^/(.*)/$ /$1 permanent; # remove trailing slashes\n    try_files $uri @cache;\n    }\n    location @cache {\n    if ( $request_method !~ GET ) {\n    return 405;\n    }\n    if ($http_cookie ~ \"DRUPAL_UID\") {\n    return 405;\n    }\n    error_page 405 = @drupal;\n    expires epoch;\n    add_header Cache-Control \"must-revalidate, post-check=0, pre-check=0\";\n    Nginxboost module, setting up on Drupal withcharset utf-8;\n    try_files /cache/$host${uri}_$args.html @drupal;\n    }\n    location @drupal {\n    rewrite ^/(.*)$ /index.php?q=$1 last;\n    }\n    location ~* (/\\..*|settings\\.php$|\\.(htaccess|engine|inc|info|install|module|profile|pl|po|sh|.*sql|theme|tpl(\\.php)?|xtmpl)$|^(Entries.*|Repository|Root|Tag|Template))$ {\n    deny all;\n    }\n    location ~ \\.php$ {\n    try_files $uri @drupal;\n    fastcgi_pass 127.0.0.1:9000;\n    fastcgi_index index.php;\n    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    include /etc/nginx/fastcgi_params;\n    }\n    location ~ \\.css$ {\n    if ( $request_method !~ GET ) {\n    return 405;\n    }\n    if ($http_cookie ~ \"DRUPAL_UID\") {\n    return 405;\n    }\n    error_page 405 = @uncached;\n    access_log off;\n    Nginxboost module, setting up on Drupal withexpires max; #if using aggregator\n    try_files /cache/$host${uri}_.css $uri =404;\n    }\n    location ~ \\.js$ {\n    if ( $request_method !~ GET ) {\n    return 405;\n    }\n    if ($http_cookie ~ \"DRUPAL_UID\") {\n    return 405;\n    }\n    error_page 405 = @uncached;\n    access_log off;\n    expires max; # if using aggregator\n    try_files /cache/$host${uri}_.js $uri =404;\n    }\n    location @uncached {\n    access_log off;\n    expires max;\n    }\n    location ~* ^.+\\.(jpg|jpeg|gif|png|ico)$ {\n    if ($http_referer !~ ^(http://example1.com) ) { # prevent image hijacking\n    return 444;\n    }\n    access_log off;\n    expires 45d;\n    try_files $uri =404;\n    }\n    }\n\n    ```", "```\n    ./configure --with-http_flv_module\n    Make && make install\n\n    ```", "```\n    location ~ \\.flv$ {\n    flv;\n    }\n\n    ```", "```\nupstream backend {\n. . .\n}\nserver {\nserver_name www.example1.com;\n. . .\nlocation / {\nempty_gif;\npost_action /post;\n}\nlocation = /post {\ninternal;\nproxy_pass http://backend;\n}\n}\n\n```"]