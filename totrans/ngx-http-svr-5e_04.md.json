["```\nrewrite hel{2,}o /hello.php; # invalid\nrewrite \"hel{2,}o\" /hello.php; # valid\nrewrite 'hel{2,}o' /hello.php; # valid\n```", "```\nserver {\n    server_name website.com;\n    location ~* ^/(downloads|files)/(.*)$ {\n        add_header Capture1 $1;\n        add_header Capture2 $2;\n    }\n}\n```", "```\nserver {\n    server_name website.com;\n    location = /document.html {\n        deny all; # example directive\n    }\n}\n```", "```\nserver {\n    server_name website.com;\n    error_page 403 /errors/forbidden.html;\n    error_page 404 /errors/not_found.html;\n}\n```", "```\nserver {\n    server_name website.com;\n    root /var/www/vhosts/website.com/httpdocs/;\n    error_page 404 /errors/404.html;\n    location /errors/ {\n        alias /var/www/common/errors/;\n        internal;\n    }\n}\n```", "```\n->http request line: \"GET /page.html HTTP/1.1\"\n->http uri: \"/page.html\"\n->test location: \"/errors/\"\n->using configuration \"\"\n->http filename: \"/var/www/vhosts/website.com/httpdocs/page.html\"\n-> open() \"/var/www/vhosts/website.com/httpdocs/page.html\" failed (2: No such file or directory), client: 127.0.0.1, server: website.com, request: \"GET /page.html HTTP/1.1\", host:\"website.com\"\n->http finalize request: 404, \"/page.html?\" 1\n->http special response: 404, \"/page.html?\"\n->internal redirect: \"/errors/404.html?\"\n->test location: \"/errors/\"\n->using configuration \"/errors/\"\n->http filename: \"/var/www/common/errors/404.html\"\n->http finalize request: 0, \"/errors/404.html?\" 1\n```", "```\nserver {\n    server_name website.com;\n    root /var/www/vhosts/website.com/httpdocs/;\n    location /storage/ {\n        internal;\n        alias /var/www/storage/;\n    }\n    location /documents/ {\n        rewrite ^/documents/(.*)$ /storage/$1;\n    }\n}\n```", "```\n->http request line: \"GET /documents/file.txt HTTP/1.1\"\n->http uri: \"/documents/file.txt\"\n->test location: \"/storage/\"\n->test location: \"/documents/\"\n->using configuration \"/documents/\"\n->http script regex: \"^/documents/(.*)$\"\n->\"^/documents/(.*)$\" matches \"/documents/file.txt\", client: 127.0.0.1, server: website.com, request: \"GET /documents/file.txt HTTP/1.1\", host: \"website.com\"\n->rewritten data: \"/storage/file.txt\", args: \"\", client: 127.0.0.1, server: website.com, request: \"GET /documents/file.txt HTTP/1.1\", host: \"website.com\"\n->test location: \"/storage/\"\n->using configuration \"/storage/\"\n->http filename: \"/var/www/storage/file.txt\"\n->HTTP/1.1 200 OK\n->http output filter \"/storage/test.txt?\"\n```", "```\nserver {\n    server_name website.com;\n    location /documents/ {\n        rewrite ^(.*)$ /documents/2018/$1;\n    }\n}\n```", "```\n->test location: \"/documents/\"\n->using configuration \"/documents/\"\n->rewritten data: \"/documents/2018//documents/file.txt\", [...]\n->test location: \"/documents/\"\n->using configuration \"/documents/\"\n->rewritten data: \"/documents/2018//documents/2018//documents/file.txt\" [...]\n->test location: «/documents/»\n->using configuration «/documents/»\n->rewritten data: -\n>»/documents/2018//documents/2018//documents/2018//documents/file.txt» [...]\n->[...]\n```", "```\nserver {\n    if ($request_method = POST) {\n      [...]\n    }\n}\n```", "```\nif ($uri ~ /search/) {\n  [...]\n}\nlocation ~ /search/ {\n    [...]\n}\n```", "```\nindex index.php index.html index.htm;\nindex index.php index2.php /catchall.php;\n```", "```\nlocation /admin/ {\n    auth_basic \"Admin control panel\"; # variables are supported\n    auth_basic_user_file access/password_file;\n}\n```", "```\nlocation {\nallow 127.0.0.1; # allow local IP address\nallow unix:; # allow UNIX domain sockets\n    deny all; # deny all other IP addresses\n}\n```", "```\nlimit_conn_zone $binary_remote_addr zone=myzone:10m;\n```", "```\nlimit_conn zone_name connection_limit;\n```", "```\nlocation /downloads/ {\n    limit_conn myzone 1;\n}\n```", "```\nlimit_req_zone $variable zone=name:max_memory_size rate=rate;\n```", "```\nlimit_req zone=name burst=burst [nodelay];\n```", "```\nlimit_req_zone $binary_remote_addr zone=myzone:10m rate=2r/s;\n[...]\nlocation /downloads/ {\nlimit_req zone=myzone burst=10;\nlimit_req_status 404; # returns a 403 error if limit is exceeded\n}\n```", "```\nlocation /downloads/ {\n# if the script below returns a 200 status code,\n# the download is authorized\nauth_request /authorization.php;\n}\n```", "```\nlocation /downloads/ {\n     # requests authorization from PHP script\n     auth_request /authorization.php;\n     # assuming authorization is granted, get filename from\n     # sub-request response header and redirect\n     auth_request_set $filename \"${upstream_http_x_filename}.zip\";\n    rewrite ^ /documents/$filename;\n}\n```", "```\nlocation = /empty.gif {\n    empty_gif;\n}\n```", "```\nlocation ~* \\.mp4 {\n    mp4;\n}\n```", "```\naddition_types mime_type1 [mime_type2...];\naddition_types *;\n```", "```\nsub_filter searched_text replacement_text;\n```", "```\nserver {\n    server_name example.com;\n    [...]\n    location / {\n        set $memcached_key $uri;\n        memcached_pass 127.0.0.1:11211;\n        error_page 404 @notcached;\n    }\n    location @notcached {\n        internal;\n        # if the file is not found, forward request to proxy\n        proxy_pass 127.0.0.1:8080;\n    }\n}\n```", "```\nmodern_browser opera 10.0;\n```", "```\nmap $uri $variable {\n  /page.html  0;\n  /contact.html  1;\n  /index.html  2;\n  default 0;\n}\nrewrite ^ /index.php?page=$variable;\n```", "```\nmap $http_referer $ref {\n~google \"Google\";\n    ~* yahoo \"Yahoo\";\n    \\~bing \"Bing\"; # not a regular expression due to the \\ before the tilde\ndefault $http_referer; # variables may be used\n}\n```", "```\ngeo $variable {\n  default unknown;\n  127.0.0.1   local;\n  123.12.3.0/24  uk;\n  92.43.0.0/16  fr;\n}\n```", "```\ngeoip_country country.dat; # country information db\ngeoip_city city.dat; # city information db\ngeoip_org geoiporg.dat; # ISP/organization db\n```", "```\nvalid_referers none blocked *.website.com *.google.com;\n  if ($invalid_referer) {\n  return 403;\n}\n```", "```\nreal_ip_header X-Forwarded-For;\nset_real_ip_from 192.168.0.0/16;\nset_real_ip_from 127.0.0.1;\nset_real_ip_from unix:; # trusts all UNIX-domain sockets\n```", "```\ncat secure.website.com.crt gd_bundle.crt > combined.crt\n```", "```\nserver {\n    listen 443;\n    server_name secure.website.com;\n    ssl on;\n    ssl_certificate /path/to/combined.crt;\n    ssl_certificate_key /path/to/secure.website.com.key;\n    [...]\n}\n```", "```\nlocation = /nginx_status {\n    stub_status on;\n    allow 127.0.0.1; # you may want to protect the information\n    deny all;\n}\n```", "```\nActive connections: 1\nserver accepts handled requests\n10 10 23\nReading: 0 Writing: 1 Waiting: 0\n```", "```\ndegradation sbrk=500m; # to be inserted at the http block level\ndegrade 204; # in a location block, specify the error code (204 or 444) to return in case the server condition has degraded\n```", "```\n    tar xzf module.tar.gz\n    ```", "```\n    ./configure --add-module=/module/source/path [...]\n    ```"]