- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Case Studies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, we’ve navigated the broad capabilities of NGINX, from
    delivering static content to implementing intricate load-balancing strategies.
    Your newfound knowledge extends from basic NGINX setup on servers to tailor-fit
    configurations for diverse web applications, enhanced by a variety of advanced
    modules that unlock complex features.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it’s time to apply what we’ve learned through a series of real-world scenarios.
    Securing communications with HTTPS will be our foundational step, ensuring all
    interactions with your web services are encrypted by default. With this security
    measure in place, we’ll progress to setting up a complete WordPress site. Here,
    we’ll not only focus on getting your site live with NGINX but also on utilizing
    the secure channels we’ve established, integrating best practices for optimization
    and caching to enhance performance.
  prefs: []
  type: TYPE_NORMAL
- en: As we progress, the chapter will guide you in deploying a Nextcloud instance,
    illustrating how to establish a secure, private cloud storage solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers:'
  prefs: []
  type: TYPE_NORMAL
- en: SSL certificates and HTTPS by default
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing HTTP/2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying WordPress, efficient content management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying NextCloud, a robust personal cloud service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring SSL Certificates and HTTPS by default
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Digital security is paramount, adopting a *security-first* approach is not just
    best practice—it’s essential. As such, plaintext transmission is no longer acceptable;
    SSL encryption is the new standard.
  prefs: []
  type: TYPE_NORMAL
- en: Recognizing this, we turn to `ssl.conf`, which will serve as a reusable component
    in all our secure site configurations. This foundation of SSL by default sets
    a robust stage for all web services we deploy.
  prefs: []
  type: TYPE_NORMAL
- en: Certificate Management with acme.sh
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Step by step, we’ll learn how to exploit acme.sh’ integration with DNS APIs,
    simplifying the validation process for certificate issuance. By the end of this
    tutorial, you’ll have the knowledge you need to obtain your first signed wildcard
    certificate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s begin with the installation of acme.sh:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Then add the alias “`alias acme.sh=~/.acme.sh/acme.sh`” into the file “/root/.bashrc”
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify acme.sh has been installed properly. First, make sure to close and reopen
    your terminal (or ssh session), as advised by the installation script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1: acme.sh script inviting us to close and reopen the terminal
    session.](img/B21787_10_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.1: acme.sh script inviting us to close and reopen the terminal session.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then run `acme.sh --version`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Acme.sh has now been installed. We’ll be using acme.sh to generate a wildcard
    certificate but before we do so, let’s have a quick look at what is a wildcard
    certificate, why we want one, and how acme.sh will help us generate one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine the following: we own the domain `example.com`. Using acme.sh, we’ll
    be generating one single certificate which will be valid for multiple domains.
    The first domain will be `example.com` and the second domain will be `*.example.com`.
    There are many reasons why we want to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: First, to make things easier. No need to adapt the NGINX configuration to run
    on port 80 with specific folders. Once you have the certificate for your domain,
    you know you can use it for a subdomain, and reuse the same certificate for a
    different subdomain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second, to enhance the security of your infrastructure by preventing scanners.
    Each signed certificate is publicly available and you can find them with tools
    like [https://crt.sh](https://crt.sh).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To generate wildcard certificates, the fastest way is through DNS API. This
    means that you will be creating a temporary subdomain to let the certificate authority
    know you own the domain. For example, you will be creating “yes-i-own-it-12345.example.com”
    and in exchange, the certificate authority will issue a certificate. We’ll learn
    how to do that automatically, by giving acme.sh the right to create temporary
    subdomains. Once set, your certificates will be renewed automatically, every 90
    days.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will be using the Cloudflare API but know that acme.sh
    supports many more registrars, over a hundred registrars. The list is available
    in their official github repo, here: [https://github.com/acmesh-official/acme.sh/wiki/dnsapi](https://github.com/acmesh-official/acme.sh/wiki/dnsapi).'
  prefs: []
  type: TYPE_NORMAL
- en: acme.sh and the DNS API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using Cloudflare, let’s get the API key:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2: Obtaining the Cloudflare API key](img/B21787_10_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.2: Obtaining the Cloudflare API key'
  prefs: []
  type: TYPE_NORMAL
- en: As shown above, you can get the API key by going to **Profile** and then selecting
    **View** for **Global** **API Key**
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, let’s say our API Key is `abcd1234`. We will store it in
    `/root/.acme.sh/account.conf` alongside the email address used for your Cloudflare
    account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Issuing a signed certificate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’re now set to have our first signed certificate. We’ve installed acme.sh
    and we’ve given acme.sh the right to access our domain `example.com`. Our next
    step is to use acme.sh to issue a certificate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will make acme.sh contact Cloudflare to create temporary subdomains,
    then have a Certificate Authority (default: zerossl) sign the certificate it just
    generated, and will delete the temporary subdomains.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3: Confirmation that acme.sh generated and issued a signed certificate.](img/B21787_10_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.3: Confirmation that acme.sh generated and issued a signed certificate.'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations on your first signed wildcard certificate! In the next subsection,
    we will be centralizing NGINX’ SSL configuration within one configuration, using
    our existing certificate.
  prefs: []
  type: TYPE_NORMAL
- en: Centralizing SSL Configuration with NGINX
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the last subsection, we’ve learned how to obtain signed certificates. We’re
    going to use these certificates in the NGINX configuration. The challenge we have
    is that depending on our setup, we might need to use the certificate in multiple
    places as it is valid for multiple subdomains. In order to avoid repetition, and
    to manage our configuration in the easiest way possible, we’ll write a configuration
    file that we will include later into other configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, let’s write our file `ssl.conf`. This file has to be stored within
    the NGINX configuration folder, such as `/etc/nginx/` for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: And that’s it! As we will deploy new projects, we will include this `ssl.conf`
    file to save time.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will introduce HTTP/2.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing HTTP/2 with SSL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**HTTP/2** stands as a significant evolution of the HTTP protocol, designed
    to enhance web performance and efficiency. With features like multiplexing, which
    allows for multiple requests and responses over a single connection, and header
    compression to minimize overhead, HTTP/2 makes web browsing noticeably faster
    and more resource-efficient. Another key feature is server push, where servers
    preemptively send resources to the client without waiting for a request, further
    optimizing load times.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how you can enable HTTP/2 in your server block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Be sure to activate HTTP/2 when setting up SSL, it is well-supported by modern
    browsers but requires a secure connection.
  prefs: []
  type: TYPE_NORMAL
- en: Although HTTP/3 offers promising advancements, it’s not quite ready for widespread
    production use just yet. We encourage you to keep an eye on its development as
    we believe it will be exciting to implement when it’s fully ready.
  prefs: []
  type: TYPE_NORMAL
- en: Coming next, we’ll walk through setting up a **WordPress site** with secure
    certificates and HTTP/2 enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a WordPress site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WordPress is currently the most popular content management system on the entire
    web. According to Kinsta ([https://kinsta.com/wordpress-market-share/](https://kinsta.com/wordpress-market-share/)),
    its market share totals 42%. For a lot of web server administrators, setting up
    WordPress sites or blogs has become a common task, whether it is for personal
    or professional use.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your server and obtaining WordPress
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will be getting your server ready for downloading and installing
    the WordPress application. There will be a few configuration files to go through
    to make sure WordPress runs smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: System requirements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first step you need to go through to set up a WordPress site on a fresh
    new server is to make sure you have the necessary components installed and up
    to date: it is recommended that you run at least PHP 8.1 and MySQL Server 8\.
    If you haven’t done so yet, running the following commands will provide a basic
    working environment with minimal PHP extensions. Under a Debian-based Linux operating
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If your server runs a Red Hat-based OS, such as Fedora:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you have an older version installed on your system, it is recommended that
    you upgrade to the latest available version using the `apt update && apt upgrade`
    or `dnf upgrade --``refresh` commands.
  prefs: []
  type: TYPE_NORMAL
- en: PHP configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After making sure your server components meet the minimum requirements, you
    should edit some of the settings, if you want WordPress to run smoothly. There
    are two main aspects of the PHP configuration you should look into. First, the
    default PHP configuration file (`php.ini`) contains directives that you will probably
    want to update:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cgi.fix_pathinfo`: Set this value to `0` for security reasons, as we have
    seen in [*Chapter 5*](B21787_05.xhtml#_idTextAnchor557).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post_max_size`: By default, the maximum size of the `POST` request body is
    `8` megabytes. Increase the value if necessary; keep in mind that file uploads
    are usually performed via `POST` requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`upload_max_filesize`: Set to `2` megabytes by default, this will need to be
    increased if you want to allow uploading of large files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date.timezone`: You will get a warning if you leave this blank as it is by
    default. Refer to [https://php.net/manual/en/timezones.php](https://php.net/manual/en/timezones.php)
    to find out the proper value in your situation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second aspect of the configuration is the PHP-FPM side. The main `php-fpm.conf`
    file does not require immediate changes, however, if you haven’t done so yet,
    you will need to create a *configuration pool*: a set of configuration directives
    that apply to a particular website or application. This allows you to run the
    PHP processes under a specific user account, and optionally configure a specific
    network interface for communicating with NGINX.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new pool by declaring its name between brackets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Append the following configuration directives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Optionally, you may enable *chrooting*: specify a root directory for the PHP
    processes of this pool. For example, if you set the chroot to `/home/wordpress/www`,
    your PHP scripts will only be able to read files and directories within the specified
    path (any attempt to read or write a file or directory outside of `/home/wordpress/www`
    will systematically fail). It is highly recommended you enable this feature: should
    a security breach be discovered in the WordPress code, attackers would only be
    able to exploit files within the reach of your PHP process; the rest of your server
    would not be compromised:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Other configuration directives are documented at length in the default pool
    file supplied with PHP-FPM; their default values are suitable in most cases.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the time of installing MySQL server, you were asked to set up administrator
    (`root`) credentials. Since these credentials allow full access to the SQL server,
    including permissions on all databases, you should never use them in any of your
    PHP applications. The best practice is to create a separate MySQL user and to
    assign permissions on the database that will be used by your application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to your local MySQL server with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new SQL database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'exit command to leave the MySQL console and try logging in to the server using
    the newly created account:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Downloading and extracting WordPress
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The last step is to download the latest version of WordPress and extract it
    at the location specified earlier; in our example: `/home/wordpress/www`. The
    latest version can always be found at [https://wordpress.org/latest.tar.gz](https://wordpress.org/latest.tar.gz):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure the user and group are properly set, and give write permissions to
    the `wordpress` user over the application files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: NGINX configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you can begin setting up WordPress via the user-friendly web installer,
    you will need to finalize your NGINX server configuration. We will go down to
    every last detail in the following subsections.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP block
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will be going down the blocks starting at the top level: the HTTP blocks,
    encompassing directives that have an effect on the entire server. This implies
    that the directives placed here will affect all of the websites served by this
    instance of NGINX. Open your NGINX main configuration file (`nginx.conf`) and
    insert or update the following directives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Server block
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following step will require you to create a new file in the directory specified
    earlier. For example, create a file called `wordpress.conf` in the `/etc/nginx/sites-available/`
    folder. Define your virtual host configuration by inserting or updating the following
    directives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Once done, create a symlink for /etc/NGINX/sites-available/wordpress.conf in
    /etc/NGINX/sites-enabled/ with the following command: `ln -s /``etc/nginx/sites-available/wordpress.conf
    /etc/nginx/sites-enabled/`'
  prefs: []
  type: TYPE_NORMAL
- en: Location blocks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Finally, set up your `location` blocks—directives that apply to specific locations
    on your site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: WordPress configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once your NGINX configuration is finalized and saved, make sure to reload the
    NGINX configuration, either via `systemctl reload nginx` or `/usr/local/nginx/sbin/nginx
    -s reload` (or your usual NGINX binary location).
  prefs: []
  type: TYPE_NORMAL
- en: 'If all goes well, you should be able to run the web-based WordPress installer
    by visiting `https://example.com/wp-admin/install.php` (replacing `example.com`
    by your own domain name). You will be prompted for:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The name of the database you created earlier, in our example: `wordpress`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The SQL username you created earlier, in our example: `wordpress`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The password associated to the user: `password`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The database host: `127.0.0.1`, if your MySQL server is hosted on the same
    server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A prefix for all SQL tables created by WordPress: `wp_`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 10.4: WordPress database installation page](img/B21787_10_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.4: WordPress database installation page'
  prefs: []
  type: TYPE_NORMAL
- en: Once the installer completes, you can begin configuring and preparing your WordPress
    site. In order to enable pretty URLs, you should check the `https://example.com/post-name/`
    or `https://example.com/year/month/post-name/`.
  prefs: []
  type: TYPE_NORMAL
- en: …We’ve deployed Wordpress. In the next section, we’ll be deploying Nextcloud
    alongside Wordpress using Docker to properly isolate our configurations for Wordpress
    and Nextcloud.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying Nextcloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Nextcloud** represents the pinnacle of self-hosted cloud services, offering
    not just file storage, but also integrated calendars, contacts, and collaboration
    tools. As an open-source solution, it provides transparency and control, ensuring
    that your data is truly yours.'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will navigate the setup of Nextcloud on an NGINX server,
    emphasizing secure communication through validated SSL certificates. This will
    complement the multi-application hosting environment we’ve cultivated with NGINX,
    where it serves both the dynamic content management of WordPress and the robust
    data ecosystem of Nextcloud.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Nextcloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we’ve already configured NGINX to serve our WordPress site, optimized specifically
    for WordPress’s unique requirements, we’ll now employ Docker to host Nextcloud.
    This approach ensures isolation and flexibility without disrupting our current
    setup. We’ll use Docker’s containerization to seamlessly integrate Nextcloud alongside
    WordPress. More exactly, we’ll deploy the NextCloud All-In-One image which features
    an integrated Apache web server, and proxy it through NGINX. Please refer back
    to [*Chapter 8*](B21787_08.xhtml#_idTextAnchor688) for guidance on setting up
    Docker if needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll create a directory `/root/nextcloud` and within this folder, we’ll create
    the file `docker-compose.yml` with the official All-In-One Nextcloud Docker image.
    Please refer to their online github to get the latest docker compose file. Currently,
    it looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We’ve saved the file in our `directory /root/nextcloud`. Within this directory,
    let’s start the container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: server {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: listen 443 ssl http2;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: listen [::]:443 ssl http2;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: include ssl.conf;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: server_name nextcloud.example.com;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: location / {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: proxy_pass http://127.0.0.1:11000$request_uri;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: proxy_set_header X-Forwarded-Port $server_port;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: proxy_set_header X-Forwarded-Scheme $scheme;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: proxy_set_header X-Forwarded-Proto $scheme;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: proxy_set_header X-Real-IP $remote_addr;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: proxy_set_header Accept-Encoding "";
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: proxy_set_header Host $host;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: client_body_buffer_size 512k;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: proxy_read_timeout 86400s;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: client_max_body_size 0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '# Websocket'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: proxy_http_version 1.1;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: proxy_set_header Upgrade $http_upgrade;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: proxy_set_header Connection $connection_upgrade;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure to test your configuration and reload the NGINX server, before getting
    ready to set up Nextcloud:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.5: Nextcloud default installation page](img/B21787_10_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.5: Nextcloud default installation page'
  prefs: []
  type: TYPE_NORMAL
- en: There you have it, your Nextcloud server is ready for action. For further customization
    and detailed configurations, the Nextcloud official documentation is an excellent
    resource. You can find it at [nextcloud.com](http://nextcloud.com).
  prefs: []
  type: TYPE_NORMAL
- en: With the foundations laid, you’re now equipped to deploy numerous servers, utilizing
    Docker for containerization or installing directly on the host. Just remember
    to use compatible software versions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll recap the key points covered in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we’ve mastered the art of generating verified SSL certificates
    with acme.sh, tapping into DNS APIs for efficiency. We’ve explored the enhancements
    offered by HTTP/2 and laid the groundwork for HTTP/3, setting the stage for optimal
    web performance. This knowledge has empowered us to deploy a WordPress site, fortified
    with SSL and best security practices such as chroot environments. Additionally,
    we’ve taken a deep dive into Docker by deploying a Nextcloud server, demonstrating
    our ability to manage multiple services on a single server seamlessly.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you may have noticed in the cases we studied in this chapter, the process
    of setting up a web application can sometimes be long and complex. But when it
    comes to the part that concerns NGINX, the configuration is usually pretty simple
    and straightforward: a couple of directives in a server block, reload the server,
    and you’re done.'
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, in some cases, while your initial configuration seems to do the
    trick, you realize over time that your visitors run into a variety of problems
    or are presented with unexpected error pages. The next chapter will prepare you
    to face such issues by exploring several leads, should you ever need to troubleshoot
    your web server.
  prefs: []
  type: TYPE_NORMAL
