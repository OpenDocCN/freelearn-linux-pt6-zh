["```\nconfigure --add-module=/opt/downloads/module-folder\n```", "```\nhttp {\n    upstream database {\n        postgres_server  127.0.0.1 dbname=test\n                         user=user password=password;\n    }\n\n    server {\n        location / {\n            postgres_pass   database;\n            postgres_query  \"select * from users\";\n        }\n    }\n}\n```", "```\npostgres_server  127.0.0.1 dbname=test user=test password=test;\n```", "```\npostgres_keepalive off | max=count [mode=single|multi] [overflow=ignore|reject]\ndefault: max=10 mode=single overflow=ignore\n```", "```\npostgres_query    GET POST  \"SELECT * FROM employees\";\n```", "```\npostgres_rewrite  no_rows =403;\n```", "```\npostgres_set $empname 00 required\n```", "```\npostgres_escape   $user $remote_user;\npostgres_escape   $pass $remote_passwd;\n```", "```\n    drizzle_server 127.0.0.1:3306 user=user \"password=1 2 3\"\n            dbname=mysql protocol=mysql;\n    ```", "```\n    drizzle_server localhost:3306 user=mysqluser password=passwd\n                                      dbname=mydb charset=utf8;\n    ```", "```\nlocation /employees {\n    set_unescape_uri $name $arg_name;\n    set_quote_sql_str $quoted_name $name;\n\n    drizzle_query \"select * from empl where name = $quoted_name\";\n    drizzle_pass my_backend;\n}\n```", "```\nupstream backend { localhost:3306 dbname=mydb; }\n\nserver {\n    location /emp {\n        set $srv backend;\n\n        drizzle_query ...;\n        drizzle_pass $srv;\n    }\n }\n```", "```\nX-Resty-DBD-Module: ngx_drizzle 0.1.0\n```", "```\nauth_digest_user_file /opt/passwd.digest;\nlocation /members{\n  auth_digest 'members area; # set the realm for this location block\n}\n```", "```\nauth_digest_user_file /opt/htdigest;\nauth_digest_shm_size 4m;   # the storage space allocated for tracking active sessions\n\nlocation /restricted {\n  auth_digest 'this is a restricted location';\n  auth_digest_timeout 60s;\n  auth_digest_expires 10s;\n  auth_digest_replays 20;\n}\n\nlocation / {\n  auth_digest 'restricted';\n  location /img {\n    auth_digest off; # this location will be accessible  }\n}\n```", "```\nhttp {\n  pagespeed On;\n  pagespeed FileCachePath \"/var/cache/ngx_pagespeed/\";\n  pagespeed EnableFilters combine_css,combine_javascript, add_instrumentation;\n  ...\n  ...\n}\n```", "```\npagespeed on;\n\n# Needs to exist and be writable by nginx.\npagespeed FileCachePath /var/ngx_pagespeed_cache;\n\n# Ensure requests for pagespeed optimized resources go to the pagespeed handler\n# and no extraneous headers get set.\nlocation ~ \"\\.pagespeed\\.([a-z]\\.)?[a-z]{2}\\.[^.]{10}\\.[^.]+\" {\n  add_header \"\" \"\";\n}\nlocation ~ \"^/ngx_pagespeed_static/\" { }\nlocation ~ \"^/ngx_pagespeed_beacon$\" { }\nlocation /ngx_pagespeed_statistics { allow 127.0.0.1; deny all; }\n# Recent log messages. Like statistics, these are generally not to be shown to the public, so this has access controls as well.\npagespeed MessageBufferSize 100000;\nlocation /ngx_pagespeed_message { allow 127.0.0.1; deny all; }\n```", "```\n$ curl -I 'http://localhost /index.html/'  |  grep X-Page-Speed\nX-Page-Speed: 1.6.29.5-...\n```", "```\n  # set search paths for pure Lua external libraries (';;' is the default path):\n    lua_package_path '/home/user/?.lua;/scripts/?.lua;;';\n\n    # set search paths for Lua external libraries written in C (can also use ';;'):\n    lua_package_cpath '/bar/for/?.so;/blah/blah/?.so;;';\n\n    server {\n        location /inline_concat {\n            # MIME type determined by default_type:\n            default_type 'text/plain';\n            set $a \"hello\";\n            set $b \"world\";\n            # inline Lua script\n            set_by_lua $res \"return ngx.arg[1]..ngx.arg[2]\" $a $b;\n            echo $res;\n        }\n```", "```\nlocation /testlua {\n    set_by_lua $sum '\n        local a = 32\n        local b = 56\n        return a + b;          -- return the $sum value normally\n    ';\n\n    echo \"sum = $sum\n}\n```", "```\nset $num 32;\nset_by_lua $num2 'tonumber(ngx.var.num) + 1';\n```", "```\n    location /rel_file_concat {\n        set $a \"foo\";\n        set $b \"bar\";\n        # script path relative to nginx prefix\n        # $ngx_prefix/conf/concat.lua contents:\n        #\n        #    return ngx.arg[1]..ngx.arg[2]\n        #\n        set_by_lua_file $res conf/concat.lua $a $b;\n        echo $res;\n    }\n```", "```\n    location /request_body {\n         # force reading request body (default off)\n         lua_need_request_body on;\n         client_max_body_size 50k;\n         client_body_buffer_size 50k;\n\n         content_by_lua 'ngx.print(ngx.var.request_body)';\n    }\n    # transparent non-blocking I/O in Lua via subrequests\n    location /lua {\n        # MIME type determined by default_type:\n        default_type 'text/plain';\n\n        content_by_lua '\n            local res = ngx.location.capture(\"/some_other_location\")\n            if res.status == 200 then\n                ngx.print(res.body)\n            end';\n    }\n```", "```\n  location /foo {\n      set $a 5; # create and initialize $a\n      set $b 13; # create and initialize $b\n      rewrite_by_lua 'ngx.var.b = tonumber(ngx.var.a) + 1';\n      if ($b = '6') {\n         rewrite ^ /bar redirect;\n         break;\n      }\n      echo \"res = $b\";\n  }\n```", "```\nlocation /foo {\n    set $a 5; # create and initialize $a\n    set $b 13; # create and initialize $b\n    rewrite_by_lua '\n        ngx.var.b = tonumber(ngx.var.a) + 1\n        if tonumber(ngx.var.b) == 6 then\n            return ngx.redirect(\"/bar\");\n        end\n    ';\n\n    echo \"res = $b\";\n}\n```", "```\n    location /script {\n            content_by_lua_file /path/to/script/$1.lua;\n    }\n```", "```\n\nlocation / {\n        access_by_lua '\n            local ret = ngx.location.capture(\"/ldap_auth\")\n\n            if ret.status == ngx.HTTP_OK then\n                return\n            end\n\n            if ret.status == ngx.HTTP_FORBIDDEN then\n                ngx.exit(ret.status)\n            end\n\n            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)\n        ';\n    }\n        access_by_lua '\n               if ngx.var.remote_addr == \"10.11.60.220\" then\n                   ngx.exit(ngx.HTTP_FORBIDDEN)\n               end ';  \n```", "```\nhttp {\n    geoip_country         countries.dat;\n    geoip_city            city.dat;\n    geoip_org             org.dat\n    geoip_proxy           10.220.136.0/24;\n    geoip_proxy           2331:0fb9::/32;\n    geoip_proxy_recursive on;\n    ...\n```", "```\nhttp {\n\n  upstream check_upstreams {\n    server server1.com;\n    server server2.com;\n    healthcheck_enabled;\n    healthcheck_delay 1000;\n    healthcheck_timeout 1000;\n    healthcheck_failcount 1;\n    healthcheck_expected 'BACKEND_ALIVE';\n    healthcheck_send \"GET /health HTTP/1.0\" 'Host: www.websitename.com';\n }\n...\n location /health_status {\n      healthcheck_status;\n }\n...\n}\n```", "```\n  healthcheck_send 'GET /health HTTP/1.0'\n   'Host: www.yourhost.com';\n```"]